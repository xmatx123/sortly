{"version":3,"sources":["assets/logo.png","components/Header.js","components/Footer.js","pages/HomePage.js","components/CountryCard.js","pages/GamePage.js","api/countriesApi.js","pages/GameOverPage.js","App.js","index.js"],"names":["module","exports","Header","React","createElement","className","Link","to","src","logo","alt","Footer","Date","getFullYear","HomePage","navigate","useNavigate","onClick","CountryCard","_ref","country","isClickable","highlight","isFlipped","setIsFlipped","useState","highlightClass","handleClick","flagUrl","name","population","toLocaleString","area","GamePage","sortedCountries","setSortedCountries","currentCountry","setCurrentCountry","remainingCountries","setRemainingCountries","score","setScore","mode","useParams","useEffect","async","validCountries","response","fetch","data","json","map","index","id","common","official","flags","svg","png","error","console","fetchCountries","filter","startNewGame","initializeGame","compareProperty","availableCountries","randomIndex","Math","floor","random","length","firstCountry","splice","nextIndex","nextCountry","handleInsert","newSortedCountries","isCorrectOrder","prevScore","pickNextCountry","state","message","countriesCopy","correctOrder","sort","a","b","incorrectCountry","userOrder","countriesList","i","renderComponents","push","key","forEach","buttonText","GameOverPage","location","useLocation","App","Router","Routes","Route","path","element","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.a9e4d064.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de73253.png\";","// src/components/Header.js\r\n\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\nimport logo from '../assets/logo.png'; // Ensure you have a logo image in your assets folder\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-container\">\r\n        <Link to=\"/\" className=\"header-logo\">\r\n          <img src={logo} alt=\"Sortly Logo\" className=\"logo-image\" />\r\n          <span className=\"site-name\">Sortly - The Sorting Game</span>\r\n        </Link>\r\n        {/* Navigation Links */}\r\n        <nav className=\"header-nav\">\r\n          <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n          <Link to=\"/game/population\" className=\"nav-link\">Population</Link>\r\n          <Link to=\"/game/area\" className=\"nav-link\">Area</Link>\r\n          {/* Add more links as needed */}\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// src/components/Footer.js\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\nimport logo from '../assets/logo.png'; // Reuse your logo\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <img src={logo} alt=\"Sortly Logo\" className=\"footer-logo\" />\r\n        <p>&copy; {new Date().getFullYear()} Sortly. All rights reserved.</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// src/pages/HomePage.js\r\n\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './HomePage.css';\r\n\r\nfunction HomePage() {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div className=\"homepage\">\r\n      {/* Section 1: Sort by Population */}\r\n      <div className=\"section population-section\">\r\n        <div className=\"overlay\">\r\n          <h2>Sort by Population</h2>\r\n          <button\r\n            className=\"button button-primary\"\r\n            onClick={() => navigate('/game/population')}\r\n          >\r\n            Play Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section 2: Sort by Area */}\r\n      <div className=\"section area-section\">\r\n        <div className=\"overlay\">\r\n          <h2>Sort by Area</h2>\r\n          <button\r\n            className=\"button button-primary\"\r\n            onClick={() => navigate('/game/area')}\r\n          >\r\n            Play Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section 3: Coming Soon */}\r\n      <div className=\"section coming-soon-section\">\r\n        <div className=\"overlay\">\r\n          <h2>New Game Mode</h2>\r\n          <p>Coming Soon</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","// src/components/CountryCard.js\r\n\r\nimport React, { useState } from 'react';\r\nimport './CountryCard.css';\r\n\r\nfunction CountryCard({ country, isClickable, highlight }) {\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    if (isClickable) {\r\n      setIsFlipped(!isFlipped);\r\n    }\r\n  };\r\n\r\n  const highlightClass = highlight ? `highlighted-${highlight}` : '';\r\n\r\n  return (\r\n    <div\r\n      className={`country-card ${isFlipped ? 'flipped' : ''} ${\r\n        isClickable ? 'clickable' : ''\r\n      }`}\r\n      onClick={handleClick}\r\n    >\r\n      <div className=\"card-inner\">\r\n        {/* Front Side */}\r\n        <div className={`card-face card-front ${highlightClass}`}>\r\n          <img\r\n            src={country.flagUrl}\r\n            alt={`Flag of ${country.name}`}\r\n            className=\"country-flag\"\r\n          />\r\n          <div className=\"country-info\">\r\n            <h3 className=\"country-name\">{country.name}</h3>\r\n          </div>\r\n        </div>\r\n        {/* Back Side */}\r\n        <div className={`card-face card-back ${highlightClass}`}>\r\n          <div className=\"country-info\">\r\n            <h3 className=\"country-name\">{country.name}</h3>\r\n            <p className=\"country-detail\">\r\n              Population: {country.population.toLocaleString()}\r\n            </p>\r\n            <p className=\"country-detail\">\r\n              Area: {country.area.toLocaleString()} km²\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryCard;\r\n","// src/pages/GamePage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport CountryCard from '../components/CountryCard';\r\nimport './GamePage.css';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { fetchCountries } from '../api/countriesApi'; // As previously set up\r\n\r\nfunction GamePage() {\r\n  const [sortedCountries, setSortedCountries] = useState([]);\r\n  const [currentCountry, setCurrentCountry] = useState(null);\r\n  const [remainingCountries, setRemainingCountries] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const { mode } = useParams(); // Get the game mode from the URL\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const initializeGame = async () => {\r\n      const data = await fetchCountries();\r\n      // Filter countries with missing data if necessary\r\n      const validCountries = data.filter(\r\n        (country) => country.population && country.area && country.flagUrl\r\n      );\r\n      startNewGame(validCountries);\r\n    };\r\n\r\n    initializeGame();\r\n  }, []);\r\n\r\n  // Determine the comparison property based on the game mode\r\n  const compareProperty = mode === 'area' ? 'area' : 'population';\r\n\r\n  const startNewGame = (data) => {\r\n    const availableCountries = [...data];\r\n\r\n    // Pick a random starting country\r\n    const randomIndex = Math.floor(Math.random() * availableCountries.length);\r\n    const firstCountry = availableCountries.splice(randomIndex, 1)[0];\r\n\r\n    // Now pick the next country from the remaining\r\n    const nextIndex = Math.floor(Math.random() * availableCountries.length);\r\n    const nextCountry = availableCountries.splice(nextIndex, 1)[0];\r\n\r\n    setSortedCountries([firstCountry]);\r\n    setRemainingCountries(availableCountries);\r\n    setScore(1);\r\n    setCurrentCountry(nextCountry);\r\n  };\r\n\r\n  const pickNextCountry = () => {\r\n    if (remainingCountries.length === 0) {\r\n      navigate('/gameover', {\r\n        state: { score, message: 'Congratulations! You sorted all countries correctly.' },\r\n      });\r\n      return;\r\n    }\r\n\r\n    const countriesCopy = [...remainingCountries];\r\n    const randomIndex = Math.floor(Math.random() * countriesCopy.length);\r\n    const nextCountry = countriesCopy.splice(randomIndex, 1)[0];\r\n\r\n    setCurrentCountry(nextCountry);\r\n    setRemainingCountries(countriesCopy);\r\n  };\r\n\r\n  const handleInsert = (index) => {\r\n    const newSortedCountries = [...sortedCountries];\r\n    newSortedCountries.splice(index, 0, currentCountry);\r\n\r\n    if (isCorrectOrder(newSortedCountries)) {\r\n      setSortedCountries(newSortedCountries);\r\n      setScore((prevScore) => prevScore + 1);\r\n      setCurrentCountry(null);\r\n      pickNextCountry();\r\n    } else {\r\n      const allCountries = [...sortedCountries, currentCountry];\r\n      const correctOrder = [...allCountries].sort((a, b) => a[compareProperty] - b[compareProperty]);\r\n\r\n      navigate('/gameover', {\r\n        state: {\r\n          score,\r\n          message: 'Incorrect placement!',\r\n          incorrectCountry: currentCountry,\r\n          userOrder: newSortedCountries,\r\n          correctOrder: correctOrder,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const isCorrectOrder = (countriesList) => {\r\n    for (let i = 0; i < countriesList.length - 1; i++) {\r\n      if (countriesList[i][compareProperty] > countriesList[i + 1][compareProperty]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Build the array of components to render\r\n  const renderComponents = [];\r\n\r\n  if (currentCountry) {\r\n    renderComponents.push(\r\n      <button\r\n        key={`insert-0`}\r\n        className=\"insert-button lower-button\"\r\n        onClick={() => handleInsert(0)}\r\n      >\r\n        Lower\r\n      </button>\r\n    );\r\n  }\r\n\r\n  sortedCountries.forEach((country, index) => {\r\n    renderComponents.push(\r\n      <CountryCard key={`country-${country.id}`} country={country} isClickable={true} />\r\n    );\r\n\r\n    if (currentCountry) {\r\n      let buttonText = '';\r\n      if (index === sortedCountries.length - 1) {\r\n        buttonText = 'Higher';\r\n        renderComponents.push(\r\n          <button\r\n            key={`insert-${index + 1}`}\r\n            className=\"insert-button higher-button\"\r\n            onClick={() => handleInsert(index + 1)}\r\n          >\r\n            {buttonText}\r\n          </button>\r\n        );\r\n      } else {\r\n        buttonText = 'Here';\r\n        renderComponents.push(\r\n          <button\r\n            key={`insert-${index + 1}`}\r\n            className=\"insert-button here-button\"\r\n            onClick={() => handleInsert(index + 1)}\r\n          >\r\n            {buttonText}\r\n          </button>\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"game-page\">\r\n      <h2>Sort Countries by {mode === 'area' ? 'Area' : 'Population'} (Ascending)</h2>\r\n      <p>Score: {score - 1}</p>\r\n      <div className=\"sorted-countries-container\">\r\n        {currentCountry && (\r\n          <div className=\"instructions\">\r\n            <p>\r\n              Where does <strong>{currentCountry.name}</strong> fit among the sorted countries?\r\n            </p>\r\n          </div>\r\n        )}\r\n        <div className=\"sorted-countries\">{renderComponents}</div>\r\n      </div>\r\n      {currentCountry && (\r\n        <div className=\"current-country\">\r\n          <h3>Current Country:</h3>\r\n          <CountryCard country={currentCountry} isClickable={false} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GamePage;\r\n","// src/api/countriesApi.js\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const response = await fetch('https://restcountries.com/v3.1/all');\r\n    const data = await response.json();\r\n\r\n    // Map the API data to match your application's structure\r\n    const countries = data.map((country, index) => ({\r\n      id: index + 1, // Assign a unique ID\r\n      name: country.name.common || country.name.official,\r\n      flagUrl: country.flags.svg || country.flags.png,\r\n      population: country.population,\r\n      area: country.area,\r\n    }));\r\n\r\n    return countries;\r\n  } catch (error) {\r\n    console.error('Error fetching countries:', error);\r\n    return [];\r\n  }\r\n};\r\n","// src/pages/GameOverPage.js\r\n\r\nimport React from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport CountryCard from '../components/CountryCard';\r\nimport './GameOverPage.css';\r\nimport '../components/Buttons.css';\r\n\r\nfunction GameOverPage() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { score, message, incorrectCountry, userOrder, correctOrder } = location.state || {};\r\n\r\n  return (\r\n    <div className=\"game-over-page\">\r\n      <h2>Game Over</h2>\r\n      <p>{message}</p>\r\n      <p>Your final score: {score - 1}</p>\r\n\r\n      {userOrder && incorrectCountry && (\r\n        <div className=\"user-order\">\r\n          <h3>Your order was:</h3>\r\n          <div className=\"country-list\">\r\n            {userOrder.map((country) => (\r\n              <CountryCard\r\n                key={country.id}\r\n                country={country}\r\n                isClickable={true}\r\n                highlight={country.id === incorrectCountry.id ? 'incorrect' : ''}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {correctOrder && incorrectCountry && (\r\n        <div className=\"correct-order\">\r\n          <h3>The correct order was:</h3>\r\n          <div className=\"country-list\">\r\n            {correctOrder.map((country) => (\r\n              <CountryCard\r\n                key={country.id}\r\n                country={country}\r\n                isClickable={true}\r\n                highlight={country.id === incorrectCountry.id ? 'correct' : ''}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"game-over-buttons\">\r\n        <button className=\"button button-primary\" onClick={() => navigate('/')}>\r\n          Play Again\r\n        </button>\r\n        <button className=\"button button-secondary\" onClick={() => navigate('/')}>\r\n          Go to Home Page\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOverPage;\r\n","// src/App.js\n\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer'; \nimport HomePage from './pages/HomePage';\nimport GamePage from './pages/GamePage';\nimport GameOverPage from './pages/GameOverPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <div className=\"content\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route\n            path=\"/game/:mode\"\n            element={<GamePage />}\n          />\n          <Route path=\"/gameover\" element={<GameOverPage />} />\n        </Routes>\n      </div>\n      <Footer /> \n    </Router>\n  );\n}\n\nexport default App;\n","// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}