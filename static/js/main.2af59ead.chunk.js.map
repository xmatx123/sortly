{"version":3,"sources":["assets/logo.png","assets/population.jpg","assets/area.jpg","firebase.js","contexts/AuthContext.js","services/avatarService.js","services/userProfileService.js","components/LoginButton.js","components/Header.js","components/Footer.js","pages/HomePage.js","components/CountryCard.js","api/countriesApi.js","services/cooperationGameService.js","pages/GamePage.js","pages/ClassicGamePage.js","services/battleRoyaleGameService.js","pages/BattleRoyaleGamePage.js","api/leaderboardApi.js","services/gameHistoryService.js","pages/GameOverPage.js","utils/dateUtils.js","pages/LeaderboardPage.js","services/achievementsService.js","components/profile/AvatarSelector.jsx","components/profile/ProfileHeader.jsx","components/profile/AchievementCard.jsx","components/profile/AchievementsSection.jsx","utils/achievementUtils.js","components/profile/GameHistoryItem.jsx","components/profile/GameHistory.jsx","pages/ProfilePage.js","services/lobbyService.js","components/GameLobby.js","services/leaderboardService.js","components/FirebaseTest.js","App.js","index.js"],"names":["module","exports","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","auth","getAuth","db","getFirestore","realtimeDb","getDatabase","AuthContext","createContext","useAuth","useContext","AuthProvider","_ref","children","currentUser","setCurrentUser","useState","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","React","createElement","Provider","avatarService","getAvatarOptions","id","url","name","userProfileService","userId","userDoc","getDoc","doc","exists","data","defaultProfile","nickname","country","avatarUrl","createdAt","Date","this","updateUserProfile","error","console","profileData","userRef","setDoc","updatedAt","merge","field","updateDoc","LoginButton","setEmail","setPassword","setError","showLoginForm","setShowLoginForm","userProfile","setUserProfile","navigate","useNavigate","async","profile","getUserProfile","uid","loadUserProfile","className","onClick","src","alt","message","disabled","type","onChange","e","target","placeholder","required","preventDefault","style","color","Header","isMenuOpen","setIsMenuOpen","closeMenu","Link","to","logo","toggleMenu","Footer","getFullYear","HomePage","backgroundImage","populationImage","backgroundPosition","backgroundSize","backgroundRepeat","handlePlayPopulation","ReactGA","event","category","action","label","handlePlayCooperation","handlePlayBattleRoyale","areaImage","handlePlayArea","CountryCard","isClickable","highlight","mode","customClassName","isFlipped","setIsFlipped","highlightClass","handleClick","flagUrl","population","toLocaleString","area","fetchCountries","response","fetch","ok","Error","status","json","Array","isArray","unMemberCountries","filter","_country$name","_country$flags","unMember","common","flags","svg","map","index","cooperationGameService","lobbyId","players","allCountries","length","fetchError","selectedCountries","getRandomElements","arr","num","warn","sort","Math","random","slice","initialCountry","inventoryCountries","gameStateRef","ref","initialState","currentPlayer","sortedCountries","remainingCountries","currentCountry","score","now","lastUpdated","set","log","subscribeToGameState","callback","listener","onValue","snapshot","val","off","updates","update","playerId","chosenCountry","gameState","get","some","c","placementIndex","potentialNewSortedCountries","splice","countriesList","i","isCorrect","_gameState$players$","placedCountryId","updatedRemainingCountries","nextPlayerId","currentPlayerIndex","findIndex","p","result","endGame","GamePage","_gameStateData$player","setSortedCountries","setCurrentCountry","setRemainingCountries","setScore","setGameState","gameStateData","setGameStateData","location","useLocation","gameMode","state","unsubscribe","undefined","finalScore","replace","handlePlaceCard","placeCard","isMyTurn","currentPlayerName","find","canPlace","aria-label","Fragment","key","isSelectedForPlacing","chooseCard","handleChooseCard","ClassicGamePage","countriesToPick","setCountriesToPick","gameStatus","setGameStatus","isLoading","setIsLoading","shuffled","initialSortedCountry","firstCountryToPlace","err","loadGame","handlePlaceCountry","countryToPlace","newSortedCountries","pickNextCountry","nextCountry","finalSortedList","incorrectCountry","attemptedIndex","window","reload","title","battleRoyaleGameService","initialPlayers","isActive","gameType","activePlayers","choosingPlayer","_findNextActivePlayer","currentPlayerId","placingPlayer","playerIndex","activePlayerIds","winner","winnerId","arguments","BattleRoyaleGamePage","winnerName","winnerScore","finalPlayersState","me","myPlayerState","amIActive","canChoose","getLeaderboard","leaderboard","JSON","parse","localStorage","getItem","entry","CATEGORIES","gameHistoryService","limitCount","gamesRef","collection","q","query","where","orderBy","firestoreLimit","getDocs","docs","a","b","topGames","Promise","all","getTopGames","countries","minimalCountries","addDoc","timestamp","serverTimestamp","GameOverPage","userOrder","correctOrder","playerName","setPlayerName","isSubmitted","setIsSubmitted","hasSaved","useRef","fetchUserProfile","current","historyScore","historyCountries","saveGame","saveGameHistory","player","onSubmit","trim","submitScoreValue","submitScore","newEntry","date","toISOString","push","top100","setItem","stringify","htmlFor","maxLength","getPlayAgainPath","formatDate","toDate","toLocaleDateString","year","month","day","LeaderboardPage","classicLeaderboard","setClassicLeaderboard","cooperationLeaderboard","setCooperationLeaderboard","loadLeaderboards","classicData","cooperationData","renderLeaderboardTable","ACHIEVEMENT_DEFINITIONS","sorting","bronze","description","icon","requirement","silver","gold","platinum","gameCount","achievementsService","achievements","correctCount","_currentAchievements$","_currentAchievements$2","currentAchievements","getUserAchievements","categoryAchievements","updated","Object","values","forEach","achievement","unlocked","unlockedAt","gameCountAchievement","currentCount","count","updateUserAchievements","getAchievementDefinitions","AvatarSelector","avatarOptions","selectedAvatar","onSelect","onClose","avatar","ProfileHeader","formData","setFormData","showAvatarSelector","setShowAvatarSelector","isEditing","setIsEditing","handleChange","prev","AchievementCard","isUnlocked","unlockDate","AchievementsSection","achievementDefinitions","transformedAchievements","definitions","entries","categoryData","_ref2","level","transformAchievementDefinitions","_achievements$achieve","_achievements$achieve2","_achievements$achieve3","GameHistoryItem","_game$timestamp","_game$countries","game","charAt","toUpperCase","idx","GameHistory","gameHistory","useMemo","keys","flatMap","games","self","g","ProfilePage","setProfile","setAchievements","setGameHistory","editing","setEditing","loadProfile","useCallback","userAchievements","userGameHistory","getAllTopGames","onEdit","onAvatarSelect","onAvatarSelectorToggle","onCancel","lobbyService","constructor","lobbiesRef","lobbyRef","lobbyData","currentPlayers","updatedPlayers","remove","subscribeToLobby","startedAt","endedAt","gameSettings","cooperation","minPlayers","maxPlayers","service","battleRoyale","GameLobby","setLobbyId","setPlayers","isHost","setIsHost","copyStatus","setCopyStatus","setGameMode","searchParams","useSearchParams","currentLobbyId","pathname","lowerPath","toLowerCase","includes","getGameModeFromPath","unsubscribeFn","isMounted","fetchProfileError","lobbyParam","targetLobbyId","playerInfo","floor","joinLobby","joinError","toString","substring","createLobby","createError","_lobbyData$players$","navigatePath","navError","initializeLobby","leaveLobby","settings","gameLink","origin","encodeURIComponent","navigator","clipboard","writeText","setTimeout","textArea","document","position","left","body","appendChild","focus","select","execCommand","copyErr","removeChild","initializeGameState","startGame","leaderboardService","username","limit","FirebaseTest","testScore","setTestScore","padding","addScore","marginLeft","marginTop","App","initialize","send","hitType","page","Routes","Route","path","element","ReactDOM","createRoot","getElementById","render","StrictMode","HashRouter","DndProvider","backend","HTML5Backend"],"mappings":"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","file":"static/js/main.2af59ead.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de73253.png\";","module.exports = __webpack_public_path__ + \"static/media/population.b123bcc2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/area.1a41ffef.jpg\";","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getDatabase } from 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nexport const auth = getAuth(app);\n\n// Initialize Cloud Firestore and get a reference to the service\nexport const db = getFirestore(app);\n\n// Initialize Realtime Database and get a reference to the service\nexport const realtimeDb = getDatabase(app);\n\nexport default app; ","import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged \r\n} from 'firebase/auth';\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  function signup(email, password) {\r\n    return createUserWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function login(email, password) {\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function logout() {\r\n    return signOut(auth);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setCurrentUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n} ","export const avatarService = {\r\n  getAvatarOptions() {\r\n    return [\r\n      {\r\n        id: 'default',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=default',\r\n        name: 'Default'\r\n      },\r\n      {\r\n        id: 'happy',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=happy',\r\n        name: 'Happy'\r\n      },\r\n      {\r\n        id: 'cool',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=cool',\r\n        name: 'Cool'\r\n      },\r\n      {\r\n        id: 'smart',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=smart',\r\n        name: 'Smart'\r\n      },\r\n      {\r\n        id: 'friendly',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=friendly',\r\n        name: 'Friendly'\r\n      },\r\n      {\r\n        id: 'adventurous',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=adventurous',\r\n        name: 'Adventurous'\r\n      },\r\n      {\r\n        id: 'creative',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=creative',\r\n        name: 'Creative'\r\n      },\r\n      {\r\n        id: 'mysterious',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mysterious',\r\n        name: 'Mysterious'\r\n      }\r\n    ];\r\n  }\r\n}; ","import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { avatarService } from './avatarService';\n\nconst USERS_COLLECTION = 'users';\n\nexport const userProfileService = {\n  // Get user profile\n  async getUserProfile(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, USERS_COLLECTION, userId));\n      if (userDoc.exists()) {\n        return userDoc.data();\n      }\n      // If no profile exists, create a default one\n      const defaultProfile = {\n        nickname: '',\n        country: '',\n        avatarUrl: avatarService.getAvatarOptions()[0].url,\n        createdAt: new Date()\n      };\n      await this.updateUserProfile(userId, defaultProfile);\n      return defaultProfile;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      throw error;\n    }\n  },\n\n  // Create or update user profile\n  async updateUserProfile(userId, profileData) {\n    try {\n      const userRef = doc(db, USERS_COLLECTION, userId);\n      await setDoc(userRef, {\n        ...profileData,\n        updatedAt: new Date()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n\n  // Update specific profile fields\n  async updateProfileField(userId, field, value) {\n    try {\n      const userRef = doc(db, USERS_COLLECTION, userId);\n      await updateDoc(userRef, {\n        [field]: value,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.error('Error updating profile field:', error);\n      throw error;\n    }\n  }\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { userProfileService } from '../services/userProfileService';\r\nimport { avatarService } from '../services/avatarService';\r\nimport './LoginButton.css';\r\n\r\nexport default function LoginButton() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [showLoginForm, setShowLoginForm] = useState(false);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadUserProfile = async () => {\r\n      if (currentUser) {\r\n        try {\r\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\r\n          setUserProfile(profile);\r\n        } catch (error) {\r\n          console.error('Error loading user profile:', error);\r\n        }\r\n      }\r\n    };\r\n    loadUserProfile();\r\n  }, [currentUser]);\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleSignup(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n      navigate('/');\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  if (currentUser) {\r\n    return (\r\n      <div className=\"login-button\">\r\n        <div className=\"user-profile-button\" onClick={() => navigate('/profile')}>\r\n          <img \r\n            src={userProfile?.avatarUrl || avatarService.getAvatarOptions()[0].url} \r\n            alt=\"Profile\" \r\n            className=\"header-avatar\"\r\n          />\r\n          <span className=\"user-name\">{userProfile?.nickname || currentUser.email}</span>\r\n        </div>\r\n        <button onClick={handleLogout} disabled={loading} className=\"logout-button\">\r\n          Log Out\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-button\">\r\n      {!showLoginForm ? (\r\n        <button onClick={() => setShowLoginForm(true)}>\r\n          Login / Sign Up\r\n        </button>\r\n      ) : (\r\n        <div className=\"login-form\">\r\n          <input\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder=\"Email\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n          <div className=\"login-buttons\">\r\n            <button onClick={handleLogin} disabled={loading}>\r\n              Login\r\n            </button>\r\n            <button onClick={handleSignup} disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n            <button onClick={() => setShowLoginForm(false)}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} ","// src/components/Header.js\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\nimport logo from '../assets/logo.png'; // Ensure you have a logo image in your assets folder\nimport LoginButton from './LoginButton';\n\nfunction Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-container\">\n        <Link to=\"/\" className=\"header-logo\" onClick={closeMenu}>\n          <img src={logo} alt=\"Sortly Logo\" className=\"logo-image\" />\n          <span className=\"site-name\">Sortly - The Sorting Game</span>\n        </Link>\n        <button className=\"menu-button\" onClick={toggleMenu}>\n          ☰\n        </button>\n        <nav className={`header-nav ${isMenuOpen ? 'active' : ''}`}>\n          <Link to=\"/\" className=\"nav-link\" onClick={closeMenu}>Home</Link>\n          <Link to=\"/game/population\" className=\"nav-link\" onClick={closeMenu}>Population</Link>\n          <Link to=\"/game/area\" className=\"nav-link\" onClick={closeMenu}>Area</Link>\n          <Link to=\"/leaderboard\" className=\"nav-link\" onClick={closeMenu}>Leaderboard</Link>\n          <div className=\"nav-login\">\n            <LoginButton />\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","// src/components/Footer.js\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\nimport logo from '../assets/logo.png'; // Reuse your logo\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <img src={logo} alt=\"Sortly Logo\" className=\"footer-logo\" />\r\n        <p>&copy; {new Date().getFullYear()} Sortly. All rights reserved.</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// src/pages/HomePage.js\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ReactGA from 'react-ga4'; // Import ReactGA\nimport populationImage from '../assets/population.jpg';\nimport areaImage from '../assets/area.jpg';\nimport './HomePage.css';\n\nfunction HomePage() {\n  const navigate = useNavigate();\n\n  // Define the handler functions\n  const handlePlayPopulation = () => {\n    // Track the event in Google Analytics\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Population Classic',\n      label: 'Population Classic'\n    });\n    // Navigate to the population game page\n    navigate('/game/population');\n  };\n\n  const handlePlayArea = () => {\n    // Track the event in Google Analytics\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Area Classic',\n      label: 'Area Classic'\n    });\n    // Navigate to the area game page\n    navigate('/game/area');\n  };\n\n  const handlePlayCooperation = () => {\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Population Cooperation',\n      label: 'Population Cooperation'\n    });\n    navigate('/game/population/cooperation');\n  };\n\n  const handlePlayBattleRoyale = () => {\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Population Battle Royale',\n      label: 'Population Battle Royale'\n    });\n    navigate('/game/population/battleroyale');\n  };\n\n  return (\n    <div className=\"homepage\">\n      {/* Section 1: Sort by Population */}\n      <div \n        className=\"section population-section\"\n        style={{\n          backgroundImage: `url(${populationImage})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat'\n        }}\n      >\n        <div className=\"overlay\">\n          <h2>Sort by Population</h2>\n          <div className=\"population-modes mode-buttons\">\n            <button\n              className=\"button button-primary\"\n              onClick={handlePlayPopulation}\n            >\n              Classic Mode\n            </button>\n            <button\n              className=\"button button-primary\"\n              onClick={handlePlayCooperation}\n            >\n              Cooperation Mode\n            </button>\n            <button\n              className=\"button button-primary\"\n              onClick={handlePlayBattleRoyale}\n            >\n              Battle Royale Mode\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 2: Sort by Area */}\n      <div \n        className=\"section area-section\"\n        style={{\n          backgroundImage: `url(${areaImage})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat'\n        }}\n      >\n        <div className=\"overlay\">\n          <h2>Sort by Area</h2>\n          <div className=\"area-modes mode-buttons\">\n            <button\n              className=\"button button-primary\"\n              onClick={handlePlayArea}\n            >\n              Classic Mode\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","// src/components/CountryCard.js\n\nimport React, { useState } from 'react';\nimport './CountryCard.css';\n\nfunction CountryCard({ country, isClickable, highlight, mode, onClick, customClassName }) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    if (onClick) {\n      if (isClickable) {\n        onClick();\n      }\n    } else {\n      if (isClickable) {\n        setIsFlipped(!isFlipped);\n      }\n    }\n  };\n\n  const highlightClass = highlight ? `highlighted-${highlight}` : '';\n\n  const getDetailText = () => {\n    const detailMappings = {\n      population: `Population: ${country.population.toLocaleString()}`,\n      area: `Area: ${country.area.toLocaleString()} km²`\n    };\n    return detailMappings[mode] || '';\n  };\n\n  return (\n    <div\n      className={`country-card ${isFlipped ? 'flipped' : ''} ${\n        isClickable ? 'clickable' : ''\n      } ${highlightClass} ${customClassName || ''}`}\n      onClick={handleClick}\n    >\n      <div className=\"card-inner\">\n        {/* Front Side */}\n        <div className={`card-face card-front ${highlightClass}`}>\n          <img\n            src={country.flagUrl}\n            alt={`Flag of ${country.name}`}\n            className=\"country-flag\"\n          />\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n          </div>\n        </div>\n        {/* Back Side */}\n        <div className={`card-face card-back ${highlightClass}`}>\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n            <p className=\"country-detail\">\n              {getDetailText()}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CountryCard;\n","// src/api/countriesApi.js\n\nexport const fetchCountries = async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      throw new Error('Invalid data format received from API');\n    }\n\n    // Filter to only include UN member states with valid data\n    const unMemberCountries = data.filter((country) => \n      country.unMember && \n      country.name?.common && \n      country.flags?.svg && \n      typeof country.population === 'number' && \n      typeof country.area === 'number'\n    );\n\n    // Map the API data to match your application's structure\n    const countries = unMemberCountries.map((country, index) => ({\n      id: index + 1,\n      name: country.name.common,\n      flagUrl: country.flags.svg,\n      population: country.population,\n      area: country.area,\n    }));\n\n    return countries;\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    throw new Error('Failed to fetch countries data. Please try again later.');\n  }\n};\n  ","import { realtimeDb } from '../firebase';\nimport { ref, set, update, onValue, off, get } from 'firebase/database';\nimport { fetchCountries } from '../api/countriesApi'; // Import fetchCountries here\n\nconst GAME_STATES_PATH = 'gameStates';\n\n// Helper to get random elements without mutation\nconst getRandomElements = (arr, num) => {\n  if (num > arr.length) {\n    console.warn(\"Requested more elements than available\");\n    num = arr.length;\n  }\n  const shuffled = [...arr].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, num);\n};\n\nexport const cooperationGameService = {\n  // Initialize a new game state for cooperation mode\n  async initializeGameState(lobbyId, players) {\n    // Fetch all countries within the service\n    let allCountries;\n    try {\n      allCountries = await fetchCountries();\n      if (!allCountries || allCountries.length < 11) { // Need at least 11\n        throw new Error('Not enough valid countries fetched to start cooperation mode.');\n      }\n    } catch (fetchError) {\n      console.error(\"Failed to fetch countries for initialization:\", fetchError);\n      throw new Error('Could not fetch country data to start the game.');\n    }\n\n    // Select 11 countries (1 initial + 10 inventory)\n    const selectedCountries = getRandomElements(allCountries, 11);\n    const initialCountry = selectedCountries[0];\n    const inventoryCountries = selectedCountries.slice(1);\n\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const initialState = {\n      lobbyId: lobbyId, // Store lobbyId for reference\n      currentPlayer: players[0].id, // First player starts\n      players: players,\n      mode: 'choosing', // Start in choosing mode\n      sortedCountries: [initialCountry], // Start with one country sorted\n      remainingCountries: inventoryCountries, // The 10 countries in inventory\n      currentCountry: null, // No country chosen to place yet\n      score: 1, // Started with 1 country sorted\n      status: 'playing',\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    };\n\n    await set(gameStateRef, initialState);\n    console.log(\"Initialized game state for lobby\", lobbyId, initialState);\n    // No need to return initialState, changes propagate via subscription\n  },\n\n  // Subscribe to game state changes\n  subscribeToGameState(lobbyId, callback) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const listener = onValue(gameStateRef, (snapshot) => {\n      const data = snapshot.val();\n      callback(data); // Pass data (or null if deleted) to callback\n    }, (error) => {\n      console.error(\"Error subscribing to game state:\", error);\n      callback(null); // Notify callback of error/disconnection\n    });\n\n    // Return unsubscribe function\n    return () => off(gameStateRef, 'value', listener);\n  },\n\n  // Update game state (internal helper - might not be needed externally anymore)\n  async updateGameState(lobbyId, updates) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    await update(gameStateRef, {\n      ...updates,\n      lastUpdated: Date.now()\n    });\n  },\n\n  // Player chooses a card from the inventory\n  async chooseCard(lobbyId, playerId, chosenCountry) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const snapshot = await get(gameStateRef);\n    const gameState = snapshot.val();\n\n    if (!gameState || gameState.status !== 'playing') {\n      throw new Error('Game is not active or not found');\n    }\n    if (gameState.mode !== 'choosing') {\n      throw new Error('Not in choosing mode');\n    }\n    if (gameState.currentPlayer !== playerId) {\n      throw new Error('Not your turn to choose');\n    }\n    // Verify the chosen country ID exists in the remaining list\n    if (!gameState.remainingCountries || !gameState.remainingCountries.some(c => c.id === chosenCountry.id)) {\n       console.error(\"Chosen country ID not found in remaining:\", chosenCountry?.id, gameState.remainingCountries);\n       throw new Error('Chosen country is not valid or not in the remaining inventory');\n    }\n\n    await update(gameStateRef, {\n      currentCountry: chosenCountry, // Set the chosen country as the one to be placed\n      mode: 'placing', // Switch mode to placing\n      lastUpdated: Date.now()\n    });\n  },\n\n  // Player places the chosen card into the sorted list\n  async placeCard(lobbyId, playerId, placementIndex) {\n    // placementIndex is the index where the player wants to insert the currentCountry\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const snapshot = await get(gameStateRef);\n    const gameState = snapshot.val();\n\n    if (!gameState || gameState.status !== 'playing') {\n      throw new Error('Game is not active or not found');\n    }\n    if (gameState.mode !== 'placing') {\n      throw new Error('Not in placing mode');\n    }\n    if (gameState.currentPlayer !== playerId) {\n      throw new Error('Not your turn to place');\n    }\n    if (!gameState.currentCountry) {\n        throw new Error('No country currently chosen for placement');\n    }\n    if (typeof placementIndex !== 'number' || placementIndex < 0 || placementIndex > gameState.sortedCountries.length) {\n      console.error(\"Invalid placement index received:\", placementIndex, \"Current sorted length:\", gameState.sortedCountries.length);\n      throw new Error('Invalid placement index');\n    }\n\n    // Construct the potential new sorted list based on the placement index\n    const potentialNewSortedCountries = [...gameState.sortedCountries];\n    potentialNewSortedCountries.splice(placementIndex, 0, gameState.currentCountry);\n\n    // Server-side validation of the placement (using compareProperty)\n    const compareProperty = 'population'; // Assuming population for cooperation\n    const isCorrect = (countriesList) => {\n      // Check if countriesList is valid before accessing length\n      if (!Array.isArray(countriesList)) {\n        console.error(\"isCorrect received non-array:\", countriesList);\n        return false; // Or handle as appropriate\n      }\n      for (let i = 0; i < countriesList.length - 1; i++) {\n        // Add checks for country objects and the compare property\n        if (!countriesList[i] || !countriesList[i+1] ||\n            typeof countriesList[i][compareProperty] === 'undefined' ||\n            typeof countriesList[i+1][compareProperty] === 'undefined' ||\n            countriesList[i][compareProperty] > countriesList[i + 1][compareProperty]) {\n          console.warn(`Incorrect order found at index ${i}:`, countriesList[i], countriesList[i+1]);\n          return false;\n        }\n      }\n      return true;\n    };\n\n    if (isCorrect(potentialNewSortedCountries)) {\n      // Correct Placement\n\n      // --- Start: Added logic to remove placed card from remaining --- \n      // Ensure we have the country that was just placed and the remaining list\n      const placedCountryId = gameState.currentCountry.id;\n      let updatedRemainingCountries = gameState.remainingCountries || [];\n\n      // Filter out the placed country from the remaining list\n      updatedRemainingCountries = updatedRemainingCountries.filter(country => country.id !== placedCountryId);\n      // --- End: Added logic --- \n\n      // Determine the next player correctly, ensuring players array exists\n      let nextPlayerId = gameState.players[0]?.id; // Default to first player if only one or issues\n      if (gameState.players.length > 1) {\n          const currentPlayerIndex = gameState.players.findIndex(p => p.id === playerId);\n          nextPlayerId = gameState.players[(currentPlayerIndex + 1) % gameState.players.length].id;\n      }\n\n      const updates = {\n        currentPlayer: nextPlayerId,\n        sortedCountries: potentialNewSortedCountries, // Update the sorted list\n        remainingCountries: updatedRemainingCountries, // Update the remaining list\n        currentCountry: null, // Clear the placed country\n        mode: 'choosing', // Go back to choosing mode\n        score: gameState.score + 1,\n        lastUpdated: Date.now()\n      };\n\n      // Check for win condition (newly updated inventory empty AND placed correctly)\n      if (updatedRemainingCountries.length === 0) {\n        updates.status = 'completed';\n        updates.result = 'win';\n        updates.mode = 'finished'; // Or some final mode\n      }\n\n      await update(gameStateRef, updates);\n\n    } else {\n      // Incorrect Placement - End Game\n      console.log(`Incorrect placement by ${playerId}. Ending game.`);\n      await this.endGame(lobbyId); // Call endGame directly\n    }\n  },\n\n  // End game (can be called on incorrect placement or explicitly)\n  async endGame(lobbyId) { // No longer needs playerId here if called internally\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    // Check if game exists before updating\n    const snapshot = await get(gameStateRef);\n    if (snapshot.exists() && snapshot.val().status === 'playing') {\n      await update(gameStateRef, {\n        status: 'completed',\n        result: 'lose',\n        mode: 'finished',\n        currentCountry: null, // Ensure no country is stuck in current\n        lastUpdated: Date.now()\n      });\n      console.log(\"Game ended with lose state for lobby:\", lobbyId);\n    } else {\n       console.log(\"Game already completed or does not exist, skipping endGame call for lobby:\", lobbyId);\n    }\n  },\n\n  // Clean up game state\n  async cleanupGameState(lobbyId) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    await set(gameStateRef, null);\n  }\n}; ","// src/pages/GamePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport CountryCard from '../components/CountryCard';\nimport './GamePage.css';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { cooperationGameService } from '../services/cooperationGameService';\n\nfunction GamePage() {\n  const { currentUser } = useAuth();\n  const [sortedCountries, setSortedCountries] = useState([]);\n  const [currentCountry, setCurrentCountry] = useState(null);\n  const [remainingCountries, setRemainingCountries] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameState, setGameState] = useState('waiting'); // waiting, playing, ended\n  const [gameStateData, setGameStateData] = useState(null); // Store full game state\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    // Ensure location.state exists and get lobbyId and gameMode\n    const { lobbyId, gameMode } = location.state || {}; \n    \n    // Validate lobbyId and ensure this page is for 'cooperation' mode\n    if (!lobbyId || gameMode !== 'cooperation') { \n      console.error(\"Incorrect state for Cooperation GamePage:\", location.state);\n      navigate('/'); \n      return;\n    }\n\n    // Subscribe to the game state from Firebase\n    const unsubscribe = cooperationGameService.subscribeToGameState(lobbyId, (data) => {\n      if (data) {\n        setGameStateData(data);\n        setScore(data.score !== undefined ? data.score : 0);\n        setSortedCountries(data.sortedCountries || []);\n        setCurrentCountry(data.currentCountry || null); // The country to be placed\n        setRemainingCountries(data.remainingCountries || []);\n        setGameState(data.status || 'waiting'); // Use status from DB\n\n        // Handle game completion based on status from DB\n        if (data.status === 'completed') {\n           let message = 'Game Over!';\n           let finalScore = data.score || 0; // Use score from data\n\n           if (data.result === 'win') {\n             message = 'Congratulations! You sorted all countries correctly.';\n           } else if (data.result === 'lose') {\n             message = 'Game Over! An incorrect move was made.';\n             // In coop lose, the score might be the number correctly placed before the mistake\n           }\n           \n           navigate('/gameover', {\n              state: { \n                score: finalScore, // Pass the final score\n                message: message,\n                gameMode: 'cooperation' // Explicitly pass mode\n                // Optionally pass userOrder/correctOrder if needed from data\n              }, \n              replace: true\n            });\n        }\n\n      } else {\n        // Lobby or game state deleted or not found\n        console.error(\"Game state not found for lobby:\", lobbyId);\n        navigate('/'); // Navigate away if game state disappears\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n\n  }, [location.state, navigate, currentUser]); // Dependencies: only location state, navigate, currentUser\n\n  // Handler for when a player chooses a card from the inventory\n  const handleChooseCard = async (country) => {\n    if (!gameStateData || !currentUser) return;\n    if (gameStateData.currentPlayer !== currentUser.uid) return; // Not their turn\n    if (gameStateData.mode !== 'choosing') return; // Wrong mode\n\n    try {\n      await cooperationGameService.chooseCard(gameStateData.lobbyId, currentUser.uid, country);\n    } catch (error) {\n      console.error(\"Error choosing card:\", error);\n      // Could add error state/message here\n    }\n  };\n\n  // Handler for placing a card in the sorted list\n  const handlePlaceCard = async (index) => {\n    if (!gameStateData || !currentUser || !currentCountry) return;\n    if (gameStateData.currentPlayer !== currentUser.uid) return; // Not their turn\n    if (gameStateData.mode !== 'placing') return; // Wrong mode\n\n    // No need to manually create newSortedCountries here,\n    // the backend service will handle the logic based on the index.\n    // Let the service determine correctness and update the state.\n\n    try {\n      // Pass the index where the player wants to place the card\n      await cooperationGameService.placeCard(gameStateData.lobbyId, currentUser.uid, index);\n    } catch (error) {\n      console.error(\"Error placing card:\", error);\n      // Could add error state/message here\n    }\n  };\n\n  if (!gameStateData || gameState === 'waiting') {\n    return <div className=\"game-page\">Loading Game...</div>;\n  }\n\n  const isMyTurn = gameStateData.currentPlayer === currentUser?.uid;\n  const currentPlayerName = gameStateData.players.find(p => p.id === gameStateData.currentPlayer)?.name || 'Unknown';\n  // Determine if the current player can place a card\n  const canPlace = gameStateData.mode === 'placing' && isMyTurn && currentCountry;\n\n  return (\n    <div className=\"game-page\">\n      <h2>Cooperation Mode</h2>\n      <p>Current Turn: {currentPlayerName}</p>\n      <p>Score: {score}</p>\n\n      {/* Display sorted countries with placement buttons integrated */}\n      <div className=\"sorted-countries-container\">\n        <h3>Sorted Countries:</h3>\n        <div className=\"sorted-countries\">\n          {/* Button to place at the start */}\n          {canPlace && (\n            <button\n              className=\"place-button plus-button\" // Added class for styling\n              onClick={() => handlePlaceCard(0)}\n              aria-label=\"Place card at the beginning\"\n            >\n              +\n            </button>\n          )}\n          {sortedCountries.map((country, index) => (\n            // Use React.Fragment to group card and button without adding extra DOM nodes\n            <React.Fragment key={`sorted-fragment-${country.id}`}>\n              <CountryCard\n                country={country}\n                isClickable={false} // Sorted cards are not clickable\n                mode=\"population\"\n              />\n              {/* Button to place after this card */}\n              {canPlace && (\n                <button\n                  className=\"place-button plus-button\" // Added class for styling\n                  onClick={() => handlePlaceCard(index + 1)}\n                  aria-label={`Place card after ${country.name}`}\n                >\n                  +\n                </button>\n              )}\n            </React.Fragment>\n          ))}\n          {/* If sortedCountries is empty and the player can place, show an initial place button */}\n          {sortedCountries.length === 0 && canPlace && (\n             <button\n                className=\"place-button plus-button\" // Added class for styling\n                onClick={() => handlePlaceCard(0)}\n                aria-label=\"Place first card\"\n             >\n               +\n             </button>\n          )}\n        </div>\n      </div>\n\n      {/* Display remaining countries (inventory) with selection highlight */}\n      <div className=\"remaining-countries\">\n        <h3>Remaining Countries to Sort: ({remainingCountries.length})</h3>\n        <div className=\"remaining-countries-grid\">\n          {remainingCountries.map((country) => {\n            // Determine if this card is the one selected for placement\n            const isSelectedForPlacing = gameStateData.mode === 'placing' && currentCountry && country.id === currentCountry.id;\n            return (\n              <CountryCard\n                key={`remaining-${country.id}`}\n                country={country}\n                // Only clickable in 'choosing' mode and if it's the player's turn\n                isClickable={gameStateData.mode === 'choosing' && isMyTurn}\n                onClick={() => gameStateData.mode === 'choosing' && isMyTurn && handleChooseCard(country)}\n                mode=\"population\"\n                // Use customClassName prop for the selection highlight\n                customClassName={isSelectedForPlacing ? 'selected-for-placing' : ''}\n              />\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Game instructions based on current state */}\n      <div className=\"game-instructions\">\n        {gameStateData.mode === 'choosing' && (\n          isMyTurn ? (\n            <p>Choose a country from the remaining countries to place next.</p>\n          ) : (\n            <p>Waiting for {currentPlayerName} to choose a country...</p>\n          )\n        )}\n        {gameStateData.mode === 'placing' && (\n          isMyTurn ? (\n            <p>Place {currentCountry?.name} in the correct position based on population.</p>\n          ) : (\n            <p>Waiting for {currentPlayerName} to place {currentCountry?.name}...</p>\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default GamePage;\n","// src/pages/ClassicGamePage.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchCountries } from '../api/countriesApi';\nimport CountryCard from '../components/CountryCard';\nimport './GamePage.css'; // Reuse some styles for now, can create ClassicGamePage.css later\n\nfunction ClassicGamePage() {\n  const [countriesToPick, setCountriesToPick] = useState([]);\n  const [sortedCountries, setSortedCountries] = useState([]);\n  const [currentCountry, setCurrentCountry] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameStatus, setGameStatus] = useState('loading'); // loading, picking, placing, ended\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loadGame = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const fetchedCountries = await fetchCountries();\n        const shuffled = fetchedCountries.sort(() => 0.5 - Math.random());\n\n        // Start the game with the first country already sorted\n        if (shuffled.length >= 2) {\n          const initialSortedCountry = shuffled[0];\n          const firstCountryToPlace = shuffled[1];\n          \n          setSortedCountries([initialSortedCountry]); // Start with the first country placed\n          setCurrentCountry(firstCountryToPlace); // Set the second country as the one to place\n          setCountriesToPick(shuffled.slice(2)); // Remaining countries start from the third one\n          setScore(1); // Start score at 1 since one country is already placed\n          setGameStatus('placing');\n        } else if (shuffled.length === 1) {\n           // Handle case with only one country - technically game over?\n           setSortedCountries([shuffled[0]]);\n           setCurrentCountry(null);\n           setCountriesToPick([]);\n           setScore(0);\n           setGameStatus('ended');\n           // Maybe navigate immediately?\n           navigate('/gameover', { \n             state: { score: 0, message: 'Only one country found, nothing to sort!', mode: 'classic_population' },\n             replace: true \n           });\n        } else {\n          setError(\"Not enough countries found to start the game.\");\n          setGameStatus('ended');\n        }\n      } catch (err) {\n        console.error(\"Failed to load countries:\", err);\n        setError(err.message || \"Failed to load game data.\");\n        setGameStatus('ended');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadGame();\n  }, [navigate]);\n\n  const pickNextCountry = () => {\n    if (countriesToPick.length > 0) {\n      const nextCountry = countriesToPick[0];\n      setCurrentCountry(nextCountry);\n      setCountriesToPick(countriesToPick.slice(1));\n      setGameStatus('placing');\n    } else {\n      // All countries sorted correctly!\n      setGameStatus('ended');\n      navigate('/gameover', { \n        state: { \n          score: score, \n          message: 'Congratulations! You sorted all countries!',\n          mode: 'classic_population'\n        },\n        replace: true \n      });\n    }\n  };\n\n  const handlePlaceCountry = (index) => {\n    if (!currentCountry || gameStatus !== 'placing') return;\n\n    const countryToPlace = currentCountry;\n    const newSortedCountries = [...sortedCountries];\n    newSortedCountries.splice(index, 0, countryToPlace);\n\n    // Check if the new placement is correct based on population (Lowest to Highest)\n    let isCorrect = true;\n    if (index > 0) { // Check predecessor\n      // Population: Lower is better (comes first)\n      isCorrect = isCorrect && newSortedCountries[index - 1].population <= countryToPlace.population;\n    }\n    if (index < newSortedCountries.length - 1) { // Check successor\n      isCorrect = isCorrect && countryToPlace.population <= newSortedCountries[index + 1].population;\n    }\n\n    if (isCorrect) {\n      setSortedCountries(newSortedCountries);\n      setScore(score + 1);\n      setCurrentCountry(null);\n      pickNextCountry();\n    } else {\n      // Capture state *before* navigating\n      const finalSortedList = [...sortedCountries]; // Copy the list before incorrect placement\n      const incorrectCountry = countryToPlace;\n      const attemptedIndex = index;\n\n      setGameStatus('ended');\n      navigate('/gameover', {\n        state: {\n          score: score, // Score before the failed attempt\n          message: `Incorrect placement. Game Over!`,\n          mode: 'classic_population',\n          // Add final state details\n          finalSortedList: finalSortedList,\n          incorrectCountry: incorrectCountry,\n          attemptedIndex: attemptedIndex\n        },\n        replace: true\n      });\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"game-page\">Loading Game...</div>;\n  }\n\n  if (error) {\n    return <div className=\"game-page\">Error: {error} <button onClick={() => window.location.reload()}>Retry</button></div>;\n  }\n\n  if (gameStatus === 'ended' && !isLoading) {\n     // Should have navigated away, but show a fallback just in case\n     return <div className=\"game-page\">Game Over! Final Score: {score}</div>;\n  }\n\n  return (\n    <div className=\"game-page\">\n      <h2>Classic Mode - Sort by Population (Lowest to Highest)</h2>\n      <p>Score: {score-1}</p>\n      \n\n      <div className=\"sorted-countries-container\">\n        \n        <div className=\"sorted-countries\">\n          {currentCountry && gameStatus === 'placing' && (\n            <div\n              className=\"insertion-point\"\n              onClick={() => handlePlaceCountry(0)}\n              title={`Place ${currentCountry.name} at the beginning`}\n            >\n              +\n            </div>\n          )}\n          {sortedCountries.map((country, index) => (\n            <React.Fragment key={`fragment-${country.id}`}>\n              <CountryCard\n                country={country}\n                isClickable={true}\n                mode=\"population\"\n              />\n              {currentCountry && gameStatus === 'placing' && (\n                <div\n                  className=\"insertion-point\"\n                  onClick={() => handlePlaceCountry(index + 1)}\n                  title={`Place ${currentCountry.name} after ${country.name}`}\n                >\n                  +\n                </div>\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n\n      {gameStatus === 'placing' && currentCountry && (\n        <div className=\"current-country\">\n          <h3>Place this Country:</h3>\n          <div\n            className=\"current-country-wrapper\"\n            title={`${currentCountry.name} - place it in the list above`}\n          >\n            <CountryCard\n              country={currentCountry}\n              isClickable={false}\n              mode=\"population\"\n            />\n          </div>\n        </div>\n      )}\n       {/* Optionally show next few countries to pick later */}\n       {/* <div className=\"remaining-countries\"> ... </div> */}\n\n    </div>\n  );\n}\n\nexport default ClassicGamePage; ","import { realtimeDb } from '../firebase';\r\nimport { ref, set, update, onValue, off, get } from 'firebase/database';\r\nimport { fetchCountries } from '../api/countriesApi'; \r\n\r\n// Use a separate path for Battle Royale game states\r\nconst GAME_STATES_PATH = 'battleRoyaleGameStates'; \r\n\r\n// Helper to get random elements without mutation\r\nconst getRandomElements = (arr, num) => {\r\n  if (num > arr.length) {\r\n    console.warn(\"Requested more elements than available\");\r\n    num = arr.length;\r\n  }\r\n  const shuffled = [...arr].sort(() => 0.5 - Math.random());\r\n  return shuffled.slice(0, num);\r\n};\r\n\r\nexport const battleRoyaleGameService = {\r\n  // Initialize a new game state for battle royale mode\r\n  async initializeGameState(lobbyId, players) {\r\n    // Validate player count (2-8)\r\n    if (players.length < 2 || players.length > 8) {\r\n      throw new Error('Battle Royale mode requires between 2 and 8 players.');\r\n    }\r\n      \r\n    // Fetch all countries within the service\r\n    let allCountries;\r\n    const requiredCountries = 26; // 1 initial + 25 inventory\r\n    try {\r\n      allCountries = await fetchCountries();\r\n      if (!allCountries || allCountries.length < requiredCountries) {\r\n        throw new Error(`Not enough valid countries fetched to start Battle Royale mode. Need ${requiredCountries}.`);\r\n      }\r\n    } catch (fetchError) {\r\n      console.error(\"Failed to fetch countries for initialization:\", fetchError);\r\n      throw new Error('Could not fetch country data to start the game.');\r\n    }\r\n\r\n    // Select 26 countries (1 initial + 25 inventory)\r\n    const selectedCountries = getRandomElements(allCountries, requiredCountries);\r\n    const initialCountry = selectedCountries[0];\r\n    const inventoryCountries = selectedCountries.slice(1);\r\n\r\n    // Initialize players with active status\r\n    const initialPlayers = players.map(p => ({ ...p, isActive: true, score: 0 })); // Add isActive flag and individual score\r\n\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`); \r\n    const initialState = {\r\n      lobbyId: lobbyId, \r\n      gameType: 'battleRoyale', // Identify the game type\r\n      currentPlayer: initialPlayers[0].id, // First active player starts\r\n      players: initialPlayers, \r\n      activePlayers: initialPlayers.map(p => p.id), // Keep track of active player IDs\r\n      mode: 'choosing', // Start in choosing mode\r\n      sortedCountries: [initialCountry], // Start with one country sorted\r\n      remainingCountries: inventoryCountries, // The 25 countries in inventory\r\n      currentCountry: null, // No country chosen to place yet\r\n      // score: 1, // Score is now per-player or overall rounds survived? Let's track rounds correctly placed for now.\r\n      status: 'playing',\r\n      createdAt: Date.now(),\r\n      lastUpdated: Date.now()\r\n    };\r\n\r\n    await set(gameStateRef, initialState);\r\n    console.log(\"Initialized Battle Royale game state for lobby\", lobbyId, `at path ${GAME_STATES_PATH}/${lobbyId}`);\r\n  },\r\n\r\n  // Subscribe to game state changes (Likely reusable)\r\n  subscribeToGameState(lobbyId, callback) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    const listener = onValue(gameStateRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      callback(data); \r\n    }, (error) => {\r\n      console.error(\"Error subscribing to game state:\", error);\r\n      callback(null); \r\n    });\r\n    return () => off(gameStateRef, 'value', listener);\r\n  },\r\n\r\n  // Update game state (Likely reusable)\r\n  async updateGameState(lobbyId, updates) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    await update(gameStateRef, {\r\n      ...updates,\r\n      lastUpdated: Date.now()\r\n    });\r\n  },\r\n\r\n  // Player chooses a card from the inventory (Likely reusable, maybe add active check)\r\n  async chooseCard(lobbyId, playerId, chosenCountry) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    const snapshot = await get(gameStateRef);\r\n    const gameState = snapshot.val();\r\n\r\n    if (!gameState || gameState.status !== 'playing') throw new Error('Game is not active or not found');\r\n    if (gameState.mode !== 'choosing') throw new Error('Not in choosing mode');\r\n    if (gameState.currentPlayer !== playerId) throw new Error('Not your turn to choose');\r\n    \r\n    // Ensure the player is active\r\n    const choosingPlayer = gameState.players.find(p => p.id === playerId);\r\n    if (!choosingPlayer || !choosingPlayer.isActive) {\r\n        throw new Error('You have been eliminated from the game.');\r\n    }\r\n    \r\n    if (!gameState.remainingCountries || !gameState.remainingCountries.some(c => c.id === chosenCountry.id)) {\r\n       console.error(\"Chosen country ID not found in remaining:\", chosenCountry?.id, gameState.remainingCountries);\r\n       throw new Error('Chosen country is not valid or not in the remaining inventory');\r\n    }\r\n\r\n    await update(gameStateRef, {\r\n      currentCountry: chosenCountry, \r\n      mode: 'placing', \r\n      lastUpdated: Date.now()\r\n    });\r\n  },\r\n  \r\n  // Helper to find the next active player\r\n  _findNextActivePlayer(players, currentPlayerId) {\r\n      const activePlayers = players.filter(p => p.isActive);\r\n      if (activePlayers.length === 0) return null; // Should not happen if checked before calling\r\n\r\n      const currentPlayerIndex = activePlayers.findIndex(p => p.id === currentPlayerId);\r\n      // If current player not found among active (e.g., just eliminated), or it's the last active player\r\n      if (currentPlayerIndex === -1 || currentPlayerIndex === activePlayers.length - 1) {\r\n          return activePlayers[0].id; // Wrap around to the first active player\r\n      } else {\r\n          return activePlayers[currentPlayerIndex + 1].id; // Next active player\r\n      }\r\n  },\r\n\r\n  // Player places the chosen card into the sorted list\r\n  async placeCard(lobbyId, playerId, placementIndex) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    const snapshot = await get(gameStateRef);\r\n    let gameState = snapshot.val(); // Use 'let' as we might modify it locally before updating DB\r\n\r\n    if (!gameState || gameState.status !== 'playing') throw new Error('Game is not active or not found');\r\n    if (gameState.mode !== 'placing') throw new Error('Not in placing mode');\r\n    if (gameState.currentPlayer !== playerId) throw new Error('Not your turn to place');\r\n    if (!gameState.currentCountry) throw new Error('No country currently chosen for placement');\r\n    \r\n    // Ensure the player is active\r\n    const placingPlayer = gameState.players.find(p => p.id === playerId);\r\n    if (!placingPlayer || !placingPlayer.isActive) {\r\n        throw new Error('You have been eliminated from the game.');\r\n    }\r\n\r\n    if (typeof placementIndex !== 'number' || placementIndex < 0 || placementIndex > gameState.sortedCountries.length) {\r\n      console.error(\"Invalid placement index received:\", placementIndex, \"Current sorted length:\", gameState.sortedCountries.length);\r\n      throw new Error('Invalid placement index');\r\n    }\r\n\r\n    const potentialNewSortedCountries = [...gameState.sortedCountries];\r\n    potentialNewSortedCountries.splice(placementIndex, 0, gameState.currentCountry);\r\n\r\n    const compareProperty = 'population'; // Assuming population for now\r\n    const isCorrect = (countriesList) => {\r\n      if (!Array.isArray(countriesList)) return false;\r\n      for (let i = 0; i < countriesList.length - 1; i++) {\r\n        if (!countriesList[i] || !countriesList[i+1] ||\r\n            typeof countriesList[i][compareProperty] === 'undefined' ||\r\n            typeof countriesList[i+1][compareProperty] === 'undefined' ||\r\n            countriesList[i][compareProperty] > countriesList[i + 1][compareProperty]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n    \r\n    let updates = {};\r\n    const players = gameState.players; // Get current player list\r\n    const placedCountryId = gameState.currentCountry.id;\r\n\r\n    if (isCorrect(potentialNewSortedCountries)) {\r\n      // Correct Placement\r\n      console.log(`Correct placement by ${playerId}.`);\r\n      \r\n      // Remove placed card from remaining\r\n      const updatedRemainingCountries = (gameState.remainingCountries || []).filter(country => country.id !== placedCountryId);\r\n\r\n      // Update score for the player who placed correctly\r\n      const playerIndex = players.findIndex(p => p.id === playerId);\r\n      if(playerIndex !== -1) {\r\n          players[playerIndex].score = (players[playerIndex].score || 0) + 1;\r\n      }\r\n\r\n      // Find the next active player\r\n      const nextPlayerId = this._findNextActivePlayer(players, playerId);\r\n      \r\n      updates = {\r\n        players: players, // Updated scores\r\n        currentPlayer: nextPlayerId,\r\n        sortedCountries: potentialNewSortedCountries,\r\n        remainingCountries: updatedRemainingCountries,\r\n        currentCountry: null,\r\n        mode: 'choosing',\r\n        lastUpdated: Date.now()\r\n      };\r\n\r\n      // Check if inventory is empty (Alternative win condition? Or just continue eliminating?)\r\n      // For Battle Royale, the game continues until one player is left, regardless of inventory.\r\n      // So, we don't end the game here based on empty inventory.\r\n\r\n    } else {\r\n      // Incorrect Placement - Eliminate Player\r\n      console.log(`Incorrect placement by ${playerId}. Eliminating player.`);\r\n      \r\n      const playerIndex = players.findIndex(p => p.id === playerId);\r\n      if (playerIndex !== -1) {\r\n          players[playerIndex].isActive = false;\r\n      }\r\n      \r\n      const activePlayers = players.filter(p => p.isActive);\r\n      const activePlayerIds = activePlayers.map(p => p.id);\r\n\r\n      if (activePlayers.length <= 1) {\r\n        // Game Over - Last player standing wins (or draw if 0 left somehow)\r\n        console.log(\"Battle Royale finished. Winner determined.\");\r\n        updates = {\r\n          players: players, // Show final status\r\n          activePlayers: activePlayerIds,\r\n          status: 'completed',\r\n          mode: 'finished',\r\n          result: activePlayers.length === 1 ? activePlayers[0].id : 'draw', // Store winner ID or 'draw'\r\n          winner: activePlayers.length === 1 ? activePlayers[0] : null, // Store full winner object\r\n          currentCountry: null, // Clear any chosen country\r\n          lastUpdated: Date.now()\r\n        };\r\n      } else {\r\n        // Game Continues - Find next active player\r\n        const nextPlayerId = this._findNextActivePlayer(players, playerId); // Find next player *after* elimination\r\n        \r\n        // Incorrectly placed card is discarded, player doesn't get another turn immediately.\r\n        // Remove the incorrectly placed card from the remaining inventory.\r\n        const updatedRemainingCountries = (gameState.remainingCountries || []).filter(country => country.id !== placedCountryId);\r\n\r\n        updates = {\r\n          players: players, // Updated player statuses\r\n          activePlayers: activePlayerIds,\r\n          currentPlayer: nextPlayerId,\r\n          currentCountry: null, // Clear the incorrectly placed country\r\n          remainingCountries: updatedRemainingCountries, // Remove the card\r\n          mode: 'choosing', // Next player starts by choosing\r\n          lastUpdated: Date.now()\r\n        };\r\n      }\r\n    }\r\n\r\n    await update(gameStateRef, updates);\r\n  },\r\n\r\n  // End game (Handles win condition based on elimination)\r\n  // This might not be explicitly called anymore, as placeCard handles the logic.\r\n  // Kept for potential manual ending or cleanup.\r\n  async endGame(lobbyId, winnerId = null) { \r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    const snapshot = await get(gameStateRef);\r\n    if (snapshot.exists()) {\r\n       const gameState = snapshot.val();\r\n       if (gameState.status === 'playing') {\r\n           const winner = gameState.players.find(p => p.id === winnerId);\r\n           await update(gameStateRef, {\r\n               status: 'completed',\r\n               result: winnerId || 'ended', // Store winner ID or generic 'ended'\r\n               winner: winner || null,\r\n               mode: 'finished',\r\n               currentCountry: null, \r\n               lastUpdated: Date.now()\r\n           });\r\n           console.log(`Battle Royale game ended. Winner: ${winnerId || 'N/A'}`);\r\n       } else {\r\n           console.log(\"Game already completed, skipping endGame call.\");\r\n       }\r\n    } else {\r\n       console.log(\"Game state not found, cannot end game for lobby:\", lobbyId);\r\n    }\r\n  },\r\n\r\n  // Clean up game state (Likely reusable)\r\n  async cleanupGameState(lobbyId) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    await set(gameStateRef, null);\r\n    console.log(\"Cleaned up Battle Royale game state for lobby:\", lobbyId);\r\n  }\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport CountryCard from '../components/CountryCard';\r\nimport './GamePage.css'; // Reuse styles for now, can create BattleRoyale.css\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { battleRoyaleGameService } from '../services/battleRoyaleGameService'; // Use Battle Royale service\r\n\r\nfunction BattleRoyaleGamePage() {\r\n  const { currentUser } = useAuth();\r\n  const [sortedCountries, setSortedCountries] = useState([]);\r\n  const [currentCountry, setCurrentCountry] = useState(null);\r\n  const [remainingCountries, setRemainingCountries] = useState([]);\r\n  // Removed overall score, players have individual scores in gameStateData\r\n  const [gameState, setGameState] = useState('waiting'); // waiting, playing, completed\r\n  const [gameStateData, setGameStateData] = useState(null); // Store full game state\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const { lobbyId, gameMode } = location.state || {}; // Get gameMode from state\r\n    \r\n    if (!lobbyId || gameMode !== 'battleRoyale') { // Verify lobbyId and correct mode\r\n      console.error(\"No lobbyId or incorrect gameMode found in location state.\", location.state);\r\n      navigate('/'); \r\n      return;\r\n    }\r\n\r\n    // Subscribe to the game state using the Battle Royale service\r\n    const unsubscribe = battleRoyaleGameService.subscribeToGameState(lobbyId, (data) => {\r\n      if (data) {\r\n        setGameStateData(data);\r\n        setSortedCountries(data.sortedCountries || []);\r\n        setCurrentCountry(data.currentCountry || null);\r\n        setRemainingCountries(data.remainingCountries || []);\r\n        setGameState(data.status || 'waiting');\r\n\r\n        // Handle game completion for Battle Royale\r\n        if (data.status === 'completed') {\r\n           let message = 'Battle Royale Over!';\r\n           let winnerName = 'N/A';\r\n           let winnerScore = 0;\r\n\r\n           if (data.winner) { // Check if there is a winner object\r\n               winnerName = data.winner.name;\r\n               winnerScore = data.winner.score || 0;\r\n               message = `${winnerName} is the last one standing!`;\r\n           } else if (data.result === 'draw') {\r\n               message = 'The Battle Royale ended in a draw!';\r\n           } // Add other completion scenarios if needed\r\n\r\n           navigate('/gameover', { \r\n              state: { \r\n                // Pass relevant data to GameOverPage\r\n                score: winnerScore, // Pass winner's score (or 0 if draw)\r\n                message: message,\r\n                winnerName: winnerName, \r\n                gameMode: 'battleRoyale', // Pass the game mode\r\n                finalPlayersState: data.players // Pass final player states (active/inactive)\r\n              }, \r\n              replace: true \r\n            });\r\n        }\r\n      } else {\r\n        console.error(\"Game state not found for lobby:\", lobbyId);\r\n        navigate('/'); \r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n\r\n  }, [location.state, navigate]); // Simplified dependencies\r\n\r\n  // Handler for choosing a card (uses battleRoyaleGameService)\r\n  const handleChooseCard = async (country) => {\r\n    if (!gameStateData || !currentUser) return;\r\n    if (gameStateData.currentPlayer !== currentUser.uid) return; \r\n    if (gameStateData.mode !== 'choosing') return; \r\n    \r\n    // Add check if player is active\r\n    const me = gameStateData.players.find(p => p.id === currentUser.uid);\r\n    if (!me || !me.isActive) {\r\n        console.log(\"Cannot choose card, you are eliminated.\");\r\n        return; // Prevent eliminated players from acting\r\n    }\r\n\r\n    try {\r\n      await battleRoyaleGameService.chooseCard(gameStateData.lobbyId, currentUser.uid, country);\r\n    } catch (error) {\r\n      console.error(\"Error choosing card:\", error);\r\n      // TODO: Show user-friendly error message\r\n    }\r\n  };\r\n\r\n  // Handler for placing a card (uses battleRoyaleGameService)\r\n  const handlePlaceCard = async (index) => {\r\n    if (!gameStateData || !currentUser || !currentCountry) return;\r\n    if (gameStateData.currentPlayer !== currentUser.uid) return; \r\n    if (gameStateData.mode !== 'placing') return; \r\n\r\n    // Add check if player is active\r\n    const me = gameStateData.players.find(p => p.id === currentUser.uid);\r\n    if (!me || !me.isActive) {\r\n        console.log(\"Cannot place card, you are eliminated.\");\r\n        return; // Prevent eliminated players from acting\r\n    }\r\n\r\n    try {\r\n      await battleRoyaleGameService.placeCard(gameStateData.lobbyId, currentUser.uid, index);\r\n    } catch (error) {\r\n      console.error(\"Error placing card:\", error);\r\n      // TODO: Show user-friendly error message\r\n    }\r\n  };\r\n\r\n  if (!gameStateData || gameState === 'waiting') {\r\n    return <div className=\"game-page\">Loading Battle Royale...</div>;\r\n  }\r\n\r\n  const myPlayerState = gameStateData.players.find(p => p.id === currentUser?.uid);\r\n  const isMyTurn = gameStateData.currentPlayer === currentUser?.uid && myPlayerState?.isActive;\r\n  const amIActive = myPlayerState?.isActive;\r\n  \r\n  const currentPlayer = gameStateData.players.find(p => p.id === gameStateData.currentPlayer);\r\n  const currentPlayerName = currentPlayer?.name || 'Unknown';\r\n  \r\n  // Determine if the current player can perform actions\r\n  const canChoose = gameStateData.mode === 'choosing' && isMyTurn;\r\n  const canPlace = gameStateData.mode === 'placing' && isMyTurn && currentCountry;\r\n\r\n  return (\r\n    <div className={`game-page battle-royale-page ${!amIActive ? 'eliminated' : ''}`}>\r\n      <h2>Battle Royale</h2>\r\n      {/* Display player status and scores */}\r\n      <div className=\"player-status-container\">\r\n        <h3>Players:</h3>\r\n        <ul>\r\n          {gameStateData.players.map(p => (\r\n            <li key={p.id} className={`${!p.isActive ? 'eliminated-player' : ''} ${p.id === gameStateData.currentPlayer ? 'current-turn' : ''}`}>\r\n              {p.name} {p.id === currentUser?.uid ? '(You)' : ''} - Score: {p.score || 0} {!p.isActive ? '(Eliminated)' : ''}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      \r\n      {!amIActive && <p className=\"eliminated-message\">You have been eliminated!</p>}\r\n      \r\n      <p>Current Turn: {currentPlayerName} {gameStateData.currentPlayer === currentUser?.uid ? '(Your Turn)' : ''}</p>\r\n\r\n      {/* Sorted Countries Area */}\r\n      <div className=\"sorted-countries-container\">\r\n        <h3>Sorted Countries: ({sortedCountries.length})</h3>\r\n        <div className=\"sorted-countries\">\r\n          {canPlace && (\r\n            <button\r\n              className=\"place-button plus-button\"\r\n              onClick={() => handlePlaceCard(0)}\r\n              aria-label=\"Place card at the beginning\"\r\n              disabled={!amIActive} // Disable if eliminated\r\n            >\r\n              +\r\n            </button>\r\n          )}\r\n          {sortedCountries.map((country, index) => (\r\n            <React.Fragment key={`sorted-fragment-${country.id}`}>\r\n              <CountryCard\r\n                country={country}\r\n                isClickable={false}\r\n                mode=\"population\"\r\n              />\r\n              {canPlace && (\r\n                <button\r\n                  className=\"place-button plus-button\"\r\n                  onClick={() => handlePlaceCard(index + 1)}\r\n                  aria-label={`Place card after ${country.name}`}\r\n                  disabled={!amIActive} // Disable if eliminated\r\n                >\r\n                  +\r\n                </button>\r\n              )}\r\n            </React.Fragment>\r\n          ))}\r\n          {sortedCountries.length === 0 && canPlace && (\r\n             <button\r\n                className=\"place-button plus-button\"\r\n                onClick={() => handlePlaceCard(0)}\r\n                aria-label=\"Place first card\"\r\n                disabled={!amIActive} // Disable if eliminated\r\n             >\r\n               +\r\n             </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Remaining Countries (Inventory) Area */}\r\n      <div className=\"remaining-countries\">\r\n        <h3>Remaining Countries: ({remainingCountries.length})</h3>\r\n        <div className=\"remaining-countries-grid\">\r\n          {remainingCountries.map((country) => {\r\n            const isSelectedForPlacing = gameStateData.mode === 'placing' && currentCountry && country.id === currentCountry.id;\r\n            return (\r\n              <CountryCard\r\n                key={`remaining-${country.id}`}\r\n                country={country}\r\n                isClickable={canChoose} // Clickable only if it's my turn to choose and I'm active\r\n                onClick={() => canChoose && handleChooseCard(country)}\r\n                mode=\"population\"\r\n                customClassName={`${isSelectedForPlacing ? 'selected-for-placing' : ''} ${!amIActive ? 'disabled-card' : ''}`}\r\n                // Optionally dim cards if player is eliminated: !amIActive ? 'eliminated-card' : ''\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Game Instructions */}\r\n      <div className=\"game-instructions\">\r\n        {amIActive && gameStateData.mode === 'choosing' && (\r\n          isMyTurn ? (\r\n            <p>Choose a country to place next.</p>\r\n          ) : (\r\n            <p>Waiting for {currentPlayerName} to choose...</p>\r\n          )\r\n        )}\r\n        {amIActive && gameStateData.mode === 'placing' && (\r\n          isMyTurn ? (\r\n            <p>Place {currentCountry?.name} in the correct position.</p>\r\n          ) : (\r\n            <p>Waiting for {currentPlayerName} to place {currentCountry?.name}...</p>\r\n          )\r\n        )}\r\n        {!amIActive && gameState !== 'completed' && (\r\n            <p>Waiting for the remaining players...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BattleRoyaleGamePage; ","// src/api/leaderboardApi.js\r\n\r\n// For now, we'll use localStorage to store leaderboard data\r\n// In a real application, this would be replaced with actual API calls to a backend\r\n\r\nconst LEADERBOARD_KEY = 'sortly_leaderboard';\r\n\r\nexport const submitScore = (playerName, score, mode) => {\r\n  const leaderboard = getLeaderboard();\r\n  const newEntry = {\r\n    id: Date.now(),\r\n    playerName,\r\n    score,\r\n    mode,\r\n    date: new Date().toISOString(),\r\n  };\r\n  \r\n  leaderboard.push(newEntry);\r\n  // Sort by score (descending) and keep only top 100 entries\r\n  leaderboard.sort((a, b) => b.score - a.score);\r\n  const top100 = leaderboard.slice(0, 100);\r\n  \r\n  localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(top100));\r\n  return newEntry;\r\n};\r\n\r\nexport const getLeaderboard = (mode = null) => {\r\n  const leaderboard = JSON.parse(localStorage.getItem(LEADERBOARD_KEY) || '[]');\r\n  if (mode) {\r\n    return leaderboard.filter(entry => entry.mode === mode);\r\n  }\r\n  return leaderboard;\r\n};\r\n\r\nexport const getTopScores = (mode = null, limit = 10) => {\r\n  const leaderboard = getLeaderboard(mode);\r\n  return leaderboard.slice(0, limit);\r\n}; ","import { db } from '../firebase';\nimport { collection, query, where, orderBy, limit as firestoreLimit, getDocs, addDoc, serverTimestamp } from 'firebase/firestore';\n\nconst GAME_HISTORY_COLLECTION = 'gameHistory';\nconst CATEGORIES = ['population', 'area'];\n\nexport const gameHistoryService = {\n  async getTopGames(userId, category, limitCount = 5) {\n    try {\n      const gamesRef = collection(db, GAME_HISTORY_COLLECTION);\n      const q = query(\n        gamesRef,\n        where('userId', '==', userId),\n        where('category', '==', category),\n        orderBy('score', 'desc'),\n        firestoreLimit(limitCount)\n      );\n\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      // If the index is not ready, fall back to fetching all games and sorting in memory\n      const q = query(\n        collection(db, GAME_HISTORY_COLLECTION),\n        where('userId', '==', userId),\n        where('category', '==', category)\n      );\n\n      const querySnapshot = await getDocs(q);\n      const games = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      return games.sort((a, b) => b.score - a.score).slice(0, limitCount);\n    }\n  },\n\n  async getAllTopGames(userId) {\n    try {\n      const topGames = {};\n      await Promise.all(\n        CATEGORIES.map(async category => {\n          topGames[category] = await this.getTopGames(userId, category);\n        })\n      );\n      return topGames;\n    } catch (error) {\n      console.error('Error fetching all top games:', error);\n      return {};\n    }\n  },\n\n  async saveGame(userId, category, score, countries) {\n    try {\n      const minimalCountries = countries.map(({ id, name, flagUrl }) => ({\n        id,\n        name,\n        flagUrl\n      }));\n\n      await addDoc(collection(db, GAME_HISTORY_COLLECTION), {\n        userId,\n        category,\n        score,\n        countries: minimalCountries,\n        timestamp: serverTimestamp()\n      });\n    } catch (error) {\n      console.error('Error saving game history:', error);\n      throw error;\n    }\n  }\n}; ","// src/pages/GameOverPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport CountryCard from '../components/CountryCard';\nimport { submitScore } from '../api/leaderboardApi';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport { userProfileService } from '../services/userProfileService';\nimport { useAuth } from '../contexts/AuthContext';\nimport './GameOverPage.css';\nimport '../components/Buttons.css';\n\nfunction GameOverPage() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  \n  // Destructure new potential state variables from Battle Royale mode\n  const { \n    score = 0, \n    message = 'Game Over!', \n    mode = 'unknown', // Get mode correctly\n    // Classic mode specific:\n    incorrectCountry, \n    userOrder, \n    correctOrder, \n    // Battle Royale specific:\n    winnerName, \n    finalPlayersState \n  } = location.state || {};\n\n  const [playerName, setPlayerName] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState('');\n  const hasSaved = useRef(false);\n\n  // Fetch user profile for potential nickname\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (currentUser) {\n        try {\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\n          if (profile?.nickname) {\n            setPlayerName(profile.nickname);\n          }\n        } catch (err) {\n          console.error('Error fetching user profile:', err);\n        }\n      }\n    };\n    fetchUserProfile();\n  }, [currentUser]);\n\n  // Save game history (adjust score/data based on mode)\n  useEffect(() => {\n    const saveGameHistory = async () => {\n      // Only save if logged in and not already saved\n      if (!currentUser || hasSaved.current) return;\n      \n      // Determine score and countries based on mode\n      let historyScore = 0;\n      let historyCountries = [];\n\n      if (mode === 'classic_population' || mode === 'cooperation') {\n         // Classic/Coop: Use userOrder if available, score passed directly (minus 1?)\n         historyScore = score - 1 >= 0 ? score - 1 : 0; // Ensure score isn't negative\n         historyCountries = userOrder || [];\n      } else if (mode === 'battleRoyale') {\n         // Battle Royale: Score is the winner's final score (correct placements)\n         historyScore = score; // Score is passed directly as winner's score\n         // Save sortedCountries at the end? Or just winner/score?\n         // Let's stick to score for now, as order isn't the main point here.\n         // Maybe save the final list of active/inactive players?\n         historyCountries = finalPlayersState ? finalPlayersState.map(p => ({ name: p.name, score: p.score, isActive: p.isActive })) : []; // Save player states\n      }\n\n      // Only save if there's a valid mode and some data to save\n      if (mode !== 'unknown' && (historyScore > 0 || historyCountries.length > 0)) {\n         // Check if we have actual country data or player data to save\n         const hasMeaningfulData = historyCountries.length > 0 && (historyCountries[0].flagUrl || historyCountries[0].name);\n\n         if (hasMeaningfulData || historyScore > 0) {\n            try {\n              console.log('Attempting to save game history:', { userId: currentUser.uid, mode, historyScore });\n              await gameHistoryService.saveGame(\n                currentUser.uid,\n                mode, // Pass the correct mode\n                historyScore, // Pass the determined score\n                // Map countries only if it's classic/coop and userOrder exists\n                (mode === 'classic_population' || mode === 'cooperation') && userOrder \n                  ? userOrder.map(country => ({ \n                      id: country.id, \n                      name: country.name, \n                      flagUrl: country.flagUrl \n                    }))\n                  : null // Pass null or adjust payload for battle royale history\n              );\n              hasSaved.current = true;\n              console.log('Game history saved successfully');\n            } catch (err) {\n              console.error('Error saving game history:', err);\n            }\n         } else {\n            console.log('Skipping game history save: No meaningful data.');\n         }\n      }\n    };\n\n    saveGameHistory();\n  // Dependencies: mode, score, userOrder, finalPlayersState, currentUser\n  }, [currentUser, mode, score, userOrder, finalPlayersState]); \n\n  // Handle score submission (use correct score based on mode)\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!playerName.trim()) {\n      setError('Please enter your name');\n      return;\n    }\n    \n    // Determine score to submit based on mode\n    let submitScoreValue = 0;\n    if (mode === 'classic_population' || mode === 'cooperation') {\n      submitScoreValue = score - 1 >= 0 ? score - 1 : 0; \n    } else if (mode === 'battleRoyale') {\n      submitScoreValue = score; // Use the passed winner's score\n    }\n    \n    if (submitScoreValue <= 0) {\n        setError('Only scores greater than 0 can be submitted.');\n        return;\n    }\n\n    try {\n      submitScore(playerName, submitScoreValue, mode); // Pass correct mode\n      setIsSubmitted(true);\n      setError(''); // Clear error on success\n    } catch (err) {\n      setError('Failed to submit score. Please try again.');\n    }\n  };\n\n  // Function to determine the correct path for \"Play Again\"\n  const getPlayAgainPath = () => {\n    switch (mode) {\n      case 'classic_population':\n        return '/game/population';\n      case 'cooperation':\n        return '/game/population/cooperation'; // Go back to lobby\n      case 'battleRoyale': // Added case for Battle Royale\n        return '/game/population/battleroyale'; // Go back to lobby\n      case 'classic_area': \n         return '/game/area'; \n      default:\n        return '/'; \n    }\n  };\n\n  // Determine score display text based on mode\n  const getScoreDisplay = () => {\n    if (mode === 'classic_population' || mode === 'cooperation') {\n      return `Your final score: ${score - 1 >= 0 ? score - 1 : 0}`;\n    } else if (mode === 'battleRoyale') {\n      return winnerName ? `${winnerName}'s winning score: ${score}` : `Final Score: ${score}`;\n    } else {\n      return `Final Score: ${score}`;\n    }\n  };\n\n  return (\n    <div className={`game-over-page game-over-${mode}`}> {/* Add mode class */}\n      <h2>Game Over</h2>\n      <p>{message}</p>\n      <p>{getScoreDisplay()}</p>\n\n      {/* Display final player standings for Battle Royale */}\n      {mode === 'battleRoyale' && finalPlayersState && (\n        <div className=\"final-player-standings\">\n          <h3>Final Standings:</h3>\n          <ul>\n            {finalPlayersState.sort((a, b) => (b.score || 0) - (a.score || 0)).map(player => (\n              <li key={player.id} className={!player.isActive ? 'eliminated-player' : ''}>\n                {player.name}: {player.score || 0} points {!player.isActive ? '(Eliminated)' : ''}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Score Submission Form (conditional?) */}\n      {/* Maybe only show for classic/coop or if score > 0? */}\n      {!isSubmitted && (mode === 'classic_population' || mode === 'cooperation' || (mode === 'battleRoyale' && score > 0)) && (\n        <form onSubmit={handleSubmit} className=\"score-submission\">\n          <div className=\"input-group\">\n            <label htmlFor=\"playerName\">Enter your name for Leaderboard:</label>\n            <input\n              type=\"text\"\n              id=\"playerName\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              placeholder=\"Your name\"\n              maxLength={20}\n              disabled={!currentUser} // Disable if not logged in?\n            />\n          </div>\n          {!currentUser && <p className=\"info-text\">Log in to submit your score!</p>}\n          {error && <p className=\"error\">{error}</p>}\n          <button type=\"submit\" className=\"button button-primary\" disabled={!currentUser || !playerName.trim()}>\n            Submit Score\n          </button>\n        </form>\n      )}\n      {isSubmitted && (\n        <div className=\"submission-success\">\n          <p>Score submitted successfully!</p>\n        </div>\n      )}\n\n      {/* Display for Classic Mode incorrect placement */}\n      {(mode === 'classic_population' || mode === 'classic_area') && userOrder && incorrectCountry && (\n        <div className=\"user-order\">\n          <h3>Your order was:</h3>\n          <div className=\"country-list\">\n            {userOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={false} // Should not be clickable here\n                highlight={country.id === incorrectCountry.id ? 'incorrect' : ''}\n                mode={mode === 'classic_population' ? 'population' : 'area'} // Use correct compare mode\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      {(mode === 'classic_population' || mode === 'classic_area') && correctOrder && incorrectCountry && (\n        <div className=\"correct-order\">\n          <h3>The correct order was:</h3>\n          <div className=\"country-list\">\n            {correctOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={false}\n                highlight={country.id === incorrectCountry.id ? 'correct' : ''}\n                mode={mode === 'classic_population' ? 'population' : 'area'}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"game-over-buttons\">\n        <button className=\"button button-primary\" onClick={() => navigate(getPlayAgainPath())}>\n          Play Again {mode === 'battleRoyale' || mode === 'cooperation' ? '(New Lobby)' : ''}\n        </button>\n        <button className=\"button button-secondary\" onClick={() => navigate('/')}>\n          Go to Home Page\n        </button>\n        <button className=\"button button-secondary\" onClick={() => navigate('/leaderboard')}>\n          View Leaderboard\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameOverPage;\n","export const formatDate = (timestamp) => {\r\n  if (!timestamp?.toDate) return null;\r\n  return timestamp.toDate().toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  });\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { getLeaderboard } from '../api/leaderboardApi';\r\nimport { formatDate } from '../utils/dateUtils';\r\nimport './LeaderboardPage.css';\r\n\r\nfunction LeaderboardPage() {\r\n  const [classicLeaderboard, setClassicLeaderboard] = useState([]);\r\n  const [cooperationLeaderboard, setCooperationLeaderboard] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const loadLeaderboards = () => {\r\n      const classicData = getLeaderboard('classic_population');\r\n      const cooperationData = getLeaderboard('cooperation_population');\r\n      setClassicLeaderboard(classicData);\r\n      setCooperationLeaderboard(cooperationData);\r\n    };\r\n    loadLeaderboards();\r\n  }, []); // Fetch only once on component mount\r\n\r\n  const renderLeaderboardTable = (title, data) => (\r\n    <div className=\"leaderboard-section\">\r\n      <h3>{title}</h3>\r\n      {data.length > 0 ? (\r\n        <div className=\"leaderboard-table\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Rank</th>\r\n                <th>Player</th>\r\n                <th>Score</th>\r\n                <th>Date</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.map((entry, index) => (\r\n                <tr key={entry.id}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{entry.playerName}</td>\r\n                  <td>{entry.score}</td>\r\n                  <td>{formatDate(entry.date)}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ) : (\r\n        <p>No entries yet for this mode.</p>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"leaderboard-page\">\r\n      <h2>Leaderboard</h2>\r\n      \r\n      {renderLeaderboardTable('Classic Population', classicLeaderboard)}\r\n      {renderLeaderboardTable('Cooperation Population', cooperationLeaderboard)}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeaderboardPage; ","import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\n\nconst ACHIEVEMENTS_COLLECTION = 'achievements';\n\nconst ACHIEVEMENT_DEFINITIONS = {\n  population: {\n    sorting: {\n      bronze: { id: 'population_sorting_bronze', title: 'Population Bronze Sorter', description: 'Correctly sort 3 countries by population', icon: '🥉', requirement: 3 },\n      silver: { id: 'population_sorting_silver', title: 'Population Silver Sorter', description: 'Correctly sort 7 countries by population', icon: '🥈', requirement: 7 },\n      gold: { id: 'population_sorting_gold', title: 'Population Gold Sorter', description: 'Correctly sort 12 countries by population', icon: '🥇', requirement: 12 },\n      platinum: { id: 'population_sorting_platinum', title: 'Population Platinum Sorter', description: 'Correctly sort 20 countries by population', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'population_games',\n      title: 'Population Game Master',\n      description: 'Complete 50 population sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  },\n  area: {\n    sorting: {\n      bronze: { id: 'area_sorting_bronze', title: 'Area Bronze Sorter', description: 'Correctly sort 3 countries by area', icon: '🥉', requirement: 3 },\n      silver: { id: 'area_sorting_silver', title: 'Area Silver Sorter', description: 'Correctly sort 7 countries by area', icon: '🥈', requirement: 7 },\n      gold: { id: 'area_sorting_gold', title: 'Area Gold Sorter', description: 'Correctly sort 12 countries by area', icon: '🥇', requirement: 12 },\n      platinum: { id: 'area_sorting_platinum', title: 'Area Platinum Sorter', description: 'Correctly sort 20 countries by area', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'area_games',\n      title: 'Area Game Master',\n      description: 'Complete 50 area sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  }\n};\n\nexport const achievementsService = {\n  // Get user achievements\n  async getUserAchievements(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId));\n      return userDoc.exists() ? userDoc.data() : null;\n    } catch (error) {\n      console.error('Error getting user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Update user achievements\n  async updateUserAchievements(userId, achievements) {\n    try {\n      await setDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId), {\n        ...achievements,\n        updatedAt: serverTimestamp()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Check and update achievements based on game results\n  async checkAndUpdateAchievements(userId, category, correctCount) {\n    try {\n      const currentAchievements = await this.getUserAchievements(userId) || {};\n      const categoryAchievements = ACHIEVEMENT_DEFINITIONS[category];\n      let updated = false;\n\n      // Check sorting achievements\n      Object.values(categoryAchievements.sorting).forEach(achievement => {\n        if (!currentAchievements[achievement.id] && correctCount >= achievement.requirement) {\n          currentAchievements[achievement.id] = {\n            unlocked: true,\n            unlockedAt: serverTimestamp()\n          };\n          updated = true;\n        }\n      });\n\n      // Check game count achievements\n      const gameCountAchievement = categoryAchievements.gameCount;\n      const currentCount = (currentAchievements[gameCountAchievement.id]?.count || 0) + 1;\n      \n      if (currentCount >= gameCountAchievement.requirement && !currentAchievements[gameCountAchievement.id]?.unlocked) {\n        currentAchievements[gameCountAchievement.id] = {\n          unlocked: true,\n          unlockedAt: serverTimestamp(),\n          count: currentCount\n        };\n        updated = true;\n      } else {\n        currentAchievements[gameCountAchievement.id] = {\n          ...currentAchievements[gameCountAchievement.id],\n          count: currentCount\n        };\n        updated = true;\n      }\n\n      if (updated) {\n        await this.updateUserAchievements(userId, currentAchievements);\n      }\n\n      return currentAchievements;\n    } catch (error) {\n      console.error('Error checking achievements:', error);\n      throw error;\n    }\n  },\n\n  // Achievement definitions\n  getAchievementDefinitions() {\n    return ACHIEVEMENT_DEFINITIONS;\n  }\n}; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AvatarSelector.css';\r\n\r\nconst AvatarSelector = ({ avatarOptions, selectedAvatar, onSelect, onClose }) => (\r\n  <div className=\"avatar-selector\">\r\n    <div className=\"avatar-grid\">\r\n      {avatarOptions.map(avatar => (\r\n        <div \r\n          key={avatar.id} \r\n          className={`avatar-option ${selectedAvatar === avatar.url ? 'selected' : ''}`}\r\n          onClick={() => onSelect(avatar.url)}\r\n        >\r\n          <img src={avatar.url} alt={avatar.name} />\r\n          <span>{avatar.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAvatarSelector.propTypes = {\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  selectedAvatar: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AvatarSelector; ","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarSelector from './AvatarSelector';\r\nimport './ProfileHeader.css';\r\n\r\nconst ProfileHeader = ({ \r\n  profile, \r\n  currentUser, \r\n  avatarOptions,\r\n  onSubmit\r\n}) => {\r\n  const [formData, setFormData] = useState({\r\n    nickname: profile?.nickname || '',\r\n    country: profile?.country || '',\r\n    avatarUrl: profile?.avatarUrl || avatarOptions[0].url\r\n  });\r\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleAvatarSelect = (avatarUrl) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      avatarUrl\r\n    }));\r\n    setShowAvatarSelector(false);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await onSubmit(formData);\r\n      setIsEditing(false);\r\n    } catch (error) {\r\n      console.error('Error saving profile:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-header\">\r\n      <div className=\"avatar-container\">\r\n        <img \r\n          src={formData.avatarUrl} \r\n          alt=\"Profile\" \r\n          className=\"profile-avatar\"\r\n          onClick={() => setShowAvatarSelector(true)}\r\n        />\r\n        {showAvatarSelector && (\r\n          <AvatarSelector\r\n            avatarOptions={avatarOptions}\r\n            selectedAvatar={formData.avatarUrl}\r\n            onSelect={handleAvatarSelect}\r\n            onClose={() => setShowAvatarSelector(false)}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"profile-info\">\r\n        <form onSubmit={handleSubmit} className=\"profile-form\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"nickname\"\r\n              value={formData.nickname}\r\n              onChange={handleChange}\r\n              placeholder=\"Set your nickname\"\r\n              className=\"inline-input\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"country\"\r\n              value={formData.country}\r\n              onChange={handleChange}\r\n              placeholder=\"Set your country\"\r\n              className=\"inline-input\"\r\n            />\r\n          </div>\r\n          <div className=\"email-display\">{currentUser.email}</div>\r\n          {isEditing && (\r\n            <button type=\"submit\" className=\"save-button\">\r\n              Save Changes\r\n            </button>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileHeader.propTypes = {\r\n  profile: PropTypes.shape({\r\n    nickname: PropTypes.string,\r\n    country: PropTypes.string,\r\n    avatarUrl: PropTypes.string\r\n  }),\r\n  currentUser: PropTypes.shape({\r\n    email: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ProfileHeader; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './AchievementCard.css';\r\n\r\nconst AchievementCard = ({ achievement, isUnlocked, unlockDate }) => (\r\n  <div className={`achievement-card ${isUnlocked ? 'unlocked' : 'locked'}`}>\r\n    <div className=\"achievement-content\">\r\n      <div className=\"achievement-icon\">{achievement.icon}</div>\r\n      <div className=\"achievement-info\">\r\n        <h3>{achievement.title}</h3>\r\n        <p>{achievement.description}</p>\r\n        {isUnlocked && unlockDate && (\r\n          <div className=\"achievement-date\">\r\n            Unlocked: {formatDate(unlockDate)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className=\"achievement-status\">\r\n      {isUnlocked ? '✓' : '🔒'}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAchievementCard.propTypes = {\r\n  achievement: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  isUnlocked: PropTypes.bool.isRequired,\r\n  unlockDate: PropTypes.object\r\n};\r\n\r\nexport default AchievementCard; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AchievementCard from './AchievementCard';\r\nimport { transformAchievementDefinitions } from '../../utils/achievementUtils';\r\nimport './AchievementsSection.css';\r\n\r\nconst AchievementsSection = ({ achievementDefinitions, achievements }) => {\r\n  const transformedAchievements = transformAchievementDefinitions(achievementDefinitions);\r\n\r\n  return (\r\n    <div className=\"achievements-section\">\r\n      <h2>Achievements</h2>\r\n      <div className=\"achievements-grid\">\r\n        {transformedAchievements.map(achievement => (\r\n          <AchievementCard\r\n            key={achievement.id}\r\n            achievement={achievement}\r\n            isUnlocked={achievements?.[achievement.id]?.unlocked ?? false}\r\n            unlockDate={achievements?.[achievement.id]?.unlockedAt}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievementsSection.propTypes = {\r\n  achievementDefinitions: PropTypes.object.isRequired,\r\n  achievements: PropTypes.objectOf(PropTypes.shape({\r\n    unlocked: PropTypes.bool,\r\n    unlockedAt: PropTypes.object\r\n  }))\r\n};\r\n\r\nexport default AchievementsSection; ","export const transformAchievementDefinitions = (definitions) => {\r\n  const achievements = [];\r\n  \r\n  // Process each category (population, area)\r\n  Object.entries(definitions).forEach(([category, categoryData]) => {\r\n    // Process sorting achievements\r\n    Object.entries(categoryData.sorting).forEach(([level, achievement]) => {\r\n      achievements.push({\r\n        ...achievement,\r\n        category,\r\n        type: 'sorting'\r\n      });\r\n    });\r\n    \r\n    // Process game count achievement\r\n    if (categoryData.gameCount) {\r\n      achievements.push({\r\n        ...categoryData.gameCount,\r\n        category,\r\n        type: 'gameCount'\r\n      });\r\n    }\r\n  });\r\n  \r\n  return achievements;\r\n}; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './GameHistoryItem.css';\r\n\r\nconst GameHistoryItem = ({ game, index }) => (\r\n  <div className=\"game-history-item\">\r\n    <div className=\"game-rank\">#{index + 1}</div>\r\n    <div className=\"game-score\">Score: {game.score}</div>\r\n    <div className=\"game-mode\">{game.category.charAt(0).toUpperCase() + game.category.slice(1)} Mode</div>\r\n    <div className=\"game-date\">\r\n      {game.timestamp?.toDate ? formatDate(game.timestamp) : 'Date unavailable'}\r\n    </div>\r\n    <div className=\"game-countries\">\r\n      {game.countries?.map((country, idx) => (\r\n        <div key={idx} className=\"country-item\">\r\n          <img src={country.flagUrl} alt={country.name} className=\"country-flag\" />\r\n          <span>{country.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nGameHistoryItem.propTypes = {\r\n  game: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    category: PropTypes.string.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  }).isRequired,\r\n  index: PropTypes.number.isRequired\r\n};\r\n\r\nexport default GameHistoryItem; ","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GameHistoryItem from './GameHistoryItem';\r\nimport './GameHistory.css';\r\n\r\nconst GameHistory = ({ gameHistory }) => {\r\n  const topGames = useMemo(() => {\r\n    if (!gameHistory || Object.keys(gameHistory).length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const entries = Object.entries(gameHistory);\r\n    const flattenedGames = entries.flatMap(([category, games]) => \r\n      games.map(game => ({ ...game, category }))\r\n    );\r\n\r\n    const uniqueGames = flattenedGames.filter((game, index, self) => \r\n      index === self.findIndex((g) => g.id === game.id)\r\n    );\r\n\r\n    return uniqueGames\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 5);\r\n  }, [gameHistory]);\r\n\r\n  if (!gameHistory) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>Loading game history...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(gameHistory).length === 0) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>No games played yet. Start playing to see your best games here!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-history-section\">\r\n      <h2>Best 5 Games</h2>\r\n      <div className=\"game-history-list\">\r\n        {topGames.map((game, index) => (\r\n          <GameHistoryItem key={game.id} game={game} index={index} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameHistory.propTypes = {\r\n  gameHistory: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  })))\r\n};\r\n\r\nexport default GameHistory; ","import React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { userProfileService } from '../services/userProfileService';\nimport { achievementsService } from '../services/achievementsService';\nimport { avatarService } from '../services/avatarService';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport ProfileHeader from '../components/profile/ProfileHeader';\nimport AchievementsSection from '../components/profile/AchievementsSection';\nimport GameHistory from '../components/profile/GameHistory';\nimport './ProfilePage.css';\n\nconst ProfilePage = () => {\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  const [profile, setProfile] = useState(null);\n  const [achievements, setAchievements] = useState(null);\n  const [gameHistory, setGameHistory] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\n  const [formData, setFormData] = useState({\n    nickname: '',\n    country: '',\n    avatarUrl: ''\n  });\n\n  const avatarOptions = avatarService.getAvatarOptions();\n  const achievementDefinitions = achievementsService.getAchievementDefinitions();\n  const userId = currentUser?.uid;\n\n  const loadProfile = useCallback(async () => {\n    if (!userId) return;\n    \n    try {\n      const [userProfile, userAchievements, userGameHistory] = await Promise.all([\n        userProfileService.getUserProfile(userId),\n        achievementsService.getUserAchievements(userId),\n        gameHistoryService.getAllTopGames(userId)\n      ]);\n\n      if (userProfile) {\n        setProfile(userProfile);\n        setFormData({\n          nickname: userProfile.nickname || '',\n          country: userProfile.country || '',\n          avatarUrl: userProfile.avatarUrl || avatarOptions[0].url\n        });\n      }\n\n      setAchievements(userAchievements);\n      setGameHistory(userGameHistory);\n    } catch (error) {\n      setError('Failed to load profile: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId, avatarOptions]);\n\n  useEffect(() => {\n    if (currentUser) {\n      loadProfile();\n    }\n  }, [currentUser, loadProfile]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleAvatarSelect = (avatarUrl) => {\n    setFormData(prev => ({ ...prev, avatarUrl }));\n    setShowAvatarSelector(false);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setError('');\n      await userProfileService.updateUserProfile(currentUser.uid, formData);\n      setProfile(prev => ({ ...prev, ...formData }));\n      setEditing(false);\n    } catch (error) {\n      setError('Failed to update profile: ' + error.message);\n    }\n  };\n\n  if (!currentUser) {\n    navigate('/');\n    return null;\n  }\n\n  if (loading) {\n    return <div className=\"profile-page\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"profile-page\">\n      <div className=\"profile-content\">\n        <ProfileHeader\n          profile={profile}\n          currentUser={currentUser}\n          editing={editing}\n          formData={formData}\n          avatarOptions={avatarOptions}\n          showAvatarSelector={showAvatarSelector}\n          onEdit={() => setEditing(true)}\n          onAvatarSelect={handleAvatarSelect}\n          onAvatarSelectorToggle={() => setShowAvatarSelector(!showAvatarSelector)}\n          onSubmit={handleSubmit}\n          onChange={handleInputChange}\n          onCancel={() => setEditing(false)}\n        />\n\n        {error && <div className=\"error-message\">{error}</div>}\n\n        <AchievementsSection\n          achievementDefinitions={achievementDefinitions}\n          achievements={achievements}\n        />\n\n        <GameHistory gameHistory={gameHistory} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage; ","import { realtimeDb } from '../firebase';\nimport { ref, set, update, remove, get, onValue, off } from 'firebase/database';\n\nconst LOBBIES_PATH = 'lobbies';\n\nclass LobbyService {\n  constructor() {\n    this.lobbiesRef = ref(realtimeDb, LOBBIES_PATH);\n  }\n\n  // Create a new lobby\n  async createLobby(lobbyId, player, gameMode = 'cooperation') {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await set(lobbyRef, {\n      players: [player],\n      status: 'waiting',\n      gameMode: gameMode,\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n    return lobbyId;\n  }\n\n  // Join an existing lobby\n  async joinLobby(lobbyId, player) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const snapshot = await get(lobbyRef);\n    const lobbyData = snapshot.val();\n    \n    if (lobbyData) {\n      const currentPlayers = lobbyData.players || [];\n      if (currentPlayers.some(p => p.id === player.id)) {\n        console.warn(`Player ${player.id} already in lobby ${lobbyId}.`);\n        return;\n      }\n      await update(lobbyRef, {\n        players: [...currentPlayers, player],\n        lastUpdated: Date.now()\n      });\n    } else {\n      throw new Error('Lobby not found');\n    }\n  }\n\n  // Leave a lobby\n  async leaveLobby(lobbyId, playerId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const snapshot = await get(lobbyRef);\n    const lobbyData = snapshot.val();\n    \n    if (lobbyData) {\n      const currentPlayers = lobbyData.players || [];\n      const updatedPlayers = currentPlayers.filter(p => p.id !== playerId);\n      \n      if (updatedPlayers.length === 0) {\n        console.log(`Last player left lobby ${lobbyId}. Deleting lobby.`);\n        await remove(lobbyRef);\n      } else {\n        let updates = {\n            players: updatedPlayers,\n            lastUpdated: Date.now()\n        };\n        \n        await update(lobbyRef, updates);\n      }\n    } else {\n      console.warn(`Attempted to leave non-existent or already deleted lobby: ${lobbyId}`);\n    }\n  }\n\n  // Subscribe to lobby changes\n  subscribeToLobby(lobbyId, callback) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const listener = onValue(lobbyRef, (snapshot) => {\n      const data = snapshot.val();\n      callback(data);\n    }, (error) => {\n        console.error(`Error subscribing to lobby ${lobbyId}:`, error);\n        callback(null);\n    });\n\n    return () => off(lobbyRef, 'value', listener);\n  }\n\n  // Start the game\n  async startGame(lobbyId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await update(lobbyRef, {\n      status: 'playing',\n      startedAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n  }\n\n  // End the game\n  async endGame(lobbyId, result = {}) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await update(lobbyRef, {\n      status: 'completed',\n      result: result,\n      endedAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n  }\n\n  // Clean up lobby\n  async cleanupLobby(lobbyId) {\n    console.log(`Cleaning up lobby: ${lobbyId}`);\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await remove(lobbyRef);\n  }\n}\n\nexport const lobbyService = new LobbyService(); ","import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useSearchParams, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { userProfileService } from '../services/userProfileService';\nimport { lobbyService } from '../services/lobbyService';\nimport { cooperationGameService } from '../services/cooperationGameService';\nimport { battleRoyaleGameService } from '../services/battleRoyaleGameService';\nimport './GameLobby.css';\n\n// Define game settings based on mode (moved outside component)\nconst gameSettings = {\n  cooperation: {\n    minPlayers: 2,\n    maxPlayers: 4, // Assuming max 4 for cooperation\n    service: cooperationGameService,\n    name: 'Cooperation Mode'\n  },\n  battleRoyale: {\n    minPlayers: 2,\n    maxPlayers: 8,\n    service: battleRoyaleGameService,\n    name: 'Battle Royale Mode'\n  }\n};\n\n// Function to extract game mode from URL path (can also be outside)\nconst getGameModeFromPath = (pathname) => {\n  const lowerPath = pathname.toLowerCase(); // Convert path to lowercase\n  if (lowerPath.includes('/cooperation')) return 'cooperation';\n  if (lowerPath.includes('/battleroyale')) return 'battleRoyale'; // Check lowercase path\n  return null; // Or a default mode\n};\n\nfunction GameLobby() {\n  const { currentUser } = useAuth();\n  const [lobbyId, setLobbyId] = useState('');\n  const [players, setPlayers] = useState([]);\n  const [isHost, setIsHost] = useState(false);\n  const [error, setError] = useState('');\n  const [copyStatus, setCopyStatus] = useState('');\n  const [gameMode, setGameMode] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n  const currentLobbyId = useRef('');\n  const currentPlayer = useRef(null);\n\n  // Effect 1: Determine and set the game mode based on the URL path\n  useEffect(() => {\n    const mode = getGameModeFromPath(location.pathname);\n    if (!mode) {\n      console.error('Invalid game mode in URL path:', location.pathname);\n      setError('Invalid game mode specified in URL.');\n      // Optional: navigate away after a delay\n    } else {\n      setGameMode(mode);\n      setError(''); // Clear previous errors if mode is valid\n    }\n  }, [location.pathname]); // Only depends on the path\n\n  // Effect 2: Initialize lobby, join/create, and subscribe *after* gameMode is set\n  useEffect(() => {\n    // Wait for gameMode to be determined and user to be logged in\n    if (!gameMode || !currentUser) {\n      return; \n    }\n\n    let unsubscribeFn = null;\n    let isMounted = true; // Flag to prevent state updates on unmounted component\n\n    const initializeLobby = async () => {\n      try {\n        let playerName = '';\n        try {\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\n          playerName = profile?.nickname || '';\n        } catch (fetchProfileError) {\n          console.error('Error fetching user profile:', fetchProfileError);\n        }\n\n        const lobbyParam = searchParams.get('lobby');\n        let targetLobbyId = '';\n        let playerInfo = {\n          id: currentUser.uid,\n          name: playerName || (lobbyParam ? `Player ${Math.floor(Math.random() * 100)}` : 'Player 1'),\n          email: currentUser.email\n        };\n        currentPlayer.current = playerInfo;\n\n        if (lobbyParam) { // Join Lobby\n          targetLobbyId = lobbyParam;\n          currentLobbyId.current = targetLobbyId;\n          if (isMounted) {\n             setLobbyId(targetLobbyId);\n             setIsHost(false); // Assume joining means not host initially\n          }\n          try {\n            await lobbyService.joinLobby(targetLobbyId, playerInfo);\n          } catch (joinError) {\n            console.error('Error joining lobby:', joinError);\n            if (isMounted) setError(joinError.message || 'Failed to join lobby');\n            // Optional: navigate away\n            return; // Stop if join fails\n          }\n        } else { // Create Lobby\n          targetLobbyId = Math.random().toString(36).substring(2, 8).toUpperCase();\n          currentLobbyId.current = targetLobbyId;\n          if (isMounted) {\n              setLobbyId(targetLobbyId);\n              setIsHost(true);\n          }\n          try {\n            // Use the gameMode state which should be set by the first effect\n            await lobbyService.createLobby(targetLobbyId, playerInfo, gameMode); \n          } catch (createError) {\n            console.error('Error creating lobby:', createError);\n            if (isMounted) setError(createError.message || 'Failed to create lobby');\n             // Optional: navigate away\n            return; // Stop if create fails\n          }\n        }\n\n        // Subscribe to lobby changes\n        unsubscribeFn = lobbyService.subscribeToLobby(targetLobbyId, (lobbyData) => {\n          if (!isMounted) return; // Don't update state if unmounted\n          \n          if (lobbyData) {\n            // Update players and host status from DB data\n            setPlayers(lobbyData.players || []);\n            setIsHost(lobbyData.players && lobbyData.players[0]?.id === currentUser.uid);\n\n            // Optional: Log DB mode for debugging if needed, but don't update component state based on it here\n            // const dbMode = lobbyData.gameMode;\n            // if (dbMode && dbMode !== gameMode) {\n            //      console.log(`Debug: DB mode (${dbMode}) differs from component mode (${gameMode})`);\n            // }\n            \n            // Navigation logic: Use the component's current gameMode state\n            if (lobbyData.status === 'playing') {\n              if (gameMode) { // Use the state variable gameMode set by the first effect\n                  const navigatePath = `/game/population/${gameMode}/play`;\n                  try {\n                    console.log(`Navigating to ${navigatePath} with mode ${gameMode}`);\n                    navigate(navigatePath, { \n                      state: { lobbyId: targetLobbyId, players: lobbyData.players, gameMode: gameMode } // Pass current gameMode state\n                    });\n                  } catch (navError) {\n                      console.error(\"Navigation error:\", navError);\n                  }\n              } else {\n                 // This should ideally not happen if Effect 1 ran correctly\n                 console.error(\"Cannot navigate, gameMode state is null/undefined.\");\n                 setError(\"Error determining game mode for navigation.\");\n              }\n            }\n          } else {\n            setError('Lobby not found or has been closed');\n             // Optional: navigate away\n          }\n        });\n      } catch (error) {\n        console.error('Error initializing lobby:', error);\n        if (isMounted) setError('Failed to initialize lobby');\n      }\n    };\n\n    initializeLobby();\n\n    // Cleanup function\n    return () => {\n      isMounted = false; // Set flag on unmount\n      if (unsubscribeFn) {\n        unsubscribeFn();\n      }\n      // Only attempt to leave if we successfully joined/created a lobby\n      if (currentLobbyId.current && currentPlayer.current) {\n        lobbyService.leaveLobby(currentLobbyId.current, currentPlayer.current.id);\n      }\n    };\n    // This effect now depends on gameMode being set, user, and searchParams changes\n  }, [gameMode, searchParams, currentUser, navigate]); \n\n  const copyLink = async () => {\n    if (!gameMode || !currentLobbyId.current) return;\n\n    const baseUrl = window.location.origin;\n    const gameLink = `${baseUrl}/#/game/population/${gameMode}?lobby=${encodeURIComponent(currentLobbyId.current)}`;\n    \n    try {\n      await navigator.clipboard.writeText(gameLink);\n      setCopyStatus('Copied!');\n      setTimeout(() => setCopyStatus(''), 2000);\n    } catch (err) {\n      const textArea = document.createElement('textarea');\n      textArea.value = gameLink;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-9999px';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      try {\n        document.execCommand('copy');\n        setCopyStatus('Copied!');\n        setTimeout(() => setCopyStatus(''), 2000);\n      } catch (copyErr) {\n        setCopyStatus('Failed to copy');\n        console.error('Fallback copy failed: ', copyErr);\n      }\n      document.body.removeChild(textArea);\n    }\n  };\n\n  const startGame = async () => {\n    if (!isHost || !gameMode || !currentLobbyId.current) return;\n\n    const settings = gameSettings[gameMode]; // Get settings here when needed\n    if (!settings) {\n      setError('Invalid game mode configuration.');\n      return;\n    }\n\n    if (players.length < settings.minPlayers) {\n      setError(`Waiting for more players. Need at least ${settings.minPlayers}.`);\n      return;\n    }\n    if (players.length > settings.maxPlayers) {\n      setError(`Too many players. Maximum is ${settings.maxPlayers}.`);\n      return;\n    }\n\n    try {\n      setError('');\n      \n      await settings.service.initializeGameState(\n        currentLobbyId.current, \n        players \n      );\n\n      await lobbyService.startGame(currentLobbyId.current);\n\n    } catch (error) {\n      console.error('Error starting game:', error);\n      setError(error.message || 'Failed to start game');\n    }\n  };\n  \n  if (!gameMode) {\n    return <div className=\"game-lobby\">Determining game mode... {error && <p className=\"error-message\">{error}</p>}</div>;\n  }\n  if (!currentUser) {\n      return <div className=\"game-lobby\">Please log in...</div>; // Or redirect logic\n  }\n\n  const settings = gameSettings[gameMode]; // Get settings here for rendering\n\n  return (\n    <div className=\"game-lobby\">\n      <h2>{settings?.name || 'Game Lobby'}</h2>\n      {error && <p className=\"error-message\">{error}</p>}\n      <div className=\"lobby-info\">\n        <p>Lobby ID: <strong>{lobbyId}</strong></p>\n        {isHost && (\n          <button \n            className={`button button-secondary copy-button ${copyStatus ? 'copied' : ''}`} \n            onClick={copyLink}\n            disabled={!lobbyId}\n          >\n            {copyStatus || 'Copy Invite Link'}\n          </button>\n        )}\n      </div>\n\n      <div className=\"player-list\">\n        <h3>Players ({players.length}/{settings?.maxPlayers || 'N/A'}):</h3>\n        <ul>\n          {players.map((player, index) => (\n            <li key={player.id || index}>\n              {player.name} {player.id === currentUser?.uid ? '(You)' : ''} {index === 0 ? '(Host)' : ''}\n            </li>\n          ))}\n        </ul>\n        {players.length < settings?.minPlayers && (\n            <p className=\"waiting-message\">Waiting for at least {settings.minPlayers} players...</p>\n        )}\n      </div>\n\n      {isHost && (\n        <button \n          className=\"button button-primary start-button\" \n          onClick={startGame}\n          disabled={players.length < settings?.minPlayers || players.length > settings?.maxPlayers} \n        >\n          Start Game\n        </button>\n      )}\n      {!isHost && <p>Waiting for the host to start the game...</p>}\n    </div>\n  );\n}\n\nexport default GameLobby; ","import { \r\n  collection, \r\n  addDoc, \r\n  query, \r\n  orderBy, \r\n  getDocs,\r\n  where,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst LEADERBOARD_COLLECTION = 'scores';\r\n\r\nexport const leaderboardService = {\r\n  // Add a new score\r\n  async addScore(userId, username, score, gameMode) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, LEADERBOARD_COLLECTION), {\r\n        userId,\r\n        username,\r\n        score,\r\n        gameMode,\r\n        timestamp: serverTimestamp()\r\n      });\r\n      return docRef.id;\r\n    } catch (error) {\r\n      console.error('Error adding score:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get global leaderboard\r\n  async getGlobalLeaderboard(limit = 10) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting leaderboard:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user's best scores\r\n  async getUserBestScores(userId, limit = 5) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        where('userId', '==', userId),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting user scores:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; ","import React, { useState } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { leaderboardService } from '../services/leaderboardService';\r\n\r\nexport function FirebaseTest() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [testScore, setTestScore] = useState(null);\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function addTestScore() {\r\n    if (!currentUser) return;\r\n    try {\r\n      await leaderboardService.addScore(\r\n        currentUser.uid,\r\n        currentUser.email,\r\n        100,\r\n        'test'\r\n      );\r\n      setTestScore('Score added successfully!');\r\n    } catch (error) {\r\n      setTestScore('Failed to add score: ' + error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Firebase Test</h2>\r\n      \r\n      {currentUser ? (\r\n        <div>\r\n          <p>Logged in as: {currentUser.email}</p>\r\n          <button onClick={handleLogout} disabled={loading}>\r\n            Log Out\r\n          </button>\r\n          <button onClick={addTestScore} style={{ marginLeft: '10px' }}>\r\n            Add Test Score\r\n          </button>\r\n          {testScore && <p>{testScore}</p>}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"Email\"\r\n              required\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n            <button type=\"submit\" disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n          </form>\r\n          <form onSubmit={handleLogin} style={{ marginTop: '10px' }}>\r\n            <button type=\"submit\" disabled={loading}>\r\n              Log In\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      \r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n} ","// src/App.js\n\nimport React, { useEffect } from 'react';\nimport { useLocation, Routes, Route } from 'react-router-dom';\nimport ReactGA from 'react-ga4';\nimport Header from './components/Header';\nimport Footer from './components/Footer'; \nimport HomePage from './pages/HomePage';\nimport GamePage from './pages/GamePage';\nimport ClassicGamePage from './pages/ClassicGamePage';\nimport BattleRoyaleGamePage from './pages/BattleRoyaleGamePage';\nimport GameOverPage from './pages/GameOverPage';\nimport LeaderboardPage from './pages/LeaderboardPage';\nimport ProfilePage from './pages/ProfilePage';\nimport GameLobby from './components/GameLobby';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { FirebaseTest } from './components/FirebaseTest';\nimport './App.css';\n\nfunction App() {\n  const location = useLocation();\n\n  // Initialize Google Analytics only once\n  useEffect(() => {\n    ReactGA.initialize('G-9679TPXEBR'); // Replace with your Measurement ID\n  }, []);\n\n  // Send pageview whenever the pathname changes\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: location.pathname });\n  }, [location.pathname]);\n\n  return (\n    <AuthProvider>\n      <div className=\"App\">\n        <Header />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/game/population\" element={<ClassicGamePage />} />\n            <Route path=\"/game/population/cooperation\" element={<GameLobby />} />\n            <Route path=\"/game/population/cooperation/play\" element={<GamePage />} />\n            <Route path=\"/game/population/battleroyale\" element={<GameLobby />} />\n            <Route path=\"/game/population/battleroyale/play\" element={<BattleRoyaleGamePage />} />\n            <Route path=\"/gameover\" element={<GameOverPage />} />\n            <Route path=\"/leaderboard\" element={<LeaderboardPage />} />\n            <Route path=\"/profile\" element={<ProfilePage />} />\n            <Route path=\"/test\" element={<FirebaseTest />} />\n          </Routes>\n        </div>\n        <Footer /> \n      </div>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Wrap everything inside HashRouter\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <DndProvider backend={HTML5Backend}>\n        <App />\n      </DndProvider>\n    </HashRouter>\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}