{"version":3,"sources":["assets/logo.png","components/Header.js","components/Footer.js","pages/HomePage.js","components/CountryCard.js","pages/GamePage.js","api/countriesApi.js","api/leaderboardApi.js","pages/GameOverPage.js","pages/LeaderboardPage.js","App.js","index.js"],"names":["module","exports","Header","isMenuOpen","setIsMenuOpen","useState","closeMenu","React","createElement","className","Link","to","onClick","src","logo","alt","toggleMenu","Footer","Date","getFullYear","HomePage","navigate","useNavigate","handlePlayPopulation","ReactGA","event","category","action","handlePlayArea","CountryCard","_ref","country","isClickable","highlight","mode","isFlipped","setIsFlipped","highlightClass","handleClick","flagUrl","name","population","toLocaleString","area","GamePage","sortedCountries","setSortedCountries","currentCountry","setCurrentCountry","remainingCountries","setRemainingCountries","score","setScore","hoverIndex","setHoverIndex","useParams","useEffect","async","validCountries","response","fetch","unMemberCountries","json","filter","unMember","map","index","id","common","official","flags","svg","png","error","console","fetchCountries","startNewGame","initializeGame","compareProperty","data","availableCountries","randomIndex","Math","floor","random","length","firstCountry","splice","nextIndex","nextCountry","handleInsert","newSortedCountries","isCorrectOrder","prevScore","pickNextCountry","state","message","countriesCopy","correctOrder","sort","a","b","incorrectCountry","userOrder","countriesList","i","key","onMouseEnter","onMouseLeave","_","getLeaderboard","arguments","undefined","leaderboard","JSON","parse","localStorage","getItem","entry","GameOverPage","location","useLocation","playerName","setPlayerName","isSubmitted","setIsSubmitted","setError","onSubmit","e","preventDefault","trim","submitScore","newEntry","now","date","toISOString","push","top100","slice","setItem","stringify","err","htmlFor","type","value","onChange","target","placeholder","maxLength","LeaderboardPage","setLeaderboard","selectedMode","setSelectedMode","loadLeaderboard","charAt","toUpperCase","dateString","toLocaleDateString","App","initialize","send","hitType","page","pathname","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode","BrowserRouter","DndProvider","backend","HTML5Backend"],"mappings":"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","file":"static/js/main.6eee2fe9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de73253.png\";","// src/components/Header.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\nimport logo from '../assets/logo.png'; // Ensure you have a logo image in your assets folder\r\n\r\nfunction Header() {\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n\r\n  const toggleMenu = () => {\r\n    setIsMenuOpen(!isMenuOpen);\r\n  };\r\n\r\n  const closeMenu = () => {\r\n    setIsMenuOpen(false);\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-container\">\r\n        <Link to=\"/\" className=\"header-logo\" onClick={closeMenu}>\r\n          <img src={logo} alt=\"Sortly Logo\" className=\"logo-image\" />\r\n          <span className=\"site-name\">Sortly - The Sorting Game</span>\r\n        </Link>\r\n        <button className=\"menu-button\" onClick={toggleMenu}>\r\n          ☰\r\n        </button>\r\n        <nav className={`header-nav ${isMenuOpen ? 'active' : ''}`}>\r\n          <Link to=\"/\" className=\"nav-link\" onClick={closeMenu}>Home</Link>\r\n          <Link to=\"/game/population\" className=\"nav-link\" onClick={closeMenu}>Population</Link>\r\n          <Link to=\"/game/area\" className=\"nav-link\" onClick={closeMenu}>Area</Link>\r\n          <Link to=\"/leaderboard\" className=\"nav-link\" onClick={closeMenu}>Leaderboard</Link>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// src/components/Footer.js\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\nimport logo from '../assets/logo.png'; // Reuse your logo\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <img src={logo} alt=\"Sortly Logo\" className=\"footer-logo\" />\r\n        <p>&copy; {new Date().getFullYear()} Sortly. All rights reserved.</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// src/pages/HomePage.js\r\n\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReactGA from 'react-ga4'; // Import ReactGA\r\nimport './HomePage.css';\r\n\r\nfunction HomePage() {\r\n  const navigate = useNavigate();\r\n\r\n  // Define the handler functions\r\n  const handlePlayPopulation = () => {\r\n    // Track the event in Google Analytics\r\n    ReactGA.event({\r\n      category: 'Game',\r\n      action: 'Clicked Play Population Game',\r\n    });\r\n    // Navigate to the population game page\r\n    navigate('/game/population');\r\n  };\r\n\r\n  const handlePlayArea = () => {\r\n    // Track the event in Google Analytics\r\n    ReactGA.event({\r\n      category: 'Game',\r\n      action: 'Clicked Play Area Game',\r\n    });\r\n    // Navigate to the area game page\r\n    navigate('/game/area');\r\n  };\r\n\r\n  return (\r\n    <div className=\"homepage\">\r\n      {/* Section 1: Sort by Population */}\r\n      <div className=\"section population-section\">\r\n        <div className=\"overlay\">\r\n          <h2>Sort by Population</h2>\r\n          <button\r\n            className=\"button button-primary\"\r\n            onClick={handlePlayPopulation} // Use the handler function\r\n          >\r\n            Play Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section 2: Sort by Area */}\r\n      <div className=\"section area-section\">\r\n        <div className=\"overlay\">\r\n          <h2>Sort by Area</h2>\r\n          <button\r\n            className=\"button button-primary\"\r\n            onClick={handlePlayArea} // Use the handler function\r\n          >\r\n            Play Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section 3: Coming Soon */}\r\n      <div className=\"section coming-soon-section\">\r\n        <div className=\"overlay\">\r\n          <h2>New Game Mode</h2>\r\n          <p>Coming Soon</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","// src/components/CountryCard.js\n\nimport React, { useState } from 'react';\nimport './CountryCard.css';\n\nfunction CountryCard({ country, isClickable, highlight, mode }) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    if (isClickable) {\n      setIsFlipped(!isFlipped);\n    }\n  };\n\n  const highlightClass = highlight ? `highlighted-${highlight}` : '';\n\n  const getDetailText = () => {\n    if (mode === 'population') {\n      return `Population: ${country.population.toLocaleString()}`;\n    } else if (mode === 'area') {\n      return `Area: ${country.area.toLocaleString()} km²`;\n    }\n    return '';\n  };\n\n  return (\n    <div\n      className={`country-card ${isFlipped ? 'flipped' : ''} ${\n        isClickable ? 'clickable' : ''\n      } ${highlightClass}`}\n      onClick={handleClick}\n    >\n      <div className=\"card-inner\">\n        {/* Front Side */}\n        <div className={`card-face card-front ${highlightClass}`}>\n          <img\n            src={country.flagUrl}\n            alt={`Flag of ${country.name}`}\n            className=\"country-flag\"\n          />\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n          </div>\n        </div>\n        {/* Back Side */}\n        <div className={`card-face card-back ${highlightClass}`}>\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n            <p className=\"country-detail\">\n              {getDetailText()}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CountryCard;\n","// src/pages/GamePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport CountryCard from '../components/CountryCard';\nimport './GamePage.css';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { fetchCountries } from '../api/countriesApi'; // As previously set up\n\nfunction GamePage() {\n  const [sortedCountries, setSortedCountries] = useState([]);\n  const [currentCountry, setCurrentCountry] = useState(null);\n  const [remainingCountries, setRemainingCountries] = useState([]);\n  const [score, setScore] = useState(0);\n  const [hoverIndex, setHoverIndex] = useState(null);\n  const { mode } = useParams(); // Get the game mode from the URL\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const initializeGame = async () => {\n      const data = await fetchCountries();\n      // Filter countries with missing data if necessary\n      const validCountries = data.filter(\n        (country) => country.population && country.area && country.flagUrl\n      );\n      startNewGame(validCountries);\n    };\n\n    initializeGame();\n  }, []);\n\n  // Determine the comparison property based on the game mode\n  const compareProperty = mode === 'area' ? 'area' : 'population';\n\n  const startNewGame = (data) => {\n    const availableCountries = [...data];\n\n    // Pick a random starting country\n    const randomIndex = Math.floor(Math.random() * availableCountries.length);\n    const firstCountry = availableCountries.splice(randomIndex, 1)[0];\n\n    // Now pick the next country from the remaining\n    const nextIndex = Math.floor(Math.random() * availableCountries.length);\n    const nextCountry = availableCountries.splice(nextIndex, 1)[0];\n\n    setSortedCountries([firstCountry]);\n    setRemainingCountries(availableCountries);\n    setScore(1);\n    setCurrentCountry(nextCountry);\n  };\n\n  const pickNextCountry = () => {\n    if (remainingCountries.length === 0) {\n      navigate('/gameover', {\n        state: { score, message: 'Congratulations! You sorted all countries correctly.', mode, },\n      });\n      return;\n    }\n\n    const countriesCopy = [...remainingCountries];\n    const randomIndex = Math.floor(Math.random() * countriesCopy.length);\n    const nextCountry = countriesCopy.splice(randomIndex, 1)[0];\n\n    setCurrentCountry(nextCountry);\n    setRemainingCountries(countriesCopy);\n  };\n\n  const handleInsert = (index) => {\n    const newSortedCountries = [...sortedCountries];\n    newSortedCountries.splice(index, 0, currentCountry);\n\n    if (isCorrectOrder(newSortedCountries)) {\n      setSortedCountries(newSortedCountries);\n      setScore((prevScore) => prevScore + 1);\n      setCurrentCountry(null);\n      pickNextCountry();\n    } else {\n      const allCountries = [...sortedCountries, currentCountry];\n      const correctOrder = [...allCountries].sort((a, b) => a[compareProperty] - b[compareProperty]);\n\n      navigate('/gameover', {\n        state: {\n          score,\n          message: 'Incorrect placement!',\n          incorrectCountry: currentCountry,\n          userOrder: newSortedCountries,\n          correctOrder: correctOrder,\n          mode,\n        },\n      });\n    }\n  };\n\n  const isCorrectOrder = (countriesList) => {\n    for (let i = 0; i < countriesList.length - 1; i++) {\n      if (countriesList[i][compareProperty] > countriesList[i + 1][compareProperty]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  return (\n    <div className=\"game-page\">\n      <h2>Sort Countries by {mode === 'area' ? 'Area' : 'Population'} (Ascending)</h2>\n      <p>Score: {score - 1}</p>\n      <div className=\"sorted-countries-container\">\n        {currentCountry && (\n          <div className=\"instructions\">\n            <p>\n              Where does <strong>{currentCountry.name}</strong> fit among the sorted countries?\n            </p>\n          </div>\n        )}\n        <div className=\"sorted-countries\">\n          {sortedCountries.map((country, index) => (\n            <CountryCard\n              key={`country-${country.id}`}\n              country={country}\n              isClickable={true}\n              mode={mode}\n              highlight={hoverIndex === index ? 'hover' : ''}\n            />\n          ))}\n        </div>\n\n        {currentCountry && (\n          <div className=\"insert-buttons\">\n            <button\n              className=\"insert-button lower-button\"\n              onClick={() => handleInsert(0)}\n              onMouseEnter={() => setHoverIndex(0)}\n              onMouseLeave={() => setHoverIndex(null)}\n            >\n              ↓\n            </button>\n            {sortedCountries.map((_, index) => (\n              <button\n                key={`insert-${index + 1}`}\n                className={`insert-button ${index === sortedCountries.length - 1 ? 'higher-button' : 'here-button'}`}\n                onClick={() => handleInsert(index + 1)}\n                onMouseEnter={() => setHoverIndex(index + 1)}\n                onMouseLeave={() => setHoverIndex(null)}\n              >\n                {index === sortedCountries.length - 1 ? '↑' : index + 1}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n      {currentCountry && (\n        <div className=\"current-country\">\n          <h3>Current Country:</h3>\n          <CountryCard country={currentCountry} isClickable={false} mode={mode} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GamePage;\n","// src/api/countriesApi.js\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n      const response = await fetch('https://restcountries.com/v3.1/all');\r\n      const data = await response.json();\r\n  \r\n      // Filter to only include UN member states\r\n      const unMemberCountries = data.filter((country) => country.unMember);\r\n  \r\n      // Map the API data to match your application's structure\r\n      const countries = unMemberCountries.map((country, index) => ({\r\n        id: index + 1, // Assign a unique ID\r\n        name: country.name.common || country.name.official,\r\n        flagUrl: country.flags.svg || country.flags.png,\r\n        population: country.population,\r\n        area: country.area,\r\n        // Include any other necessary properties\r\n      }));\r\n  \r\n      return countries;\r\n    } catch (error) {\r\n      console.error('Error fetching countries:', error);\r\n      return [];\r\n    }\r\n  };\r\n  ","// src/api/leaderboardApi.js\r\n\r\n// For now, we'll use localStorage to store leaderboard data\r\n// In a real application, this would be replaced with actual API calls to a backend\r\n\r\nconst LEADERBOARD_KEY = 'sortly_leaderboard';\r\n\r\nexport const submitScore = (playerName, score, mode) => {\r\n  const leaderboard = getLeaderboard();\r\n  const newEntry = {\r\n    id: Date.now(),\r\n    playerName,\r\n    score,\r\n    mode,\r\n    date: new Date().toISOString(),\r\n  };\r\n  \r\n  leaderboard.push(newEntry);\r\n  // Sort by score (descending) and keep only top 100 entries\r\n  leaderboard.sort((a, b) => b.score - a.score);\r\n  const top100 = leaderboard.slice(0, 100);\r\n  \r\n  localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(top100));\r\n  return newEntry;\r\n};\r\n\r\nexport const getLeaderboard = (mode = null) => {\r\n  const leaderboard = JSON.parse(localStorage.getItem(LEADERBOARD_KEY) || '[]');\r\n  if (mode) {\r\n    return leaderboard.filter(entry => entry.mode === mode);\r\n  }\r\n  return leaderboard;\r\n};\r\n\r\nexport const getTopScores = (mode = null, limit = 10) => {\r\n  const leaderboard = getLeaderboard(mode);\r\n  return leaderboard.slice(0, limit);\r\n}; ","// src/pages/GameOverPage.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport CountryCard from '../components/CountryCard';\r\nimport { submitScore } from '../api/leaderboardApi';\r\nimport './GameOverPage.css';\r\nimport '../components/Buttons.css';\r\n\r\nfunction GameOverPage() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { score, message, incorrectCountry, userOrder, correctOrder, mode } = location.state || {};\r\n  const [playerName, setPlayerName] = useState('');\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!playerName.trim()) {\r\n      setError('Please enter your name');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      submitScore(playerName, score - 1, mode);\r\n      setIsSubmitted(true);\r\n    } catch (err) {\r\n      setError('Failed to submit score. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-over-page\">\r\n      <h2>Game Over</h2>\r\n      <p>{message}</p>\r\n      <p>Your final score: {score - 1}</p>\r\n\r\n      {!isSubmitted ? (\r\n        <form onSubmit={handleSubmit} className=\"score-submission\">\r\n          <div className=\"input-group\">\r\n            <label htmlFor=\"playerName\">Enter your name:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"playerName\"\r\n              value={playerName}\r\n              onChange={(e) => setPlayerName(e.target.value)}\r\n              placeholder=\"Your name\"\r\n              maxLength={20}\r\n            />\r\n          </div>\r\n          {error && <p className=\"error\">{error}</p>}\r\n          <button type=\"submit\" className=\"button button-primary\">\r\n            Submit Score\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <div className=\"submission-success\">\r\n          <p>Score submitted successfully!</p>\r\n        </div>\r\n      )}\r\n\r\n      {userOrder && incorrectCountry && (\r\n        <div className=\"user-order\">\r\n          <h3>Your order was:</h3>\r\n          <div className=\"country-list\">\r\n            {userOrder.map((country) => (\r\n              <CountryCard\r\n                key={country.id}\r\n                country={country}\r\n                isClickable={true}\r\n                highlight={country.id === incorrectCountry.id ? 'incorrect' : ''}\r\n                mode={mode}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {correctOrder && incorrectCountry && (\r\n        <div className=\"correct-order\">\r\n          <h3>The correct order was:</h3>\r\n          <div className=\"country-list\">\r\n            {correctOrder.map((country) => (\r\n              <CountryCard\r\n                key={country.id}\r\n                country={country}\r\n                isClickable={true}\r\n                highlight={country.id === incorrectCountry.id ? 'correct' : ''}\r\n                mode={mode}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"game-over-buttons\">\r\n        <button className=\"button button-primary\" onClick={() => navigate(`/game/${mode}`)}>\r\n          Play Again\r\n        </button>\r\n        <button className=\"button button-secondary\" onClick={() => navigate('/')}>\r\n          Go to Home Page\r\n        </button>\r\n        <button className=\"button button-secondary\" onClick={() => navigate('/leaderboard')}>\r\n          View Leaderboard\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOverPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getLeaderboard } from '../api/leaderboardApi';\r\nimport './LeaderboardPage.css';\r\n\r\nfunction LeaderboardPage() {\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadLeaderboard = () => {\r\n      const data = getLeaderboard(selectedMode);\r\n      setLeaderboard(data);\r\n    };\r\n    loadLeaderboard();\r\n  }, [selectedMode]);\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toLocaleDateString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"leaderboard-page\">\r\n      <h2>Leaderboard</h2>\r\n      \r\n      <div className=\"mode-filters\">\r\n        <button \r\n          className={`button ${!selectedMode ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode(null)}\r\n        >\r\n          All Modes\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'population' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('population')}\r\n        >\r\n          Population\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'area' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('area')}\r\n        >\r\n          Area\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"leaderboard-table\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Rank</th>\r\n              <th>Player</th>\r\n              <th>Score</th>\r\n              <th>Mode</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {leaderboard.map((entry, index) => (\r\n              <tr key={entry.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{entry.playerName}</td>\r\n                <td>{entry.score}</td>\r\n                <td>{entry.mode.charAt(0).toUpperCase() + entry.mode.slice(1)}</td>\r\n                <td>{formatDate(entry.date)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeaderboardPage; ","// src/App.js\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useLocation, Routes, Route } from 'react-router-dom';\r\nimport ReactGA from 'react-ga4';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer'; \r\nimport HomePage from './pages/HomePage';\r\nimport GamePage from './pages/GamePage';\r\nimport GameOverPage from './pages/GameOverPage';\r\nimport LeaderboardPage from './pages/LeaderboardPage';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n\r\n  // Initialize Google Analytics only once\r\n  useEffect(() => {\r\n    ReactGA.initialize('G-9679TPXEBR'); // Replace with your Measurement ID\r\n  }, []);\r\n\r\n  // Send pageview whenever the pathname changes\r\n  useEffect(() => {\r\n    ReactGA.send({ hitType: 'pageview', page: location.pathname });\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"content\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          <Route path=\"/game/:mode\" element={<GamePage />} />\r\n          <Route path=\"/gameover\" element={<GameOverPage />} />\r\n          <Route path=\"/leaderboard\" element={<LeaderboardPage />} />\r\n        </Routes>\r\n      </div>\r\n      <Footer /> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// src/index.js\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// Wrap everything inside BrowserRouter\r\nroot.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <DndProvider backend={HTML5Backend}>\r\n        <App />\r\n      </DndProvider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}