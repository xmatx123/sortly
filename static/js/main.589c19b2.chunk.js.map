{"version":3,"sources":["assets/logo.png","assets/population.jpg","assets/area.jpg","assets/gini.jpg","firebase.js","contexts/AuthContext.js","services/avatarService.js","services/userProfileService.js","components/LoginButton.js","components/Header.js","components/Footer.js","pages/HomePage.js","api/countriesApi.js","components/CountryCard.js","utils/stringUtils.js","components/Game/ClassicMode.js","services/cooperationGameService.js","components/Game/CooperationMode.js","services/battleRoyaleGameService.js","components/Game/BattleRoyaleMode.js","pages/GamePage.js","api/leaderboardApi.js","services/gameHistoryService.js","pages/GameOverPage.js","utils/dateUtils.js","pages/LeaderboardPage.js","services/achievementsService.js","components/profile/AvatarSelector.jsx","components/profile/ProfileHeader.jsx","components/profile/AchievementCard.jsx","components/profile/AchievementsSection.jsx","utils/achievementUtils.js","components/profile/GameHistoryItem.jsx","components/profile/GameHistory.jsx","pages/ProfilePage.js","services/lobbyService.js","components/GameLobby.js","services/leaderboardService.js","components/FirebaseTest.js","pages/GameReviewPage.js","App.js","index.js"],"names":["module","exports","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","auth","getAuth","db","getFirestore","realtimeDb","getDatabase","AuthContext","createContext","useAuth","useContext","AuthProvider","_ref","children","currentUser","setCurrentUser","useState","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","React","createElement","Provider","avatarService","getAvatarOptions","id","url","name","userProfileService","userId","userDoc","getDoc","doc","exists","data","defaultProfile","nickname","country","avatarUrl","createdAt","Date","this","updateUserProfile","error","console","profileData","userRef","setDoc","updatedAt","merge","field","updateDoc","LoginButton","setEmail","setPassword","setError","showLoginForm","setShowLoginForm","userProfile","setUserProfile","navigate","useNavigate","async","profile","getUserProfile","uid","loadUserProfile","className","onClick","src","alt","message","disabled","type","onChange","e","target","placeholder","required","preventDefault","style","color","Header","isMenuOpen","setIsMenuOpen","closeMenu","modes","label","Link","to","logo","toggleMenu","map","category","key","s","toUpperCase","slice","mode","path","state","arguments","length","undefined","handleNav","Footer","getFullYear","capitalize","HomePage","categories","image","populationImage","areaImage","giniImage","cat","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","handlePlay","modeLabel","categoryLabel","log","ReactGA","event","action","getLatestGini","giniObj","Object","keys","giniValue","sort","pop","fetchCountries","apiUrl","response","fetch","ok","Error","status","json","Array","isArray","countries","filter","_country$name","_country$flags","latestGini","gini","unMember","common","flags","svg","population","area","index","flagUrl","warn","CountryCard","statisticValue","isFlippable","isClickable","highlight","customClassName","isFlipped","setIsFlipped","highlightClass","handleClick","getDetailText","num","toFixed","toLocaleString","charAt","ClassicMode","countriesToPick","setCountriesToPick","sortedCountries","setSortedCountries","currentCountry","setCurrentCountry","score","setScore","gameStatus","setGameStatus","isLoading","setIsLoading","validCountries","c","shuffled","Math","random","sortedInitialPair","a","b","_a$category","_b$category","initialSortedCountry","firstCountryToPlace","err","loadGame","pickNextCountry","useCallback","nextCountry","gameMode","replace","handlePlaceCountry","countryToPlace","newSortedCountries","splice","isCorrect","_newSortedCountries$c","_countryToPlace$categ","_countryToPlace$categ2","_newSortedCountries$c2","finalSortedList","incorrectCountry","attemptedIndex","window","location","reload","aria-label","title","Fragment","cooperationGameService","lobbyId","players","allCountries","fetchError","selectedCountries","getRandomElements","arr","initialCountry","inventoryCountries","gameStateRef","ref","initialState","currentPlayer","remainingCountries","now","lastUpdated","set","subscribeToGameState","callback","listener","onValue","snapshot","val","off","updates","update","playerId","chosenCountry","gameState","get","some","placementIndex","potentialNewSortedCountries","countriesList","i","_gameState$players$","placedCountryId","updatedRemainingCountries","nextPlayerId","currentPlayerIndex","findIndex","p","result","endGame","CooperationMode","_gameStateData$player","_gameStateData$player2","categoryProp","setRemainingCountries","setGameState","gameStateData","setGameStateData","unsubscribe","currentCategory","finalScore","messageCategory","handlePlaceCard","placeCard","isMyTurn","currentPlayerName","find","canPlace","isSelectedForPlacing","chooseCard","handleChooseCard","battleRoyaleGameService","initialPlayers","isActive","gameType","activePlayers","choosingPlayer","_findNextActivePlayer","currentPlayerId","placingPlayer","playerIndex","activePlayerIds","winner","winnerId","BattleRoyaleMode","_gameStateData$player3","winnerName","winnerScore","finalPlayersState","me","myPlayerState","amIActive","canChoose","VALID_CATEGORIES","VALID_MODES","UnifiedGamePage","_location$state","useParams","useLocation","isValidCategory","includes","toLowerCase","isValidMode","Navigate","renderGameMode","getLeaderboard","leaderboardKey","storedData","localStorage","getItem","JSON","parse","getTopScores","limit","leaderboard","CATEGORIES","gameHistoryService","limitCount","gamesRef","collection","q","query","where","orderBy","firestoreLimit","games","getDocs","docs","qFallback","querySnapshotFallback","sortedGames","fallbackError","topGames","Promise","all","getTopGames","gameId","docRef","docSnap","userAttemptList","correctlySortedList","minimalUserAttempt","rest","minimalCorrectlySorted","_ref2","minimalIncorrectCountry","docData","timestamp","serverTimestamp","forEach","addDoc","GameOverPage","gameModeString","userOrder","modeString","parts","split","parseGameMode","playerName","setPlayerName","isSubmitted","setIsSubmitted","savedGameId","setSavedGameId","hasAttemptedSave","useRef","fetchUserProfile","current","historyScore","historyDataPayload","correctlySortedForSave","incorrectCountryForSave","saveGame","saveGameHistory","player","onSubmit","trim","submitScoreValue","gameHistoryId","newEntry","date","toISOString","push","topEntries","setItem","stringify","submitScore","htmlFor","maxLength","textAlign","width","margin","justifyContent","formatDate","dateInput","dateObject","toDate","isNaN","getTime","toLocaleDateString","year","month","day","CLASSIC_CATEGORIES","LeaderboardPage","leaderboards","setLeaderboards","fetchedLeaderboards","topScores","enrichedScores","details","getGameDetails","loadLeaderboardsAndDetails","renderLeaderboardTable","entry","_entry$details$correc","alert","role","marginTop","ACHIEVEMENT_DEFINITIONS","sorting","bronze","description","icon","requirement","silver","gold","platinum","gameCount","achievementsService","achievements","correctCount","_currentAchievements$","_currentAchievements$2","currentAchievements","getUserAchievements","categoryAchievements","updated","values","achievement","unlocked","unlockedAt","gameCountAchievement","currentCount","count","updateUserAchievements","getAchievementDefinitions","AvatarSelector","avatarOptions","selectedAvatar","onSelect","onClose","avatar","ProfileHeader","formData","setFormData","showAvatarSelector","setShowAvatarSelector","isEditing","setIsEditing","handleChange","prev","AchievementCard","isUnlocked","unlockDate","AchievementsSection","achievementDefinitions","transformedAchievements","definitions","entries","categoryData","level","transformAchievementDefinitions","_achievements$achieve","_achievements$achieve2","_achievements$achieve3","GameHistoryItem","_game$timestamp","_game$countries","game","idx","GameHistory","gameHistory","useMemo","flatMap","self","g","ProfilePage","setProfile","setAchievements","setGameHistory","editing","setEditing","loadProfile","userAchievements","userGameHistory","getAllTopGames","onEdit","onAvatarSelect","onAvatarSelectorToggle","onCancel","lobbyService","constructor","lobbiesRef","lobbyRef","lobbyData","currentPlayers","updatedPlayers","remove","subscribeToLobby","startedAt","endedAt","gameSettings","cooperation","minPlayers","maxPlayers","service","battleRoyale","GameLobby","setLobbyId","setPlayers","isHost","setIsHost","copyStatus","setCopyStatus","searchParams","useSearchParams","currentLobbyId","unsubscribeFn","isMounted","fetchProfileError","lobbyParam","targetLobbyId","playerInfo","floor","joinLobby","joinError","toString","substring","createLobby","createError","_lobbyData$players$","dbCategory","navigatePath","navError","initializeLobby","leaveLobby","copyLink","gameLink","origin","encodeURIComponent","navigator","clipboard","writeText","setTimeout","textArea","document","position","left","body","appendChild","focus","select","execCommand","copyErr","removeChild","settings","initializeGameState","startGame","leaderboardService","username","FirebaseTest","testScore","setTestScore","padding","addScore","marginLeft","GameReviewPage","gameData","setGameData","fetchGameData","isClassicReview","categoryDisplay","item","App","_gameRouteMatch$param","_lobbyRouteMatch$para","gameRouteMatch","useMatch","lobbyRouteMatch","gameCategory","params","backgroundClass","initialize","send","hitType","page","pathname","Routes","Route","element","ReactDOM","createRoot","getElementById","render","StrictMode","HashRouter","DndProvider","backend","HTML5Backend"],"mappings":"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","file":"static/js/main.589c19b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de73253.png\";","module.exports = __webpack_public_path__ + \"static/media/population.b123bcc2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/area.1a41ffef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gini.04c4aefc.jpg\";","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getDatabase } from 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nexport const auth = getAuth(app);\n\n// Initialize Cloud Firestore and get a reference to the service\nexport const db = getFirestore(app);\n\n// Initialize Realtime Database and get a reference to the service\nexport const realtimeDb = getDatabase(app);\n\nexport default app; ","import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged \r\n} from 'firebase/auth';\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  function signup(email, password) {\r\n    return createUserWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function login(email, password) {\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function logout() {\r\n    return signOut(auth);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setCurrentUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n} ","export const avatarService = {\r\n  getAvatarOptions() {\r\n    return [\r\n      {\r\n        id: 'default',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=default',\r\n        name: 'Default'\r\n      },\r\n      {\r\n        id: 'happy',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=happy',\r\n        name: 'Happy'\r\n      },\r\n      {\r\n        id: 'cool',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=cool',\r\n        name: 'Cool'\r\n      },\r\n      {\r\n        id: 'smart',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=smart',\r\n        name: 'Smart'\r\n      },\r\n      {\r\n        id: 'friendly',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=friendly',\r\n        name: 'Friendly'\r\n      },\r\n      {\r\n        id: 'adventurous',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=adventurous',\r\n        name: 'Adventurous'\r\n      },\r\n      {\r\n        id: 'creative',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=creative',\r\n        name: 'Creative'\r\n      },\r\n      {\r\n        id: 'mysterious',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mysterious',\r\n        name: 'Mysterious'\r\n      }\r\n    ];\r\n  }\r\n}; ","import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { avatarService } from './avatarService';\n\nconst USERS_COLLECTION = 'users';\n\nexport const userProfileService = {\n  // Get user profile\n  async getUserProfile(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, USERS_COLLECTION, userId));\n      if (userDoc.exists()) {\n        return userDoc.data();\n      }\n      // If no profile exists, create a default one\n      const defaultProfile = {\n        nickname: '',\n        country: '',\n        avatarUrl: avatarService.getAvatarOptions()[0].url,\n        createdAt: new Date()\n      };\n      await this.updateUserProfile(userId, defaultProfile);\n      return defaultProfile;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      throw error;\n    }\n  },\n\n  // Create or update user profile\n  async updateUserProfile(userId, profileData) {\n    try {\n      const userRef = doc(db, USERS_COLLECTION, userId);\n      await setDoc(userRef, {\n        ...profileData,\n        updatedAt: new Date()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n\n  // Update specific profile fields\n  async updateProfileField(userId, field, value) {\n    try {\n      const userRef = doc(db, USERS_COLLECTION, userId);\n      await updateDoc(userRef, {\n        [field]: value,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.error('Error updating profile field:', error);\n      throw error;\n    }\n  }\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { userProfileService } from '../services/userProfileService';\r\nimport { avatarService } from '../services/avatarService';\r\nimport './LoginButton.css';\r\n\r\nexport default function LoginButton() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [showLoginForm, setShowLoginForm] = useState(false);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadUserProfile = async () => {\r\n      if (currentUser) {\r\n        try {\r\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\r\n          setUserProfile(profile);\r\n        } catch (error) {\r\n          console.error('Error loading user profile:', error);\r\n        }\r\n      }\r\n    };\r\n    loadUserProfile();\r\n  }, [currentUser]);\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleSignup(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n      navigate('/');\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  if (currentUser) {\r\n    return (\r\n      <div className=\"login-button\">\r\n        <div className=\"user-profile-button\" onClick={() => navigate('/profile')}>\r\n          <img \r\n            src={userProfile?.avatarUrl || avatarService.getAvatarOptions()[0].url} \r\n            alt=\"Profile\" \r\n            className=\"header-avatar\"\r\n          />\r\n          <span className=\"user-name\">{userProfile?.nickname || currentUser.email}</span>\r\n        </div>\r\n        <button onClick={handleLogout} disabled={loading} className=\"logout-button\">\r\n          Log Out\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-button\">\r\n      {!showLoginForm ? (\r\n        <button onClick={() => setShowLoginForm(true)}>\r\n          Login / Sign Up\r\n        </button>\r\n      ) : (\r\n        <div className=\"login-form\">\r\n          <input\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder=\"Email\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n          <div className=\"login-buttons\">\r\n            <button onClick={handleLogin} disabled={loading}>\r\n              Login\r\n            </button>\r\n            <button onClick={handleSignup} disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n            <button onClick={() => setShowLoginForm(false)}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} ","// src/components/Header.js\n\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport './Header.css';\nimport logo from '../assets/logo.png';\nimport LoginButton from './LoginButton';\n\n// Helper function to capitalize\nconst capitalize = (s) => s && s[0].toUpperCase() + s.slice(1);\n\nfunction Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  // Define categories and modes for dropdowns\n  const categories = ['population', 'area', 'gini'];\n  const modes = [\n      { name: 'classic', label: 'Classic' },\n      { name: 'cooperation', label: 'Cooperation' },\n      { name: 'battleroyale', label: 'Battle Royale' },\n  ];\n\n  // Function to handle navigation, ensuring menu closes\n  const handleNav = (path, state = {}) => {\n      navigate(path, { state });\n      closeMenu();\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-container\">\n        <Link to=\"/\" className=\"header-logo\" onClick={closeMenu}>\n          <img src={logo} alt=\"Sortly Logo\" className=\"logo-image\" />\n          <span className=\"site-name\">Sortly</span>\n        </Link>\n        <button className=\"menu-button\" onClick={toggleMenu}>\n          ☰\n        </button>\n        <nav className={`header-nav ${isMenuOpen ? 'active' : ''}`}>\n          <Link to=\"/\" className=\"nav-link\" onClick={closeMenu}>Home</Link>\n          \n          {/* Generate Dropdowns from categories */}\n          {categories.map(category => (\n            <div key={category} className=\"nav-dropdown\">\n              <button className=\"nav-link dropdown-toggle\">{capitalize(category)}</button>\n              <div className=\"dropdown-menu\">\n                {modes.map(mode => (\n                  <button \n                    key={mode.name} \n                    className=\"dropdown-item\" \n                    onClick={() => handleNav(`/game/${category}/${mode.name}`, mode.name === 'classic' ? { category } : {}) }\n                  >\n                    {mode.label}\n                  </button>\n                ))}\n              </div>\n            </div>\n          ))}\n\n          <Link to=\"/leaderboard\" className=\"nav-link\" onClick={closeMenu}>Leaderboard</Link>\n          <div className=\"nav-login\">\n            <LoginButton />\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","// src/components/Footer.js\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\nimport logo from '../assets/logo.png'; // Reuse your logo\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <img src={logo} alt=\"Sortly Logo\" className=\"footer-logo\" />\r\n        <p>&copy; {new Date().getFullYear()} Sortly. All rights reserved.</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// src/pages/HomePage.js\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ReactGA from 'react-ga4'; // Import ReactGA\nimport populationImage from '../assets/population.jpg';\nimport areaImage from '../assets/area.jpg';\nimport giniImage from '../assets/gini.jpg'; // Renamed from gdpImage\nimport './HomePage.css';\n\n// Helper function to capitalize\nconst capitalize = (s) => s && s[0].toUpperCase() + s.slice(1);\n\nfunction HomePage() {\n  const navigate = useNavigate();\n\n  // Generalized handler function\n  const handlePlay = (category, mode) => {\n    const modeLabel = mode === 'battleRoyale' ? 'Battle Royale' : capitalize(mode);\n    const categoryLabel = capitalize(category);\n    const path = `/game/${category}/${mode}`;\n\n    console.log(`Navigating to: ${path}`); // For debugging\n    ReactGA.event({\n      category: 'Game Navigation', // Updated category\n      action: `Clicked Play ${categoryLabel} ${modeLabel}`,\n      label: `${categoryLabel} - ${modeLabel}`\n    });\n\n    // For classic mode, navigate directly to the game page\n    // For coop/battle, navigate to the lobby first\n    if (mode === 'classic') {\n      // Pass category in state for ClassicMode component (as it doesn't use lobbyId)\n      navigate(path, { state: { category } }); \n    } else if (mode === 'cooperation' || mode === 'battleroyale') {\n      // Lobby route is now /game/:category/:mode (coop/battle)\n      navigate(path); \n    } else {\n      console.error(\"Unknown mode for navigation:\", mode);\n    }\n  };\n\n  // Define categories and modes for easier rendering\n  const categories = [\n    { name: 'population', image: populationImage },\n    { name: 'area', image: areaImage },\n    { name: 'gini', image: giniImage },\n  ];\n  const modes = ['classic', 'cooperation', 'battleroyale'];\n\n  return (\n    <div className=\"homepage\">\n      {categories.map(cat => (\n        <div \n          key={cat.name}\n          className={`section ${cat.name}-section`}\n          style={{\n            backgroundImage: `url(${cat.image})`,\n            backgroundPosition: 'center',\n            backgroundSize: 'cover',\n            backgroundRepeat: 'no-repeat'\n          }}\n        >\n          <div className=\"overlay\">\n            <h2>Sort by {capitalize(cat.name)}</h2>\n            <div className={`mode-buttons ${cat.name}-modes`}>\n              {modes.map(mode => (\n                <button\n                  key={mode}\n                  className=\"button button-primary\"\n                  onClick={() => handlePlay(cat.name, mode)}\n                >\n                  {mode === 'battleroyale' ? 'Battle Royale' : capitalize(mode)} Mode\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default HomePage;\n","// src/api/countriesApi.js\n\n// Helper function to get the latest Gini value from the object\nconst getLatestGini = (giniObj) => {\n  if (!giniObj || typeof giniObj !== 'object' || Object.keys(giniObj).length === 0) {\n    return null;\n  }\n  // Find the latest year (key)\n  const latestYear = Object.keys(giniObj).sort().pop();\n  const giniValue = giniObj[latestYear];\n  return typeof giniValue === 'number' ? giniValue : null;\n};\n\nexport const fetchCountries = async () => {\n  try {\n    // Update URL to request specific fields, including gini\n    const apiUrl = 'https://restcountries.com/v3.1/all?fields=name,flags,population,area,gini,unMember';\n    const response = await fetch(apiUrl);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      throw new Error('Invalid data format received from API');\n    }\n\n    // Filter to only include UN member states with valid data for ALL required fields\n    const validCountries = data.filter((country) => {\n      const latestGini = getLatestGini(country.gini); // Get latest Gini value\n      return (\n        country.unMember && \n        country.name?.common && \n        country.flags?.svg && \n        typeof country.population === 'number' && \n        typeof country.area === 'number' &&\n        latestGini !== null // Check if we got a valid Gini number\n      );\n    });\n\n    // Map the API data, including the extracted Gini value\n    const countries = validCountries.map((country, index) => ({\n      id: country.name.common, \n      name: country.name.common,\n      flagUrl: country.flags.svg,\n      population: country.population,\n      area: country.area,\n      gini: getLatestGini(country.gini), // Add latest Gini value here\n    }));\n\n    console.log(`Fetched ${countries.length} countries with valid Pop, Area, and Gini.`); // Log count\n\n    // Add a check here to ensure we still have enough countries after filtering\n    if (countries.length < 2) {\n        console.warn('Fetched fewer than 2 countries with valid data including Gini.');\n        // throw new Error('Insufficient country data available after filtering for Gini.');\n    }\n\n    return countries;\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    throw new Error('Failed to fetch countries data. Please try again later.');\n  }\n};\n  ","// src/components/CountryCard.js\n\nimport React, { useState } from 'react';\nimport './CountryCard.css';\n\nfunction CountryCard({ \n  country, \n  mode, // category: population, area, gini\n  statisticValue, // The actual value for the current mode\n  isFlippable, // Can this card be flipped? (For sorted cards)\n  isClickable, // Can this card be clicked to choose/place? (For remaining/current cards)\n  highlight, \n  onClick, // Function to call when choosing/placing\n  customClassName \n}) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    if (isFlippable) {\n      // If it's flippable, just toggle the flip state\n      setIsFlipped(!isFlipped);\n    } else if (isClickable && onClick) {\n      // Otherwise, if it's clickable for choosing/placing, call the onClick prop\n      onClick();\n    }\n    // If neither flippable nor clickable, do nothing\n  };\n\n  const highlightClass = highlight ? `highlighted-${highlight}` : '';\n\n  // Format numbers nicely\n  const formatNumber = (num) => {\n    if (typeof num !== 'number') return '';\n    // Gini usually shown to 1 decimal place, others as integers\n    return mode === 'gini' ? num.toFixed(1) : num.toLocaleString();\n  };\n\n  const getDetailText = () => {\n    const value = formatNumber(statisticValue);\n    switch (mode) {\n      case 'population':\n        return `Population: ${value}`;\n      case 'area':\n        return `Area: ${value} km²`;\n      case 'gini':\n        // Assuming Gini is passed as a number like 35.1\n        return `Gini Index: ${value}`;\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div\n      // Add 'flippable' class if applicable for styling cursor etc.\n      className={`country-card ${isFlippable ? 'flippable' : ''} ${isFlipped ? 'flipped' : ''} ${\n        isClickable ? 'clickable' : '' // Keep clickable for remaining cards styling\n      } ${highlightClass} ${customClassName || ''}`}\n      onClick={handleClick}\n    >\n      <div className=\"card-inner\">\n        {/* Front Side */}\n        <div className={`card-face card-front ${highlightClass}`}>\n          <img\n            src={country.flagUrl}\n            alt={`Flag of ${country.name}`}\n            className=\"country-flag\"\n          />\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n          </div>\n        </div>\n        {/* Back Side */}\n        <div className={`card-face card-back ${highlightClass}`}>\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n            {/* Display the formatted detail text */}\n            <p className=\"country-detail\">\n              {getDetailText()}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CountryCard;\n","/**\r\n * Capitalizes the first letter of a string.\r\n * @param {string} s The string to capitalize.\r\n * @returns {string} The capitalized string, or the original string if input is invalid.\r\n */\r\nexport const capitalize = (s) => {\r\n  if (typeof s !== 'string' || s.length === 0) {\r\n    return s; // Return original value if not a non-empty string\r\n  }\r\n  return s.charAt(0).toUpperCase() + s.slice(1);\r\n}; ","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Removed useLocation\nimport { fetchCountries } from '../../api/countriesApi'; // Adjusted path\nimport CountryCard from '../CountryCard'; // Adjusted path\nimport { capitalize } from '../../utils/stringUtils'; // Import from the new utility file\nimport '../../pages/GamePage.css'; // Adjusted path, consider a dedicated CSS?\n\n// Renamed component, accepts category as a prop\nfunction ClassicMode({ category = 'population' }) { // Receive category as prop, default\n  const [countriesToPick, setCountriesToPick] = useState([]);\n  const [sortedCountries, setSortedCountries] = useState([]);\n  const [currentCountry, setCurrentCountry] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameStatus, setGameStatus] = useState('loading'); // loading, picking, placing, ended\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  // Removed: const location = useLocation();\n  // Removed: const category = location.state?.category || 'population'; \n\n  useEffect(() => {\n    // loadGame logic remains largely the same, uses the category prop\n    const loadGame = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const fetchedCountries = await fetchCountries();\n        // Filter countries that don't have the required category data?\n        const validCountries = fetchedCountries.filter(c => typeof c[category] !== 'undefined' && c[category] !== null);\n        \n        if (validCountries.length < 2) {\n           setError(`Not enough countries found with valid data for category: ${category}.`);\n           setGameStatus('ended');\n           setIsLoading(false);\n           return; // Stop loading process\n        }\n\n        const shuffled = validCountries.sort(() => 0.5 - Math.random());\n\n        // Start the game with the first country already sorted\n        // Sort initial country and first to place based on the category\n        const sortedInitialPair = [shuffled[0], shuffled[1]].sort((a, b) => (a[category] ?? 0) - (b[category] ?? 0));\n        const initialSortedCountry = sortedInitialPair[0];\n        const firstCountryToPlace = sortedInitialPair[1];\n        \n        setSortedCountries([initialSortedCountry]); // Start with the first country placed\n        setCurrentCountry(firstCountryToPlace); // Set the second country as the one to place\n        // Shuffle the rest\n        setCountriesToPick(shuffled.slice(2).sort(() => 0.5 - Math.random())); \n        setScore(1); // Start score at 1\n        setGameStatus('placing');\n       \n      } catch (err) {\n        console.error(`Failed to load countries for category ${category}:`, err);\n        setError(err.message || `Failed to load game data for ${category}.`);\n        setGameStatus('ended');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadGame();\n  }, [category]); // Dependency is now only category\n\n  // Wrap pickNextCountry in useCallback\n  const pickNextCountry = useCallback(() => {\n    if (countriesToPick.length > 0) {\n      const nextCountry = countriesToPick[0];\n      setCurrentCountry(nextCountry);\n      setCountriesToPick(countriesToPick.slice(1));\n      setGameStatus('placing');\n    } else {\n      // All countries sorted correctly!\n      setGameStatus('ended');\n      navigate('/gameover', { \n        state: { \n          score: score, \n          message: `Congratulations! You sorted all countries by ${category === 'gini' ? 'Gini index' : capitalize(category)}!`, // Adjusted message\n          category: category, \n          gameMode: `classic_${category}` \n        },\n        replace: true \n      });\n    }\n  }, [countriesToPick, score, category, navigate]); // Add dependencies of pickNextCountry\n\n  const handlePlaceCountry = (index) => {\n    if (!currentCountry || gameStatus !== 'placing') return;\n\n    const countryToPlace = currentCountry;\n    const newSortedCountries = [...sortedCountries];\n    newSortedCountries.splice(index, 0, countryToPlace);\n\n    // Check if the new placement is correct based on the dynamic category prop\n    let isCorrect = true;\n    if (index > 0) { // Check predecessor\n      isCorrect = isCorrect && (newSortedCountries[index - 1][category] ?? 0) <= (countryToPlace[category] ?? 0);\n    }\n    if (index < newSortedCountries.length - 1) { // Check successor\n      isCorrect = isCorrect && (countryToPlace[category] ?? 0) <= (newSortedCountries[index + 1][category] ?? 0);\n    }\n\n    if (isCorrect) {\n      setSortedCountries(newSortedCountries);\n      setScore(score + 1);\n      setCurrentCountry(null);\n      setGameStatus('picking'); // Go to picking state first\n    } else {\n      // Capture state *before* navigating\n      const finalSortedList = [...sortedCountries]; \n      const incorrectCountry = countryToPlace;\n      const attemptedIndex = index;\n\n      setGameStatus('ended');\n      navigate('/gameover', {\n        state: {\n          score: score, \n          message: `Incorrect placement based on ${category === 'gini' ? 'Gini index' : capitalize(category)}. Game Over!`, // Adjusted message\n          category: category, \n          gameMode: `classic_${category}`, \n          finalSortedList: finalSortedList,\n          incorrectCountry: incorrectCountry,\n          attemptedIndex: attemptedIndex\n        },\n        replace: true\n      });\n    }\n  };\n\n  // Effect to automatically pick next country when in 'picking' state\n  useEffect(() => {\n    if (gameStatus === 'picking') {\n      pickNextCountry();\n    }\n  }, [gameStatus, pickNextCountry]); // Add pickNextCountry to dependencies\n\n  if (isLoading) {\n    // Use a generic class, GamePage can add wrapper styles\n    return <div className=\"game-mode-loading\">Loading Classic Game...</div>;\n  }\n\n  if (error) {\n    return <div className=\"game-mode-error\">Error: {error} <button onClick={() => window.location.reload()}>Retry</button></div>;\n  }\n\n  // Removed ended state check here, assume parent handles navigation\n  // if (gameStatus === 'ended' && !isLoading) { ... }\n\n  return (\n    // Use a common class for game mode components\n    <div className=\"game-mode classic-mode\">\n      <h2>Classic Mode - Sort by {category === 'gini' ? 'Gini Index' : capitalize(category)} (Lowest to Highest)</h2>\n      <p>Score: {score > 0 ? score - 1 : 0}</p>\n      \n\n      <div className=\"sorted-countries-container\">\n        \n        <div className=\"sorted-countries\">\n          {/* Use button for placement start */}\n          {currentCountry && gameStatus === 'placing' && (\n            <button \n              className=\"place-button plus-button\" \n              onClick={() => handlePlaceCountry(0)}\n              aria-label=\"Place card at the beginning\" \n              title={`Place ${currentCountry.name} at the beginning`}\n            >\n              +\n            </button>\n          )}\n          {sortedCountries.map((country, index) => (\n            <React.Fragment key={`fragment-${country.id}`}>\n              <CountryCard\n                country={country}\n                mode={category}\n                statisticValue={country[category]}\n                isFlippable={true}\n                isClickable={false}\n              />\n              {/* Use button for placement between */}\n              {currentCountry && gameStatus === 'placing' && (\n                <button \n                  className=\"place-button plus-button\"\n                  onClick={() => handlePlaceCountry(index + 1)}\n                  aria-label={`Place card after ${country.name}`}\n                  title={`Place ${currentCountry.name} after ${country.name}`}\n                >\n                  +\n                </button>\n              )}\n            </React.Fragment>\n          ))}\n          {/* If sortedCountries is empty and the player can place, show an initial place button */}\n          {sortedCountries.length === 0 && currentCountry && gameStatus === 'placing' && (\n             <button \n                className=\"place-button plus-button\"\n                onClick={() => handlePlaceCountry(0)}\n                aria-label=\"Place first card\"\n                title={`Place ${currentCountry.name} at the beginning`}\n             >\n               +\n             </button>\n          )}\n        </div>\n      </div>\n\n      {gameStatus === 'placing' && currentCountry && (\n        <div className=\"current-country\">\n          <h3>Place this Country:</h3>\n          <div\n            className=\"current-country-wrapper\"\n            title={`${currentCountry.name} - place it in the list above`}\n          >\n            <CountryCard\n              country={currentCountry}\n              mode={category}\n              statisticValue={currentCountry[category]}\n              isFlippable={false}\n              isClickable={false}\n            />\n          </div>\n        </div>\n      )}\n       {/* Instructions could be added */}\n       {/* <div className=\"game-instructions\"> ... </div> */}\n\n    </div>\n  );\n}\n\nexport default ClassicMode; ","import { realtimeDb } from '../firebase';\nimport { ref, set, update, onValue, off, get } from 'firebase/database';\nimport { fetchCountries } from '../api/countriesApi'; // Import fetchCountries here\n\nconst GAME_STATES_PATH = 'gameStates';\n\n// Helper to get random elements without mutation\nconst getRandomElements = (arr, num) => {\n  if (num > arr.length) {\n    console.warn(\"Requested more elements than available\");\n    num = arr.length;\n  }\n  const shuffled = [...arr].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, num);\n};\n\nexport const cooperationGameService = {\n  // Initialize a new game state for cooperation mode\n  async initializeGameState(lobbyId, players, category = 'population') {\n    // Fetch all countries within the service\n    let allCountries;\n    try {\n      allCountries = await fetchCountries();\n      // Sort countries by the selected category initially\n      // This ensures the initial card and inventory make sense for the category\n      allCountries.sort((a, b) => (a[category] ?? 0) - (b[category] ?? 0)); \n\n      if (!allCountries || allCountries.length < 11) { // Need at least 11\n        throw new Error(`Not enough valid countries fetched to start cooperation mode for category ${category}.`);\n      }\n    } catch (fetchError) {\n      console.error(\"Failed to fetch countries for initialization:\", fetchError);\n      throw new Error(`Could not fetch country data for category ${category} to start the game.`);\n    }\n\n    // Select 11 countries (1 initial + 10 inventory) - Now uses the sorted list\n    const selectedCountries = getRandomElements(allCountries, 11); // Select randomly from category-sorted list\n    const initialCountry = selectedCountries[0];\n    const inventoryCountries = selectedCountries.slice(1).sort((a, b) => 0.5 - Math.random()); // Shuffle inventory\n\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const initialState = {\n      lobbyId: lobbyId, // Store lobbyId for reference\n      category: category, // Store the category\n      currentPlayer: players[0].id, // First player starts\n      players: players,\n      mode: 'choosing', // Start in choosing mode\n      sortedCountries: [initialCountry], // Start with one country sorted\n      remainingCountries: inventoryCountries, // The 10 countries in inventory\n      currentCountry: null, // No country chosen to place yet\n      score: 1, // Started with 1 country sorted\n      status: 'playing',\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    };\n\n    await set(gameStateRef, initialState);\n    console.log(`Initialized ${category} cooperation game state for lobby`, lobbyId);\n    // No need to return initialState, changes propagate via subscription\n  },\n\n  // Subscribe to game state changes\n  subscribeToGameState(lobbyId, callback) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const listener = onValue(gameStateRef, (snapshot) => {\n      const data = snapshot.val();\n      callback(data); // Pass data (or null if deleted) to callback\n    }, (error) => {\n      console.error(\"Error subscribing to game state:\", error);\n      callback(null); // Notify callback of error/disconnection\n    });\n\n    // Return unsubscribe function\n    return () => off(gameStateRef, 'value', listener);\n  },\n\n  // Update game state (internal helper - might not be needed externally anymore)\n  async updateGameState(lobbyId, updates) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    await update(gameStateRef, {\n      ...updates,\n      lastUpdated: Date.now()\n    });\n  },\n\n  // Player chooses a card from the inventory\n  async chooseCard(lobbyId, playerId, chosenCountry) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const snapshot = await get(gameStateRef);\n    const gameState = snapshot.val();\n\n    if (!gameState || gameState.status !== 'playing') {\n      throw new Error('Game is not active or not found');\n    }\n    if (gameState.mode !== 'choosing') {\n      throw new Error('Not in choosing mode');\n    }\n    if (gameState.currentPlayer !== playerId) {\n      throw new Error('Not your turn to choose');\n    }\n    // Verify the chosen country ID exists in the remaining list\n    if (!gameState.remainingCountries || !gameState.remainingCountries.some(c => c.id === chosenCountry.id)) {\n       console.error(\"Chosen country ID not found in remaining:\", chosenCountry?.id, gameState.remainingCountries);\n       throw new Error('Chosen country is not valid or not in the remaining inventory');\n    }\n\n    await update(gameStateRef, {\n      currentCountry: chosenCountry, // Set the chosen country as the one to be placed\n      mode: 'placing', // Switch mode to placing\n      lastUpdated: Date.now()\n    });\n  },\n\n  // Player places the chosen card into the sorted list\n  async placeCard(lobbyId, playerId, placementIndex) {\n    // placementIndex is the index where the player wants to insert the currentCountry\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const snapshot = await get(gameStateRef);\n    const gameState = snapshot.val();\n\n    if (!gameState || gameState.status !== 'playing') {\n      throw new Error('Game is not active or not found');\n    }\n    if (gameState.mode !== 'placing') {\n      throw new Error('Not in placing mode');\n    }\n    if (gameState.currentPlayer !== playerId) {\n      throw new Error('Not your turn to place');\n    }\n    if (!gameState.currentCountry) {\n        throw new Error('No country currently chosen for placement');\n    }\n    if (typeof placementIndex !== 'number' || placementIndex < 0 || placementIndex > gameState.sortedCountries.length) {\n      console.error(\"Invalid placement index received:\", placementIndex, \"Current sorted length:\", gameState.sortedCountries.length);\n      throw new Error('Invalid placement index');\n    }\n    // Get the category from the game state\n    const category = gameState.category || 'population'; // Default to population if somehow missing\n\n    // Construct the potential new sorted list based on the placement index\n    const potentialNewSortedCountries = [...gameState.sortedCountries];\n    potentialNewSortedCountries.splice(placementIndex, 0, gameState.currentCountry);\n\n    // Server-side validation of the placement (using category from gameState)\n    const isCorrect = (countriesList) => {\n      // Check if countriesList is valid before accessing length\n      if (!Array.isArray(countriesList)) {\n        console.error(\"isCorrect received non-array:\", countriesList);\n        return false; // Or handle as appropriate\n      }\n      for (let i = 0; i < countriesList.length - 1; i++) {\n        // Add checks for country objects and the compare property (using category)\n        if (!countriesList[i] || !countriesList[i+1] ||\n            typeof countriesList[i][category] === 'undefined' || // Use category\n            typeof countriesList[i+1][category] === 'undefined' || // Use category\n            countriesList[i][category] > countriesList[i + 1][category]) { // Use category\n          console.warn(`Incorrect order found at index ${i} for category ${category}:`, countriesList[i][category], countriesList[i+1][category]);\n          return false;\n        }\n      }\n      return true;\n    };\n\n    if (isCorrect(potentialNewSortedCountries)) {\n      // Correct Placement\n\n      // --- Start: Added logic to remove placed card from remaining --- \n      // Ensure we have the country that was just placed and the remaining list\n      const placedCountryId = gameState.currentCountry.id;\n      let updatedRemainingCountries = gameState.remainingCountries || [];\n\n      // Filter out the placed country from the remaining list\n      updatedRemainingCountries = updatedRemainingCountries.filter(country => country.id !== placedCountryId);\n      // --- End: Added logic --- \n\n      // Determine the next player correctly, ensuring players array exists\n      let nextPlayerId = gameState.players[0]?.id; // Default to first player if only one or issues\n      if (gameState.players.length > 1) {\n          const currentPlayerIndex = gameState.players.findIndex(p => p.id === playerId);\n          nextPlayerId = gameState.players[(currentPlayerIndex + 1) % gameState.players.length].id;\n      }\n\n      const updates = {\n        currentPlayer: nextPlayerId,\n        sortedCountries: potentialNewSortedCountries, // Update the sorted list\n        remainingCountries: updatedRemainingCountries, // Update the remaining list\n        currentCountry: null, // Clear the placed country\n        mode: 'choosing', // Go back to choosing mode\n        score: gameState.score + 1,\n        lastUpdated: Date.now()\n      };\n\n      // Check for win condition (newly updated inventory empty AND placed correctly)\n      if (updatedRemainingCountries.length === 0) {\n        updates.status = 'completed';\n        updates.result = 'win';\n        updates.mode = 'finished'; // Or some final mode\n      }\n\n      await update(gameStateRef, updates);\n\n    } else {\n      // Incorrect Placement - End Game\n      console.log(`Incorrect placement by ${playerId}. Ending game.`);\n      await this.endGame(lobbyId); // Call endGame directly\n    }\n  },\n\n  // End game (can be called on incorrect placement or explicitly)\n  async endGame(lobbyId) { // No longer needs playerId here if called internally\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    // Check if game exists before updating\n    const snapshot = await get(gameStateRef);\n    if (snapshot.exists() && snapshot.val().status === 'playing') {\n      await update(gameStateRef, {\n        status: 'completed',\n        result: 'lose',\n        mode: 'finished',\n        currentCountry: null, // Ensure no country is stuck in current\n        lastUpdated: Date.now()\n      });\n      console.log(\"Game ended with lose state for lobby:\", lobbyId);\n    } else {\n       console.log(\"Game already completed or does not exist, skipping endGame call for lobby:\", lobbyId);\n    }\n  },\n\n  // Clean up game state\n  async cleanupGameState(lobbyId) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    await set(gameStateRef, null);\n  }\n}; ","import React, { useState, useEffect } from 'react';\r\nimport CountryCard from '../CountryCard'; // Adjusted path\r\nimport '../../pages/GamePage.css'; // Adjusted path\r\nimport { useNavigate } from 'react-router-dom'; // Removed useLocation\r\nimport { useAuth } from '../../contexts/AuthContext'; // Adjusted path\r\nimport { cooperationGameService } from '../../services/cooperationGameService'; // Adjusted path\r\n\r\n// Helper function to capitalize\r\nconst capitalize = (s) => s && s[0].toUpperCase() + s.slice(1);\r\n\r\n// Renamed component, accepts lobbyId and category as props\r\nfunction CooperationMode({ lobbyId, category: categoryProp = 'population' }) { \r\n  const { currentUser } = useAuth();\r\n  const [sortedCountries, setSortedCountries] = useState([]);\r\n  const [currentCountry, setCurrentCountry] = useState(null);\r\n  const [remainingCountries, setRemainingCountries] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameState, setGameState] = useState('waiting'); // waiting, playing, ended\r\n  const [gameStateData, setGameStateData] = useState(null); // Store full game state\r\n  const navigate = useNavigate();\r\n  // Removed location logic\r\n  \r\n  // Determine category primarily from gameStateData once loaded, fallback to prop\r\n  const category = gameStateData?.category || categoryProp;\r\n\r\n  useEffect(() => {\r\n    // Validate lobbyId passed as prop\r\n    if (!lobbyId) { \r\n      console.error(\"CooperationMode requires a lobbyId prop.\");\r\n      // Optionally navigate away or show error\r\n      navigate('/'); \r\n      return;\r\n    }\r\n\r\n    // Subscribe to the game state from Firebase\r\n    const unsubscribe = cooperationGameService.subscribeToGameState(lobbyId, (data) => {\r\n      if (data) {\r\n        setGameStateData(data);\r\n        setScore(data.score !== undefined ? data.score : 0);\r\n        setSortedCountries(data.sortedCountries || []);\r\n        setCurrentCountry(data.currentCountry || null); // The country to be placed\r\n        setRemainingCountries(data.remainingCountries || []);\r\n        setGameState(data.status || 'waiting'); // Use status from DB\r\n        const currentCategory = data.category || 'population'; // Get category from data\r\n\r\n        // Handle game completion based on status from DB\r\n        if (data.status === 'completed') {\r\n           let message = 'Game Over!';\r\n           let finalScore = data.score || 0; // Use score from data\r\n           const messageCategory = currentCategory === 'gini' ? 'Gini index' : capitalize(currentCategory);\r\n\r\n           if (data.result === 'win') {\r\n             message = `Congratulations! You sorted all countries correctly by ${messageCategory}.`;\r\n           } else if (data.result === 'lose') {\r\n             message = `Game Over! An incorrect move was made while sorting by ${messageCategory}.`;\r\n           }\r\n           \r\n           navigate('/gameover', {\r\n              state: { \r\n                score: finalScore, \r\n                message: message,\r\n                category: currentCategory, \r\n                gameMode: `cooperation_${currentCategory}` \r\n              }, \r\n              replace: true\r\n            });\r\n        }\r\n\r\n      } else {\r\n        console.error(\"Game state not found for lobby:\", lobbyId);\r\n        navigate('/'); // Navigate away if game state disappears\r\n      }\r\n    });\r\n\r\n    // Cleanup subscription on unmount\r\n    return () => unsubscribe();\r\n\r\n  }, [lobbyId, navigate, currentUser]); // Dependency is now lobbyId\r\n\r\n  // Handler for when a player chooses a card from the inventory\r\n  const handleChooseCard = async (country) => {\r\n    if (!gameStateData || !currentUser) return;\r\n    if (gameStateData.currentPlayer !== currentUser.uid) return; // Not their turn\r\n    if (gameStateData.mode !== 'choosing') return; // Wrong mode\r\n\r\n    try {\r\n      await cooperationGameService.chooseCard(gameStateData.lobbyId, currentUser.uid, country);\r\n    } catch (error) {\r\n      console.error(\"Error choosing card:\", error);\r\n    }\r\n  };\r\n\r\n  // Handler for placing a card in the sorted list\r\n  const handlePlaceCard = async (index) => {\r\n    if (!gameStateData || !currentUser || !currentCountry) return;\r\n    if (gameStateData.currentPlayer !== currentUser.uid) return; // Not their turn\r\n    if (gameStateData.mode !== 'placing') return; // Wrong mode\r\n\r\n    try {\r\n      await cooperationGameService.placeCard(gameStateData.lobbyId, currentUser.uid, index);\r\n    } catch (error) {\r\n      console.error(\"Error placing card:\", error);\r\n    }\r\n  };\r\n\r\n  // Loading state based on gameStateData instead of separate isLoading flag\r\n  if (!gameStateData || gameState === 'waiting') {\r\n    return <div className=\"game-mode-loading\">Loading Cooperation Game...</div>;\r\n  }\r\n\r\n  const isMyTurn = gameStateData.currentPlayer === currentUser?.uid;\r\n  const currentPlayerName = gameStateData.players?.find(p => p.id === gameStateData.currentPlayer)?.name || 'Unknown';\r\n  const canPlace = gameStateData.mode === 'placing' && isMyTurn && currentCountry;\r\n\r\n  return (\r\n    <div className=\"game-mode cooperation-mode\"> {/* Add specific class */}\r\n      <h2>Cooperation Mode - Sort by {category === 'gini' ? 'Gini Index' : capitalize(category)}</h2>\r\n      <p>Current Turn: {currentPlayerName}</p>\r\n      <p>Score: {score}</p>\r\n\r\n      {/* Display sorted countries */}\r\n      <div className=\"sorted-countries-container\">\r\n        <h3>Sorted Countries:</h3>\r\n        <div className=\"sorted-countries\">\r\n          {canPlace && (\r\n            <button\r\n              className=\"place-button plus-button\"\r\n              onClick={() => handlePlaceCard(0)}\r\n              aria-label=\"Place card at the beginning\"\r\n            >\r\n              +\r\n            </button>\r\n          )}\r\n          {sortedCountries.map((country, index) => (\r\n            <React.Fragment key={`sorted-fragment-${country.id}`}>\r\n              <CountryCard\r\n                country={country}\r\n                mode={category}\r\n                statisticValue={country[category]}\r\n                isFlippable={true}\r\n                isClickable={false}\r\n              />\r\n              {canPlace && (\r\n                <button\r\n                  className=\"place-button plus-button\"\r\n                  onClick={() => handlePlaceCard(index + 1)}\r\n                  aria-label={`Place card after ${country.name}`}\r\n                >\r\n                  +\r\n                </button>\r\n              )}\r\n            </React.Fragment>\r\n          ))}\r\n          {sortedCountries.length === 0 && canPlace && (\r\n             <button\r\n                className=\"place-button plus-button\"\r\n                onClick={() => handlePlaceCard(0)}\r\n                aria-label=\"Place first card\"\r\n             >\r\n               +\r\n             </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Display remaining countries */}\r\n      <div className=\"remaining-countries\">\r\n        <h3>Remaining Countries to Sort: ({remainingCountries.length})</h3>\r\n        <div className=\"remaining-countries-grid\">\r\n          {remainingCountries.map((country) => {\r\n            const isSelectedForPlacing = gameStateData.mode === 'placing' && currentCountry && country.id === currentCountry.id;\r\n            return (\r\n              <CountryCard\r\n                key={`remaining-${country.id}`}\r\n                country={country}\r\n                mode={category}\r\n                statisticValue={country[category]}\r\n                isFlippable={false}\r\n                isClickable={gameStateData.mode === 'choosing' && isMyTurn}\r\n                onClick={() => gameStateData.mode === 'choosing' && isMyTurn && handleChooseCard(country)}\r\n                customClassName={isSelectedForPlacing ? 'selected-for-placing' : ''}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Game instructions */}\r\n      <div className=\"game-instructions\">\r\n        {gameStateData.mode === 'choosing' && (\r\n          isMyTurn ? (\r\n            <p>Choose a country from the remaining countries to place next.</p>\r\n          ) : (\r\n            <p>Waiting for {currentPlayerName} to choose a country...</p>\r\n          )\r\n        )}\r\n        {gameStateData.mode === 'placing' && (\r\n          isMyTurn ? (\r\n            <p>Place {currentCountry?.name} in the correct position based on {category === 'gini' ? 'Gini index' : category}.</p>\r\n          ) : (\r\n            <p>Waiting for {currentPlayerName} to place {currentCountry?.name}...</p>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CooperationMode; ","import { realtimeDb } from '../firebase';\nimport { ref, set, update, onValue, off, get } from 'firebase/database';\nimport { fetchCountries } from '../api/countriesApi'; \n\n// Use a separate path for Battle Royale game states\nconst GAME_STATES_PATH = 'battleRoyaleGameStates'; \n\n// Helper to get random elements without mutation\nconst getRandomElements = (arr, num) => {\n  if (num > arr.length) {\n    console.warn(\"Requested more elements than available\");\n    num = arr.length;\n  }\n  const shuffled = [...arr].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, num);\n};\n\nexport const battleRoyaleGameService = {\n  // Initialize a new game state for battle royale mode\n  async initializeGameState(lobbyId, players, category = 'population') {\n    // Validate player count (2-8)\n    if (players.length < 2 || players.length > 8) {\n      throw new Error('Battle Royale mode requires between 2 and 8 players.');\n    }\n      \n    // Fetch all countries within the service\n    let allCountries;\n    const requiredCountries = 26; // 1 initial + 25 inventory\n    try {\n      allCountries = await fetchCountries();\n      // Sort countries by the selected category initially\n      allCountries.sort((a, b) => (a[category] ?? 0) - (b[category] ?? 0));\n\n      if (!allCountries || allCountries.length < requiredCountries) {\n        throw new Error(`Not enough valid countries fetched to start Battle Royale mode for category ${category}. Need ${requiredCountries}.`);\n      }\n    } catch (fetchError) {\n      console.error(\"Failed to fetch countries for initialization:\", fetchError);\n      throw new Error(`Could not fetch country data for category ${category} to start the game.`);\n    }\n\n    // Select 26 countries (1 initial + 25 inventory) - From category-sorted list\n    const selectedCountries = getRandomElements(allCountries, requiredCountries); \n    const initialCountry = selectedCountries[0];\n    const inventoryCountries = selectedCountries.slice(1).sort((a, b) => 0.5 - Math.random()); // Shuffle inventory\n\n    // Initialize players with active status\n    const initialPlayers = players.map(p => ({ ...p, isActive: true, score: 0 })); // Add isActive flag and individual score\n\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const initialState = {\n      lobbyId: lobbyId, \n      category: category, // Store the category\n      gameType: 'battleRoyale', // Identify the game type\n      currentPlayer: initialPlayers[0].id, // First active player starts\n      players: initialPlayers, \n      activePlayers: initialPlayers.map(p => p.id), // Keep track of active player IDs\n      mode: 'choosing', // Start in choosing mode\n      sortedCountries: [initialCountry], // Start with one country sorted\n      remainingCountries: inventoryCountries, // The 25 countries in inventory\n      currentCountry: null, // No country chosen to place yet\n      // score: 1, // Score is per-player\n      status: 'playing',\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    };\n\n    await set(gameStateRef, initialState);\n    console.log(`Initialized ${category} Battle Royale game state for lobby`, lobbyId, `at path ${GAME_STATES_PATH}/${lobbyId}`);\n  },\n\n  // Subscribe to game state changes (Likely reusable)\n  subscribeToGameState(lobbyId, callback) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const listener = onValue(gameStateRef, (snapshot) => {\n      const data = snapshot.val();\n      callback(data); \n    }, (error) => {\n      console.error(\"Error subscribing to game state:\", error);\n      callback(null); \n    });\n    return () => off(gameStateRef, 'value', listener);\n  },\n\n  // Update game state (Likely reusable)\n  async updateGameState(lobbyId, updates) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    await update(gameStateRef, {\n      ...updates,\n      lastUpdated: Date.now()\n    });\n  },\n\n  // Player chooses a card from the inventory (Likely reusable, maybe add active check)\n  async chooseCard(lobbyId, playerId, chosenCountry) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const snapshot = await get(gameStateRef);\n    const gameState = snapshot.val();\n\n    if (!gameState || gameState.status !== 'playing') throw new Error('Game is not active or not found');\n    if (gameState.mode !== 'choosing') throw new Error('Not in choosing mode');\n    if (gameState.currentPlayer !== playerId) throw new Error('Not your turn to choose');\n    \n    // Ensure the player is active\n    const choosingPlayer = gameState.players.find(p => p.id === playerId);\n    if (!choosingPlayer || !choosingPlayer.isActive) {\n        throw new Error('You have been eliminated from the game.');\n    }\n    \n    if (!gameState.remainingCountries || !gameState.remainingCountries.some(c => c.id === chosenCountry.id)) {\n       console.error(\"Chosen country ID not found in remaining:\", chosenCountry?.id, gameState.remainingCountries);\n       throw new Error('Chosen country is not valid or not in the remaining inventory');\n    }\n\n    await update(gameStateRef, {\n      currentCountry: chosenCountry, \n      mode: 'placing', \n      lastUpdated: Date.now()\n    });\n  },\n  \n  // Helper to find the next active player\n  _findNextActivePlayer(players, currentPlayerId) {\n      const activePlayers = players.filter(p => p.isActive);\n      if (activePlayers.length === 0) return null; // Should not happen if checked before calling\n\n      const currentPlayerIndex = activePlayers.findIndex(p => p.id === currentPlayerId);\n      // If current player not found among active (e.g., just eliminated), or it's the last active player\n      if (currentPlayerIndex === -1 || currentPlayerIndex === activePlayers.length - 1) {\n          return activePlayers[0].id; // Wrap around to the first active player\n      } else {\n          return activePlayers[currentPlayerIndex + 1].id; // Next active player\n      }\n  },\n\n  // Player places the chosen card into the sorted list\n  async placeCard(lobbyId, playerId, placementIndex) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const snapshot = await get(gameStateRef);\n    let gameState = snapshot.val(); // Use 'let' as we might modify it locally before updating DB\n\n    if (!gameState || gameState.status !== 'playing') throw new Error('Game is not active or not found');\n    if (gameState.mode !== 'placing') throw new Error('Not in placing mode');\n    if (gameState.currentPlayer !== playerId) throw new Error('Not your turn to place');\n    if (!gameState.currentCountry) throw new Error('No country currently chosen for placement');\n    \n    // Ensure the player is active\n    const placingPlayer = gameState.players.find(p => p.id === playerId);\n    if (!placingPlayer || !placingPlayer.isActive) {\n        throw new Error('You have been eliminated from the game.');\n    }\n\n    if (typeof placementIndex !== 'number' || placementIndex < 0 || placementIndex > gameState.sortedCountries.length) {\n      console.error(\"Invalid placement index received:\", placementIndex, \"Current sorted length:\", gameState.sortedCountries.length);\n      throw new Error('Invalid placement index');\n    }\n    // Get the category from the game state\n    const category = gameState.category || 'population'; // Default to population if somehow missing\n\n    const potentialNewSortedCountries = [...gameState.sortedCountries];\n    potentialNewSortedCountries.splice(placementIndex, 0, gameState.currentCountry);\n\n    const isCorrect = (countriesList) => {\n      if (!Array.isArray(countriesList)) return false;\n      for (let i = 0; i < countriesList.length - 1; i++) {\n        if (!countriesList[i] || !countriesList[i+1] ||\n            typeof countriesList[i][category] === 'undefined' ||\n            typeof countriesList[i+1][category] === 'undefined' ||\n            countriesList[i][category] > countriesList[i + 1][category]) {\n          console.warn(`Incorrect order found at index ${i} for category ${category}:`, countriesList[i][category], countriesList[i+1][category]);\n          return false;\n        }\n      }\n      return true;\n    };\n    \n    let updates = {};\n    const players = gameState.players; // Get current player list\n    const placedCountryId = gameState.currentCountry.id;\n\n    if (isCorrect(potentialNewSortedCountries)) {\n      // Correct Placement\n      console.log(`Correct placement by ${playerId}.`);\n      \n      // Remove placed card from remaining\n      const updatedRemainingCountries = (gameState.remainingCountries || []).filter(country => country.id !== placedCountryId);\n\n      // Update score for the player who placed correctly\n      const playerIndex = players.findIndex(p => p.id === playerId);\n      if(playerIndex !== -1) {\n          players[playerIndex].score = (players[playerIndex].score || 0) + 1;\n      }\n\n      // Find the next active player\n      const nextPlayerId = this._findNextActivePlayer(players, playerId);\n      \n      updates = {\n        players: players, // Updated scores\n        currentPlayer: nextPlayerId,\n        sortedCountries: potentialNewSortedCountries,\n        remainingCountries: updatedRemainingCountries,\n        currentCountry: null,\n        mode: 'choosing',\n        lastUpdated: Date.now()\n      };\n\n      // Check if inventory is empty (Alternative win condition? Or just continue eliminating?)\n      // For Battle Royale, the game continues until one player is left, regardless of inventory.\n      // So, we don't end the game here based on empty inventory.\n\n    } else {\n      // Incorrect Placement - Eliminate Player\n      console.log(`Incorrect placement by ${playerId}. Eliminating player.`);\n      \n      const playerIndex = players.findIndex(p => p.id === playerId);\n      if (playerIndex !== -1) {\n          players[playerIndex].isActive = false;\n      }\n      \n      const activePlayers = players.filter(p => p.isActive);\n      const activePlayerIds = activePlayers.map(p => p.id);\n\n      if (activePlayers.length <= 1) {\n        // Game Over - Last player standing wins (or draw if 0 left somehow)\n        console.log(\"Battle Royale finished. Winner determined.\");\n        updates = {\n          players: players, // Show final status\n          activePlayers: activePlayerIds,\n          status: 'completed',\n          mode: 'finished',\n          result: activePlayers.length === 1 ? activePlayers[0].id : 'draw', // Store winner ID or 'draw'\n          winner: activePlayers.length === 1 ? activePlayers[0] : null, // Store full winner object\n          currentCountry: null, // Clear any chosen country\n          lastUpdated: Date.now()\n        };\n      } else {\n        // Game Continues - Find next active player\n        const nextPlayerId = this._findNextActivePlayer(players, playerId); // Find next player *after* elimination\n        \n        // Incorrectly placed card is discarded, player doesn't get another turn immediately.\n        // Remove the incorrectly placed card from the remaining inventory.\n        const updatedRemainingCountries = (gameState.remainingCountries || []).filter(country => country.id !== placedCountryId);\n\n        updates = {\n          players: players, // Updated player statuses\n          activePlayers: activePlayerIds,\n          currentPlayer: nextPlayerId,\n          currentCountry: null, // Clear the incorrectly placed country\n          remainingCountries: updatedRemainingCountries, // Remove the card\n          mode: 'choosing', // Next player starts by choosing\n          lastUpdated: Date.now()\n        };\n      }\n    }\n\n    await update(gameStateRef, updates);\n  },\n\n  // End game (Handles win condition based on elimination)\n  // This might not be explicitly called anymore, as placeCard handles the logic.\n  // Kept for potential manual ending or cleanup.\n  async endGame(lobbyId, winnerId = null) { \n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    const snapshot = await get(gameStateRef);\n    if (snapshot.exists()) {\n       const gameState = snapshot.val();\n       if (gameState.status === 'playing') {\n           const winner = gameState.players.find(p => p.id === winnerId);\n           await update(gameStateRef, {\n               status: 'completed',\n               result: winnerId || 'ended', // Store winner ID or generic 'ended'\n               winner: winner || null,\n               mode: 'finished',\n               currentCountry: null, \n               lastUpdated: Date.now()\n           });\n           console.log(`Battle Royale game ended. Winner: ${winnerId || 'N/A'}`);\n       } else {\n           console.log(\"Game already completed, skipping endGame call.\");\n       }\n    } else {\n       console.log(\"Game state not found, cannot end game for lobby:\", lobbyId);\n    }\n  },\n\n  // Clean up game state (Likely reusable)\n  async cleanupGameState(lobbyId) {\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\n    await set(gameStateRef, null);\n    console.log(\"Cleaned up Battle Royale game state for lobby:\", lobbyId);\n  }\n}; ","import React, { useState, useEffect } from 'react';\r\nimport CountryCard from '../CountryCard'; // Adjusted path\r\nimport '../../pages/GamePage.css'; // Adjusted path\r\nimport { useNavigate } from 'react-router-dom'; // Removed useLocation\r\nimport { useAuth } from '../../contexts/AuthContext'; // Adjusted path\r\nimport { battleRoyaleGameService } from '../../services/battleRoyaleGameService'; // Adjusted path\r\n\r\n// Helper function to capitalize\r\nconst capitalize = (s) => s && s[0].toUpperCase() + s.slice(1);\r\n\r\n// Renamed component, accepts lobbyId and category as props\r\nfunction BattleRoyaleMode({ lobbyId, category: categoryProp = 'population' }) {\r\n  const { currentUser } = useAuth();\r\n  const [sortedCountries, setSortedCountries] = useState([]);\r\n  const [currentCountry, setCurrentCountry] = useState(null);\r\n  const [remainingCountries, setRemainingCountries] = useState([]);\r\n  const [gameState, setGameState] = useState('waiting'); // waiting, playing, completed\r\n  const [gameStateData, setGameStateData] = useState(null); // Store full game state\r\n  const navigate = useNavigate();\r\n  // Removed location logic\r\n\r\n  // Determine category primarily from gameStateData once loaded, fallback to prop\r\n  const category = gameStateData?.category || categoryProp;\r\n\r\n  useEffect(() => {\r\n    // Validate lobbyId passed as prop\r\n    if (!lobbyId) {\r\n      console.error(\"BattleRoyaleMode requires a lobbyId prop.\");\r\n      navigate('/'); \r\n      return;\r\n    }\r\n\r\n    // Subscribe to the game state using the Battle Royale service\r\n    const unsubscribe = battleRoyaleGameService.subscribeToGameState(lobbyId, (data) => {\r\n      if (data) {\r\n        setGameStateData(data);\r\n        setSortedCountries(data.sortedCountries || []);\r\n        setCurrentCountry(data.currentCountry || null);\r\n        setRemainingCountries(data.remainingCountries || []);\r\n        setGameState(data.status || 'waiting');\r\n        const currentCategory = data.category || 'population'; // Get category from data\r\n\r\n        // Handle game completion for Battle Royale\r\n        if (data.status === 'completed') {\r\n           let message = 'Battle Royale Over!';\r\n           let winnerName = 'N/A';\r\n           let winnerScore = 0;\r\n\r\n           if (data.winner) { // Check if there is a winner object\r\n               winnerName = data.winner.name;\r\n               winnerScore = data.winner.score || 0;\r\n               message = `${winnerName} is the last one standing!`;\r\n           } else if (data.result === 'draw') {\r\n               message = 'The Battle Royale ended in a draw!';\r\n           }\r\n\r\n           navigate('/gameover', { \r\n              state: { \r\n                score: winnerScore, \r\n                message: message,\r\n                winnerName: winnerName, \r\n                category: currentCategory, \r\n                gameMode: `battleRoyale_${currentCategory}`, \r\n                finalPlayersState: data.players \r\n              }, \r\n              replace: true \r\n            });\r\n        }\r\n      } else {\r\n        console.error(\"Game state not found for lobby:\", lobbyId);\r\n        navigate('/'); \r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n\r\n  }, [lobbyId, navigate]); // Dependency is now lobbyId\r\n\r\n  // Handler for choosing a card \r\n  const handleChooseCard = async (country) => {\r\n    if (!gameStateData || !currentUser) return;\r\n    if (gameStateData.currentPlayer !== currentUser.uid) return; \r\n    if (gameStateData.mode !== 'choosing') return; \r\n    \r\n    const me = gameStateData.players.find(p => p.id === currentUser.uid);\r\n    if (!me || !me.isActive) {\r\n        console.log(\"Cannot choose card, you are eliminated.\");\r\n        return; \r\n    }\r\n\r\n    try {\r\n      await battleRoyaleGameService.chooseCard(gameStateData.lobbyId, currentUser.uid, country);\r\n    } catch (error) {\r\n      console.error(\"Error choosing card:\", error);\r\n    }\r\n  };\r\n\r\n  // Handler for placing a card \r\n  const handlePlaceCard = async (index) => {\r\n    if (!gameStateData || !currentUser || !currentCountry) return;\r\n    if (gameStateData.currentPlayer !== currentUser.uid) return; \r\n    if (gameStateData.mode !== 'placing') return; \r\n\r\n    const me = gameStateData.players.find(p => p.id === currentUser.uid);\r\n    if (!me || !me.isActive) {\r\n        console.log(\"Cannot place card, you are eliminated.\");\r\n        return; \r\n    }\r\n\r\n    try {\r\n      await battleRoyaleGameService.placeCard(gameStateData.lobbyId, currentUser.uid, index);\r\n    } catch (error) {\r\n      console.error(\"Error placing card:\", error);\r\n    }\r\n  };\r\n\r\n  if (!gameStateData || gameState === 'waiting') {\r\n    return <div className=\"game-mode-loading\">Loading Battle Royale...</div>;\r\n  }\r\n\r\n  const myPlayerState = gameStateData.players?.find(p => p.id === currentUser?.uid);\r\n  const isMyTurn = gameStateData.currentPlayer === currentUser?.uid && myPlayerState?.isActive;\r\n  const amIActive = myPlayerState?.isActive;\r\n  \r\n  const currentPlayer = gameStateData.players?.find(p => p.id === gameStateData.currentPlayer);\r\n  const currentPlayerName = currentPlayer?.name || 'Unknown';\r\n  \r\n  const canChoose = gameStateData.mode === 'choosing' && isMyTurn;\r\n  const canPlace = gameStateData.mode === 'placing' && isMyTurn && currentCountry;\r\n\r\n  return (\r\n    <div className={`game-mode battle-royale-mode ${!amIActive ? 'eliminated' : ''}`}> {/* Added base class */}\r\n      <h2>Battle Royale - {category === 'gini' ? 'Gini Index' : capitalize(category)}</h2>\r\n      {/* Player status */}\r\n      <div className=\"player-status-container\">\r\n        <h3>Players:</h3>\r\n        <ul>\r\n          {gameStateData.players?.map(p => (\r\n            <li key={p.id} className={`${!p.isActive ? 'eliminated-player' : ''} ${p.id === gameStateData.currentPlayer ? 'current-turn' : ''}`}>\r\n              {p.name} {p.id === currentUser?.uid ? '(You)' : ''} - Score: {p.score || 0} {!p.isActive ? '(Eliminated)' : ''}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      \r\n      {!amIActive && <p className=\"eliminated-message\">You have been eliminated!</p>}\r\n      \r\n      <p>Current Turn: {currentPlayerName} {gameStateData.currentPlayer === currentUser?.uid ? '(Your Turn)' : ''}</p>\r\n\r\n      {/* Sorted Countries */}\r\n      <div className=\"sorted-countries-container\">\r\n        <h3>Sorted Countries: ({sortedCountries.length})</h3>\r\n        <div className=\"sorted-countries\">\r\n          {canPlace && (\r\n            <button\r\n              className=\"place-button plus-button\"\r\n              onClick={() => handlePlaceCard(0)}\r\n              aria-label=\"Place card at the beginning\"\r\n              disabled={!amIActive} \r\n            >\r\n              +\r\n            </button>\r\n          )}\r\n          {sortedCountries.map((country, index) => (\r\n            <React.Fragment key={`sorted-fragment-${country.id}`}>\r\n              <CountryCard\r\n                country={country}\r\n                mode={category}\r\n                statisticValue={country[category]}\r\n                isFlippable={true}\r\n                isClickable={false}\r\n              />\r\n              {canPlace && (\r\n                <button\r\n                  className=\"place-button plus-button\"\r\n                  onClick={() => handlePlaceCard(index + 1)}\r\n                  aria-label={`Place card after ${country.name}`}\r\n                  disabled={!amIActive} \r\n                >\r\n                  +\r\n                </button>\r\n              )}\r\n            </React.Fragment>\r\n          ))}\r\n          {sortedCountries.length === 0 && canPlace && (\r\n             <button\r\n                className=\"place-button plus-button\"\r\n                onClick={() => handlePlaceCard(0)}\r\n                aria-label=\"Place first card\"\r\n                disabled={!amIActive} \r\n             >\r\n               +\r\n             </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Remaining Countries (Inventory) */}\r\n      <div className=\"remaining-countries\">\r\n        <h3>Remaining Countries: ({remainingCountries.length})</h3>\r\n        <div className=\"remaining-countries-grid\">\r\n          {remainingCountries.map((country) => {\r\n            const isSelectedForPlacing = gameStateData.mode === 'placing' && currentCountry && country.id === currentCountry.id;\r\n            return (\r\n              <CountryCard\r\n                key={`remaining-${country.id}`}\r\n                country={country}\r\n                mode={category}\r\n                statisticValue={country[category]}\r\n                isFlippable={false}\r\n                isClickable={canChoose}\r\n                onClick={() => canChoose && handleChooseCard(country)}\r\n                customClassName={`${isSelectedForPlacing ? 'selected-for-placing' : ''} ${!amIActive ? 'disabled-card' : ''}`}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Game Instructions */}\r\n      <div className=\"game-instructions\">\r\n        {amIActive && gameStateData.mode === 'choosing' && (\r\n          isMyTurn ? (\r\n            <p>Choose a country to place next.</p>\r\n          ) : (\r\n            <p>Waiting for {currentPlayerName} to choose...</p>\r\n          )\r\n        )}\r\n        {amIActive && gameStateData.mode === 'placing' && (\r\n          isMyTurn ? (\r\n            <p>Place {currentCountry?.name} in the correct position based on {category === 'gini' ? 'Gini index' : category}.</p>\r\n          ) : (\r\n            <p>Waiting for {currentPlayerName} to place {currentCountry?.name}...</p>\r\n          )\r\n        )}\r\n        {!amIActive && gameState !== 'completed' && (\r\n            <p>Waiting for the remaining players...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BattleRoyaleMode; ","// src/pages/GamePage.js\n\nimport React from 'react';\nimport { useParams, Navigate, useLocation } from 'react-router-dom';\n\n// Import the reusable game mode components\nimport ClassicMode from '../components/Game/ClassicMode';\nimport CooperationMode from '../components/Game/CooperationMode';\nimport BattleRoyaleMode from '../components/Game/BattleRoyaleMode';\nimport './GamePage.css'; // Assuming common styles\n\n// List of valid categories and modes\nconst VALID_CATEGORIES = ['population', 'area', 'gini'];\n// Mode names should match component names (lowercase)\nconst VALID_MODES = ['classic', 'cooperation', 'battleroyale'];\n\nfunction UnifiedGamePage() {\n  const { category, mode } = useParams();\n  const location = useLocation(); // Needed for Coop/BR lobbyId\n\n  // --- Validation ---\n  const isValidCategory = VALID_CATEGORIES.includes(category?.toLowerCase());\n  const isValidMode = VALID_MODES.includes(mode?.toLowerCase());\n\n  if (!isValidCategory || !isValidMode) {\n    console.error(`Invalid category (${category}) or mode (${mode}) accessed.`);\n    // Redirect to home page or show a 404 component\n    return <Navigate to=\"/\" replace />;\n  }\n  \n  // Multiplayer modes require lobbyId from location state\n  const lobbyId = location.state?.lobbyId;\n  if ((mode === 'cooperation' || mode === 'battleroyale') && !lobbyId) {\n      console.error(`${mode} mode requires a lobbyId in location state.`);\n      // Redirect or show an error message specific to needing a lobby\n      // Might redirect to a lobby page or home\n      return <Navigate to=\"/\" replace state={{ error: \"Lobby ID missing for multiplayer game.\"}} />;\n  }\n\n  // --- Component Rendering ---\n  const renderGameMode = () => {\n    switch (mode.toLowerCase()) {\n      case 'classic':\n        // Classic mode only needs the category\n        return <ClassicMode category={category} />;\n      case 'cooperation':\n        // Cooperation mode needs category and lobbyId\n        return <CooperationMode category={category} lobbyId={lobbyId} />;\n      case 'battleroyale':\n        // Battle Royale mode needs category and lobbyId\n        return <BattleRoyaleMode category={category} lobbyId={lobbyId} />;\n      default:\n        // This case should ideally be caught by validation, but acts as a fallback\n        console.error('Reached default case in renderGameMode - should not happen!');\n        return <Navigate to=\"/\" replace />;\n    }\n  };\n\n  return (\n    <div className=\"game-page-container\"> \n      {/* This container can hold styles common to all game pages */}\n      {renderGameMode()}\n    </div>\n  );\n}\n\nexport default UnifiedGamePage;\n","// src/api/leaderboardApi.js\n\n// Use localStorage for simplicity, replace with backend API calls in production\nconst LEADERBOARD_KEY_PREFIX = 'sortly_leaderboard_'; // Use a prefix for category-specific keys\n\n// Submit score for a specific category, optionally link to game history\nexport const submitScore = (playerName, score, category, gameHistoryId = null) => {\n  if (!category || typeof category !== 'string') {\n    console.error(\"Invalid category provided to submitScore:\", category);\n    return null;\n  }\n  const leaderboardKey = `${LEADERBOARD_KEY_PREFIX}${category.toLowerCase()}`;\n  const leaderboard = getLeaderboard(category); // Get the specific category leaderboard\n  const newEntry = {\n    id: Date.now(), // Simple ID, consider UUID in production\n    playerName,\n    score,\n    // Removed 'mode', using category-specific storage\n    date: new Date().toISOString(),\n    gameHistoryId: gameHistoryId, // Link to detailed game history entry ID if provided\n  };\n\n  leaderboard.push(newEntry);\n  // Sort by score (descending)\n  leaderboard.sort((a, b) => b.score - a.score);\n  // Keep only top N entries (e.g., top 100)\n  const topEntries = leaderboard.slice(0, 100);\n\n  try {\n      localStorage.setItem(leaderboardKey, JSON.stringify(topEntries));\n      console.log(`Score submitted to ${leaderboardKey}`, newEntry);\n      return newEntry;\n  } catch (error) {\n      console.error(`Error saving leaderboard to localStorage for ${category}:`, error);\n      // Handle potential storage limits or errors\n      return null;\n  }\n\n};\n\n// Get all entries for a specific category leaderboard\nexport const getLeaderboard = (category) => {\n  if (!category || typeof category !== 'string') {\n    console.error(\"Invalid category provided to getLeaderboard:\", category);\n    return [];\n  }\n  const leaderboardKey = `${LEADERBOARD_KEY_PREFIX}${category.toLowerCase()}`;\n  try {\n      const storedData = localStorage.getItem(leaderboardKey);\n      return JSON.parse(storedData || '[]');\n  } catch (error) {\n      console.error(`Error reading leaderboard from localStorage for ${category}:`, error);\n      return [];\n  }\n};\n\n// Get top N scores for a specific category\nexport const getTopScores = (category, limit = 5) => { // Default limit to 5\n  if (!category || typeof category !== 'string') {\n    console.error(\"Invalid category provided to getTopScores:\", category);\n    return [];\n  }\n  const leaderboard = getLeaderboard(category);\n  // Already sorted by getLeaderboard (or submitScore implicitly sorts)\n  return leaderboard.slice(0, limit);\n}; ","import { db } from '../firebase';\nimport { collection, query, where, orderBy, limit as firestoreLimit, getDocs, addDoc, serverTimestamp, doc, getDoc } from 'firebase/firestore';\n\nconst GAME_HISTORY_COLLECTION = 'gameHistory';\nconst CATEGORIES = ['population', 'area', 'gini'];\n\nexport const gameHistoryService = {\n  async getTopGames(userId, category, mode = 'classic', limitCount = 5) {\n    try {\n      console.log(`Fetching top games for: userId=${userId}, category=${category}, mode=${mode}, limit=${limitCount}`);\n      const gamesRef = collection(db, GAME_HISTORY_COLLECTION);\n      const q = query(\n        gamesRef,\n        where('userId', '==', userId),\n        where('category', '==', category),\n        where('mode', '==', mode),\n        orderBy('score', 'desc'),\n        firestoreLimit(limitCount)\n      );\n\n      const querySnapshot = await getDocs(q);\n      const games = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log(\"Fetched games:\", games);\n      return games;\n    } catch (error) {\n      console.error(\"Error fetching top games, attempting fallback:\", error);\n      // Fallback might be less efficient and might not work if index is required\n      // Consider warning the user or simplifying the fallback\n      try {\n          const qFallback = query(\n            collection(db, GAME_HISTORY_COLLECTION),\n            where('userId', '==', userId),\n            where('category', '==', category),\n            where('mode', '==', mode)\n          );\n          const querySnapshotFallback = await getDocs(qFallback);\n          const gamesFallback = querySnapshotFallback.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n          // Sort in memory and limit\n          const sortedGames = gamesFallback.sort((a, b) => b.score - a.score).slice(0, limitCount);\n          console.log(\"Fetched games (fallback):\", sortedGames);\n          return sortedGames;\n      } catch (fallbackError) {\n          console.error(\"Fallback fetch also failed:\", fallbackError);\n          throw fallbackError; // Re-throw the error after logging\n      }\n    }\n  },\n\n  async getAllTopGames(userId) {\n    try {\n      const topGames = {};\n      await Promise.all(\n        CATEGORIES.map(async category => {\n          topGames[category] = await this.getTopGames(userId, category);\n        })\n      );\n      return topGames;\n    } catch (error) {\n      console.error('Error fetching all top games:', error);\n      return {};\n    }\n  },\n\n  async getGameDetails(gameId) {\n    try {\n        const docRef = doc(db, GAME_HISTORY_COLLECTION, gameId);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n            console.log(\"Fetched game details for ID:\", gameId, docSnap.data());\n            return { id: docSnap.id, ...docSnap.data() };\n        } else {\n            console.log(\"No such game document!\", gameId);\n            return null; // Indicate game not found\n        }\n    } catch (error) {\n        console.error(\"Error getting game details:\", error);\n        throw error;\n    }\n  },\n\n  async saveGame(userId, category, mode, score, userAttemptList, correctlySortedList, incorrectCountry) {\n    try {\n      // Minimal payload for general game history (like user's attempt)\n      const minimalUserAttempt = userAttemptList\n        ? userAttemptList.map(({ id, name, flagUrl, ...rest }) => ({ // Include stat used for sorting\n            id,\n            name,\n            flagUrl,\n            value: rest[category] // Store the actual value used for sorting\n          }))\n        : null;\n\n      // Specific data for classic mode review\n       const minimalCorrectlySorted = mode === 'classic' && correctlySortedList\n        ? correctlySortedList.map(({ id, name, flagUrl, ...rest }) => ({ // Include stat\n            id,\n            name,\n            flagUrl,\n            value: rest[category]\n          }))\n        : null;\n\n       const minimalIncorrectCountry = mode === 'classic' && incorrectCountry\n        ? { // Include stat\n            id: incorrectCountry.id,\n            name: incorrectCountry.name,\n            flagUrl: incorrectCountry.flagUrl,\n            value: incorrectCountry[category]\n          }\n        : null;\n\n      const docData = {\n        userId,\n        category,\n        mode, // Save the game mode ('classic', 'cooperation', etc.)\n        score,\n        userAttemptList: minimalUserAttempt, // List user provided (includes incorrect item)\n        correctlySortedList: minimalCorrectlySorted, // List before the mistake (classic only)\n        incorrectCountry: minimalIncorrectCountry, // The country placed incorrectly (classic only)\n        timestamp: serverTimestamp()\n      };\n\n      // Remove null fields before saving to Firestore if desired\n      Object.keys(docData).forEach(key => {\n          if (docData[key] === null) {\n              delete docData[key];\n          }\n      });\n\n      const docRef = await addDoc(collection(db, GAME_HISTORY_COLLECTION), docData);\n      console.log(\"Game history saved with ID:\", docRef.id, \"Data:\", docData);\n      return docRef.id;\n    } catch (error) {\n      console.error('Error saving game history:', error);\n      throw error;\n    }\n  }\n}; ","// src/pages/GameOverPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport CountryCard from '../components/CountryCard';\nimport { submitScore } from '../api/leaderboardApi';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport { userProfileService } from '../services/userProfileService';\nimport { useAuth } from '../contexts/AuthContext';\nimport { capitalize } from '../utils/stringUtils'; // Corrected import path\nimport './GameOverPage.css';\nimport '../components/Buttons.css';\n\n// Helper function to parse category and mode\nconst parseGameMode = (modeString) => {\n  if (!modeString || typeof modeString !== 'string') return { mode: 'unknown', category: 'unknown' };\n  const parts = modeString.split('_');\n  if (parts.length === 2) {\n    // Handle potential mode name changes if needed (e.g., battleRoyale)\n    const mode = parts[0].toLowerCase(); \n    const category = parts[1].toLowerCase();\n    return { mode, category };\n  } else if (parts.length === 1) {\n    // Fallback for older/simpler modes if necessary?\n    return { mode: parts[0].toLowerCase(), category: 'unknown' }; // Or maybe default to population?\n  } \n  return { mode: 'unknown', category: 'unknown' };\n};\n\nfunction GameOverPage() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  \n  const { \n    score = 0, \n    message = 'Game Over!', \n    gameMode: gameModeString = 'unknown', // Get the combined string\n    // Classic mode specific:\n    incorrectCountry, \n    userOrder, \n    finalSortedList, // The correctly sorted list *before* the mistake\n    // Battle Royale specific:\n    winnerName, \n    finalPlayersState \n  } = location.state || {};\n\n  // Parse the mode and category from the combined string\n  const { mode, category } = parseGameMode(gameModeString);\n\n  const [playerName, setPlayerName] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState('');\n  const [savedGameId, setSavedGameId] = useState(null); // Store the ID from gameHistoryService\n  const hasAttemptedSave = useRef(false); // Track if save attempt was made\n\n  // Fetch user profile for potential nickname\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (currentUser) {\n        try {\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\n          if (profile?.nickname) {\n            setPlayerName(profile.nickname);\n          }\n        } catch (err) {\n          console.error('Error fetching user profile:', err);\n        }\n      }\n    };\n    fetchUserProfile();\n  }, [currentUser]);\n\n  // Save game history automatically when the component mounts and data is available\n  useEffect(() => {\n    const saveGameHistory = async () => {\n      // Only run if logged in, data is present, category/mode are known, and save hasn't been attempted\n      if (!currentUser || hasAttemptedSave.current || category === 'unknown' || mode === 'unknown') {\n          if (!currentUser) console.log(\"Save skipped: No user logged in.\");\n          if (hasAttemptedSave.current) console.log(\"Save skipped: Already attempted.\");\n          if (category === 'unknown' || mode === 'unknown') console.log(\"Save skipped: Unknown category or mode.\");\n          return;\n      }\n\n      hasAttemptedSave.current = true; // Mark that we are attempting the save\n      console.log(\"Attempting to save game history...\");\n\n      let historyScore = 0;\n      let historyDataPayload = null; // For the user's attempt list or BR state\n      let correctlySortedForSave = null; // For classic mode: the list before mistake\n      let incorrectCountryForSave = null; // For classic mode: the wrongly placed country\n\n      if (mode === 'classic' || mode === 'cooperation') {\n        historyScore = score > 0 ? score - 1 : 0;\n        // User's final order (payload)\n        if (userOrder) {\n          historyDataPayload = userOrder.map(country => ({\n            id: country.id,\n            name: country.name,\n            flagUrl: country.flagUrl,\n            [category]: country[category]\n          }));\n        }\n        // Classic specific data\n        if (mode === 'classic') {\n          if (finalSortedList) { // Use finalSortedList passed from ClassicMode\n            correctlySortedForSave = finalSortedList.map(c => ({\n              id: c.id, name: c.name, flagUrl: c.flagUrl, [category]: c[category]\n            }));\n          }\n          if (incorrectCountry) {\n            incorrectCountryForSave = {\n              id: incorrectCountry.id,\n              name: incorrectCountry.name,\n              flagUrl: incorrectCountry.flagUrl,\n              [category]: incorrectCountry[category]\n            };\n          }\n        }\n      } else if (mode === 'battleroyale') {\n        historyScore = score;\n        if (finalPlayersState) {\n          historyDataPayload = finalPlayersState.map(p => ({\n            name: p.name, score: p.score, isActive: p.isActive\n          }));\n        }\n      } else {\n          console.log(\"Save skipped: Unrecognized game mode:\", mode);\n          return; // Don't save if mode isn't recognized\n      }\n\n      // Save only if score > 0 or we have meaningful data (like BR state)\n      if (historyScore > 0 || (historyDataPayload && historyDataPayload.length > 0)) {\n        try {\n          console.log('Calling gameHistoryService.saveGame with:', { userId: currentUser.uid, category, mode, historyScore /* payload details omitted for brevity */ });\n          const gameId = await gameHistoryService.saveGame(\n            currentUser.uid,\n            category,\n            mode,\n            historyScore,\n            historyDataPayload, // Pass the user's attempt list or BR state\n            correctlySortedForSave, // Pass classic mode's correct list (before mistake)\n            incorrectCountryForSave // Pass classic mode's incorrect country\n          );\n          setSavedGameId(gameId); // Store the returned ID\n          console.log('Game history saved successfully with ID:', gameId);\n        } catch (err) {\n          console.error('Error saving game history:', err);\n          setError('Failed to save game details. Score submission may not link correctly.');\n          // Still allow score submission, just won't be linked\n        }\n      } else {\n        console.log('Skipping game history save: Score is zero and no other data to save.');\n      }\n    };\n\n    saveGameHistory();\n    // Dependencies: Ensure all relevant state pieces trigger this effect appropriately.\n  }, [currentUser, mode, category, score, userOrder, finalSortedList, incorrectCountry, finalPlayersState]);\n\n  // Handle score submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!playerName.trim()) {\n      setError('Please enter your name');\n      return;\n    }\n\n    let submitScoreValue = 0;\n    if (mode === 'classic' || mode === 'cooperation') {\n      submitScoreValue = score > 0 ? score - 1 : 0;\n    } else if (mode === 'battleroyale') {\n      submitScoreValue = score;\n    }\n\n    if (submitScoreValue <= 0) {\n      setError('Only scores greater than 0 can be submitted.');\n      return;\n    }\n    if (category === 'unknown') {\n      setError('Cannot submit score for unknown category.');\n      return;\n    }\n\n    try {\n      // Pass category and the savedGameId (if available) to submitScore API\n      console.log(`Submitting score: ${playerName}, ${submitScoreValue}, ${category}, History ID: ${savedGameId}`);\n      const submissionResult = submitScore(playerName, submitScoreValue, category, savedGameId);\n      if (submissionResult) {\n          setIsSubmitted(true);\n          setError('');\n      } else {\n          setError('Failed to submit score (API error). Please try again.');\n      }\n    } catch (err) {\n        console.error(\"Error during score submission:\", err);\n      setError('Failed to submit score. Please try again.');\n    }\n  };\n\n  // Function to determine the correct path for \"Play Again\"\n  const getPlayAgainPath = () => {\n    if (category === 'unknown' || mode === 'unknown') return '/';\n    \n    // Use parsed mode and category to construct path\n    if (mode === 'classic') {\n      return `/game/${category}/classic`;\n    } else if (mode === 'cooperation') {\n      return `/game/${category}/cooperation`; // Link back to lobby\n    } else if (mode === 'battleroyale') {\n      return `/game/${category}/battleroyale`; // Link back to lobby\n    } else {\n      return '/'; \n    }\n  };\n\n  // Determine score display text based on mode\n  const getScoreDisplay = () => {\n    // Use parsed mode\n    if (mode === 'classic' || mode === 'cooperation') {\n      return `Your final score: ${score > 0 ? score - 1 : 0}`;\n    } else if (mode === 'battleroyale') {\n      return winnerName ? `${winnerName}'s winning score: ${score}` : `Final Score: ${score}`;\n    } else {\n      return `Final Score: ${score}`;\n    }\n  };\n\n  return (\n    <div className={`game-over-page game-over-${mode}-${category}`}> {/* Add mode and category class */}\n      <h2>Game Over</h2>\n      <p>{message}</p>\n      <p>{getScoreDisplay()}</p>\n\n      {/* Display final player standings for Battle Royale (uses parsed mode) */}\n      {mode === 'battleroyale' && finalPlayersState && (\n        <div className=\"final-player-standings\">\n          <h3>Final Standings:</h3>\n          <ul>\n            {finalPlayersState.sort((a, b) => (b.score || 0) - (a.score || 0)).map(player => (\n              <li key={player.id || player.name} className={!player.isActive ? 'eliminated-player' : ''}>\n                {player.name}: {player.score || 0} points {!player.isActive ? '(Eliminated)' : ''}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Score Submission Form (uses parsed mode) */}\n      {!isSubmitted && (mode === 'classic' || mode === 'cooperation' || (mode === 'battleroyale' && score > 0)) && (\n        <form onSubmit={handleSubmit} className=\"score-submission\">\n          <div className=\"input-group\">\n            <label htmlFor=\"playerName\">Enter your name for Leaderboard:</label>\n            <input\n              type=\"text\"\n              id=\"playerName\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              placeholder=\"Your name\"\n              maxLength={20}\n              disabled={!currentUser} // Disable if not logged in?\n            />\n          </div>\n          {!currentUser && <p className=\"info-text\">Log in to save game details and submit scores!</p>}\n          {error && <p className=\"error\">{error}</p>}\n          <button type=\"submit\" className=\"button button-primary\" disabled={!currentUser || !playerName.trim() || !hasAttemptedSave.current}>\n            Submit Score\n          </button>\n        </form>\n      )}\n      {isSubmitted && (\n        <div className=\"submission-success\">\n          <p>Score submitted successfully!</p>\n        </div>\n      )}\n\n      {/* Display for Classic Mode incorrect placement (uses parsed mode/category) */}\n      {mode === 'classic' && userOrder && incorrectCountry && (\n        <div className=\"user-order\">\n          {/* This shows the order the user *attempted* including the wrong one */}\n          <h3>Your final attempt ({category === 'gini' ? 'Gini' : capitalize(category)}):</h3>\n          <div className=\"country-list\">\n            {userOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={false}\n                // Highlight the one they got wrong in their attempt\n                highlight={country.id === incorrectCountry.id ? 'incorrect' : ''}\n                mode={category} // Pass parsed category\n                statisticValue={country[category]} // Show stat\n                isFlippable={true} // Allow flipping to see stat\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      {/* Show the correct order up until the mistake */}\n      {mode === 'classic' && finalSortedList && incorrectCountry && (\n        <div className=\"correct-order-display\">\n            {/* This shows the list *before* the mistake */}\n          <h3>Correctly sorted before mistake:</h3>\n           <div className=\"country-list\">\n            {finalSortedList.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={false}\n                highlight={'correct'} // Mark all these as correct\n                mode={category} // Pass parsed category\n                statisticValue={country[category]} // Show stat\n                isFlippable={true}\n              />\n            ))}\n             {/* Optionally indicate where the incorrect one *should* have gone,\n                 or just show the incorrect one separately */}\n             <p style={{textAlign: 'center', width: '100%', margin: '10px 0'}}>...then you incorrectly placed:</p>\n             <div className=\"country-list\" style={{justifyContent: 'center'}}>\n                 <CountryCard\n                    key={incorrectCountry.id}\n                    country={incorrectCountry}\n                    isClickable={false}\n                    highlight={'incorrect-standalone'} // Special highlight maybe?\n                    mode={category}\n                    statisticValue={incorrectCountry[category]}\n                    isFlippable={true}\n                 />\n             </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"navigation-buttons\">\n        <button \n            onClick={() => navigate(getPlayAgainPath())} \n            className=\"button button-secondary\"\n        >\n          Play Again\n        </button>\n        <button onClick={() => navigate('/')} className=\"button button-secondary\">\n          Go Home\n        </button>\n        <button onClick={() => navigate('/leaderboard')} className=\"button button-secondary\">\n          Leaderboard\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameOverPage;\n","/**\r\n * Formats a timestamp or date string into a readable format (e.g., \"Oct 27, 2023\").\r\n * Handles both Firebase Timestamp objects and ISO date strings.\r\n * @param {object|string} dateInput - The Firebase Timestamp object or ISO date string.\r\n * @returns {string|null} The formatted date string, or null if input is invalid.\r\n */\r\nexport const formatDate = (dateInput) => {\r\n  try {\r\n    let dateObject = null;\r\n\r\n    // Check if it's likely a Firebase Timestamp (has toDate method)\r\n    if (dateInput && typeof dateInput.toDate === 'function') {\r\n      dateObject = dateInput.toDate();\r\n    }\r\n    // Check if it's a string (likely an ISO string from localStorage)\r\n    else if (typeof dateInput === 'string') {\r\n      dateObject = new Date(dateInput);\r\n      // Check if the parsed date is valid\r\n      if (isNaN(dateObject.getTime())) {\r\n          console.warn(\"formatDate received an invalid date string:\", dateInput);\r\n          return \"Invalid Date\";\r\n      }\r\n    }\r\n    // Check if it's already a Date object\r\n    else if (dateInput instanceof Date) {\r\n        dateObject = dateInput;\r\n    }\r\n\r\n    // If we couldn't create a valid Date object, return null or an indicator\r\n    if (!dateObject) {\r\n      console.warn(\"formatDate received an invalid input:\", dateInput);\r\n      return \"Unknown Date\"; // Or return null\r\n    }\r\n\r\n    // Format the valid Date object\r\n    return dateObject.toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"Error formatting date:\", dateInput, error);\r\n    return \"Date Error\"; // Indicate an error occurred during formatting\r\n  }\r\n}; ","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getTopScores } from '../api/leaderboardApi'; // Using localStorage API for now\nimport { gameHistoryService } from '../services/gameHistoryService'; // Needed to fetch details\n// We'll use the history service later for clicking, but leaderboardApi for display\n// import { gameHistoryService } from '../services/gameHistoryService';\nimport { formatDate } from '../utils/dateUtils';\nimport { capitalize } from '../utils/stringUtils'; // Corrected import path\nimport './LeaderboardPage.css';\nimport '../components/CountryCard.css'; // Import for potential flag styling reuse\n\n// Define the classic categories\nconst CLASSIC_CATEGORIES = ['population', 'area', 'gini'];\n\nfunction LeaderboardPage() {\n  // State to hold leaderboards, including fetched details\n  const [leaderboards, setLeaderboards] = useState({});\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loadLeaderboardsAndDetails = async () => {\n      setLoading(true);\n      const fetchedLeaderboards = {};\n      try {\n        for (const category of CLASSIC_CATEGORIES) {\n          // 1. Fetch top scores (basic info + gameHistoryId)\n          const topScores = getTopScores(category, 5);\n          \n          // 2. Fetch details for each score that has a gameHistoryId\n          const enrichedScores = await Promise.all(\n            topScores.map(async (score) => {\n              if (score.gameHistoryId) {\n                try {\n                  const details = await gameHistoryService.getGameDetails(score.gameHistoryId);\n                  // Combine score with details (correctlySortedList, incorrectCountry)\n                  return { ...score, details: details || null }; \n                } catch (err) {\n                  console.error(`Failed to fetch details for game ${score.gameHistoryId}:`, err);\n                  return { ...score, details: null }; // Keep score, mark details as failed\n                }\n              } else {\n                return { ...score, details: null }; // No ID, no details\n              }\n            })\n          );\n          fetchedLeaderboards[category] = enrichedScores;\n        }\n        console.log(\"Enriched Leaderboards:\", fetchedLeaderboards);\n        setLeaderboards(fetchedLeaderboards);\n      } catch (error) {\n        console.error(\"Error loading leaderboards:\", error);\n        // Handle error display if needed\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadLeaderboardsAndDetails();\n  }, []); // Fetch only once on component mount\n\n  // --- Game History Clicking Logic (Placeholder/Future) ---\n  // To enable clicking, we'd need to:\n  // 1. Modify submitScore in leaderboardApi to optionally include the gameHistoryId\n  //    returned by gameHistoryService.saveGame.\n  // 2. Modify LeaderboardPage to fetch data possibly from Firestore (via a service)\n  //    which includes the gameHistoryId.\n  // 3. Implement the handleRowClick function.\n\n  const handleRowClick = (gameHistoryId) => {\n    if (gameHistoryId) {\n      console.log(\"Navigating to game review for ID:\", gameHistoryId);\n      navigate(`/game-review/${gameHistoryId}`); // Navigate to the new review page route\n    } else {\n      console.log(\"No game history ID associated with this leaderboard entry.\");\n       alert(\"Detailed game view not available for this entry (likely older data or not logged in when played).\");\n    }\n  };\n\n  const renderLeaderboardTable = (category, data) => {\n    const title = `Classic ${capitalize(category === 'gini' ? 'Gini Index' : category)}`;\n    return (\n      <div className=\"leaderboard-section\">\n        <h3>{title}</h3>\n        {data && data.length > 0 ? (\n          <div className=\"leaderboard-table\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Rank</th>\n                  <th>Player</th>\n                  <th>Score</th>\n                  <th>Date</th>\n                  <th>Game Overview</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((entry, index) => (\n                  <tr\n                    key={entry.id || index}\n                    onClick={() => handleRowClick(entry.gameHistoryId)}\n                    className={entry.gameHistoryId ? 'clickable-row' : ''}\n                    title={entry.gameHistoryId ? 'Click to see game details' : 'Game details not available'}\n                   >\n                    <td>{index + 1}</td>\n                    <td>{entry.playerName}</td>\n                    <td>{entry.score}</td>\n                    <td>{formatDate(entry.date)}</td>\n                    <td className=\"leaderboard-flags\">\n                      {entry.details && entry.details.mode === 'classic' ? (\n                        <>\n                          {entry.details.correctlySortedList?.map(country => (\n                            <img \n                              key={`flag-correct-${country.id || country.name}`}\n                              src={country.flagUrl}\n                              alt={country.name}\n                              title={country.name}\n                              className=\"flag-image\"\n                            />\n                          ))}\n                          {entry.details.incorrectCountry && (\n                            <img \n                              key={`flag-incorrect-${entry.details.incorrectCountry.id || entry.details.incorrectCountry.name}`}\n                              src={entry.details.incorrectCountry.flagUrl}\n                              alt={`${entry.details.incorrectCountry.name} (Incorrect)`}\n                              title={`${entry.details.incorrectCountry.name} (Incorrect)`}\n                              className=\"flag-image incorrect-flag\"\n                            />\n                          )}\n                          <span role=\"img\" aria-label=\"View game details\" className=\"click-indicator\" title=\"Click for details\">🔍</span>\n                        </>\n                      ) : entry.gameHistoryId ? (\n                          <span role=\"img\" aria-label=\"View game details\" className=\"click-indicator\" title=\"Click for details\">🔍</span>\n                      ) : (\n                        <span>-</span>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <p>No entries yet for this category.</p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"leaderboard-page\">\n      <h2>Classic Leaderboards</h2>\n      {loading ? (\n        <p>Loading leaderboards...</p>\n      ) : (\n        CLASSIC_CATEGORIES.map(category => \n          renderLeaderboardTable(category, leaderboards[category])\n        )\n      )}\n      {/* Add navigation buttons if needed */}\n       <button onClick={() => navigate('/')} className=\"button button-secondary\" style={{marginTop: '20px'}}>\n          Go Home\n        </button>\n    </div>\n  );\n}\n\nexport default LeaderboardPage; ","import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\n\nconst ACHIEVEMENTS_COLLECTION = 'achievements';\n\nconst ACHIEVEMENT_DEFINITIONS = {\n  population: {\n    sorting: {\n      bronze: { id: 'population_sorting_bronze', title: 'Population Bronze Sorter', description: 'Correctly sort 3 countries by population', icon: '🥉', requirement: 3 },\n      silver: { id: 'population_sorting_silver', title: 'Population Silver Sorter', description: 'Correctly sort 7 countries by population', icon: '🥈', requirement: 7 },\n      gold: { id: 'population_sorting_gold', title: 'Population Gold Sorter', description: 'Correctly sort 12 countries by population', icon: '🥇', requirement: 12 },\n      platinum: { id: 'population_sorting_platinum', title: 'Population Platinum Sorter', description: 'Correctly sort 20 countries by population', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'population_games',\n      title: 'Population Game Master',\n      description: 'Complete 50 population sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  },\n  area: {\n    sorting: {\n      bronze: { id: 'area_sorting_bronze', title: 'Area Bronze Sorter', description: 'Correctly sort 3 countries by area', icon: '🥉', requirement: 3 },\n      silver: { id: 'area_sorting_silver', title: 'Area Silver Sorter', description: 'Correctly sort 7 countries by area', icon: '🥈', requirement: 7 },\n      gold: { id: 'area_sorting_gold', title: 'Area Gold Sorter', description: 'Correctly sort 12 countries by area', icon: '🥇', requirement: 12 },\n      platinum: { id: 'area_sorting_platinum', title: 'Area Platinum Sorter', description: 'Correctly sort 20 countries by area', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'area_games',\n      title: 'Area Game Master',\n      description: 'Complete 50 area sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  },\n  gini: {\n    sorting: {\n      bronze: { id: 'gini_sorting_bronze', title: 'Gini Bronze Sorter', description: 'Correctly sort 3 countries by Gini index', icon: '🥉', requirement: 3 },\n      silver: { id: 'gini_sorting_silver', title: 'Gini Silver Sorter', description: 'Correctly sort 7 countries by Gini index', icon: '🥈', requirement: 7 },\n      gold: { id: 'gini_sorting_gold', title: 'Gini Gold Sorter', description: 'Correctly sort 12 countries by Gini index', icon: '🥇', requirement: 12 },\n      platinum: { id: 'gini_sorting_platinum', title: 'Gini Platinum Sorter', description: 'Correctly sort 20 countries by Gini index', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'gini_games',\n      title: 'Gini Game Master',\n      description: 'Complete 50 Gini sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  }\n};\n\nexport const achievementsService = {\n  // Get user achievements\n  async getUserAchievements(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId));\n      return userDoc.exists() ? userDoc.data() : null;\n    } catch (error) {\n      console.error('Error getting user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Update user achievements\n  async updateUserAchievements(userId, achievements) {\n    try {\n      await setDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId), {\n        ...achievements,\n        updatedAt: serverTimestamp()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Check and update achievements based on game results\n  async checkAndUpdateAchievements(userId, category, correctCount) {\n    try {\n      const currentAchievements = await this.getUserAchievements(userId) || {};\n      const categoryAchievements = ACHIEVEMENT_DEFINITIONS[category];\n      let updated = false;\n\n      // Check sorting achievements\n      Object.values(categoryAchievements.sorting).forEach(achievement => {\n        if (!currentAchievements[achievement.id] && correctCount >= achievement.requirement) {\n          currentAchievements[achievement.id] = {\n            unlocked: true,\n            unlockedAt: serverTimestamp()\n          };\n          updated = true;\n        }\n      });\n\n      // Check game count achievements\n      const gameCountAchievement = categoryAchievements.gameCount;\n      const currentCount = (currentAchievements[gameCountAchievement.id]?.count || 0) + 1;\n      \n      if (currentCount >= gameCountAchievement.requirement && !currentAchievements[gameCountAchievement.id]?.unlocked) {\n        currentAchievements[gameCountAchievement.id] = {\n          unlocked: true,\n          unlockedAt: serverTimestamp(),\n          count: currentCount\n        };\n        updated = true;\n      } else {\n        currentAchievements[gameCountAchievement.id] = {\n          ...currentAchievements[gameCountAchievement.id],\n          count: currentCount\n        };\n        updated = true;\n      }\n\n      if (updated) {\n        await this.updateUserAchievements(userId, currentAchievements);\n      }\n\n      return currentAchievements;\n    } catch (error) {\n      console.error('Error checking achievements:', error);\n      throw error;\n    }\n  },\n\n  // Achievement definitions\n  getAchievementDefinitions() {\n    return ACHIEVEMENT_DEFINITIONS;\n  }\n}; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AvatarSelector.css';\r\n\r\nconst AvatarSelector = ({ avatarOptions, selectedAvatar, onSelect, onClose }) => (\r\n  <div className=\"avatar-selector\">\r\n    <div className=\"avatar-grid\">\r\n      {avatarOptions.map(avatar => (\r\n        <div \r\n          key={avatar.id} \r\n          className={`avatar-option ${selectedAvatar === avatar.url ? 'selected' : ''}`}\r\n          onClick={() => onSelect(avatar.url)}\r\n        >\r\n          <img src={avatar.url} alt={avatar.name} />\r\n          <span>{avatar.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAvatarSelector.propTypes = {\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  selectedAvatar: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AvatarSelector; ","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarSelector from './AvatarSelector';\r\nimport './ProfileHeader.css';\r\n\r\nconst ProfileHeader = ({ \r\n  profile, \r\n  currentUser, \r\n  avatarOptions,\r\n  onSubmit\r\n}) => {\r\n  const [formData, setFormData] = useState({\r\n    nickname: profile?.nickname || '',\r\n    country: profile?.country || '',\r\n    avatarUrl: profile?.avatarUrl || avatarOptions[0].url\r\n  });\r\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleAvatarSelect = (avatarUrl) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      avatarUrl\r\n    }));\r\n    setShowAvatarSelector(false);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await onSubmit(formData);\r\n      setIsEditing(false);\r\n    } catch (error) {\r\n      console.error('Error saving profile:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-header\">\r\n      <div className=\"avatar-container\">\r\n        <img \r\n          src={formData.avatarUrl} \r\n          alt=\"Profile\" \r\n          className=\"profile-avatar\"\r\n          onClick={() => setShowAvatarSelector(true)}\r\n        />\r\n        {showAvatarSelector && (\r\n          <AvatarSelector\r\n            avatarOptions={avatarOptions}\r\n            selectedAvatar={formData.avatarUrl}\r\n            onSelect={handleAvatarSelect}\r\n            onClose={() => setShowAvatarSelector(false)}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"profile-info\">\r\n        <form onSubmit={handleSubmit} className=\"profile-form\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"nickname\"\r\n              value={formData.nickname}\r\n              onChange={handleChange}\r\n              placeholder=\"Set your nickname\"\r\n              className=\"inline-input\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"country\"\r\n              value={formData.country}\r\n              onChange={handleChange}\r\n              placeholder=\"Set your country\"\r\n              className=\"inline-input\"\r\n            />\r\n          </div>\r\n          <div className=\"email-display\">{currentUser.email}</div>\r\n          {isEditing && (\r\n            <button type=\"submit\" className=\"save-button\">\r\n              Save Changes\r\n            </button>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileHeader.propTypes = {\r\n  profile: PropTypes.shape({\r\n    nickname: PropTypes.string,\r\n    country: PropTypes.string,\r\n    avatarUrl: PropTypes.string\r\n  }),\r\n  currentUser: PropTypes.shape({\r\n    email: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ProfileHeader; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './AchievementCard.css';\r\n\r\nconst AchievementCard = ({ achievement, isUnlocked, unlockDate }) => (\r\n  <div className={`achievement-card ${isUnlocked ? 'unlocked' : 'locked'}`}>\r\n    <div className=\"achievement-content\">\r\n      <div className=\"achievement-icon\">{achievement.icon}</div>\r\n      <div className=\"achievement-info\">\r\n        <h3>{achievement.title}</h3>\r\n        <p>{achievement.description}</p>\r\n        {isUnlocked && unlockDate && (\r\n          <div className=\"achievement-date\">\r\n            Unlocked: {formatDate(unlockDate)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className=\"achievement-status\">\r\n      {isUnlocked ? '✓' : '🔒'}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAchievementCard.propTypes = {\r\n  achievement: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  isUnlocked: PropTypes.bool.isRequired,\r\n  unlockDate: PropTypes.object\r\n};\r\n\r\nexport default AchievementCard; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AchievementCard from './AchievementCard';\r\nimport { transformAchievementDefinitions } from '../../utils/achievementUtils';\r\nimport './AchievementsSection.css';\r\n\r\nconst AchievementsSection = ({ achievementDefinitions, achievements }) => {\r\n  const transformedAchievements = transformAchievementDefinitions(achievementDefinitions);\r\n\r\n  return (\r\n    <div className=\"achievements-section\">\r\n      <h2>Achievements</h2>\r\n      <div className=\"achievements-grid\">\r\n        {transformedAchievements.map(achievement => (\r\n          <AchievementCard\r\n            key={achievement.id}\r\n            achievement={achievement}\r\n            isUnlocked={achievements?.[achievement.id]?.unlocked ?? false}\r\n            unlockDate={achievements?.[achievement.id]?.unlockedAt}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievementsSection.propTypes = {\r\n  achievementDefinitions: PropTypes.object.isRequired,\r\n  achievements: PropTypes.objectOf(PropTypes.shape({\r\n    unlocked: PropTypes.bool,\r\n    unlockedAt: PropTypes.object\r\n  }))\r\n};\r\n\r\nexport default AchievementsSection; ","export const transformAchievementDefinitions = (definitions) => {\r\n  const achievements = [];\r\n  \r\n  // Process each category (population, area)\r\n  Object.entries(definitions).forEach(([category, categoryData]) => {\r\n    // Process sorting achievements\r\n    Object.entries(categoryData.sorting).forEach(([level, achievement]) => {\r\n      achievements.push({\r\n        ...achievement,\r\n        category,\r\n        type: 'sorting'\r\n      });\r\n    });\r\n    \r\n    // Process game count achievement\r\n    if (categoryData.gameCount) {\r\n      achievements.push({\r\n        ...categoryData.gameCount,\r\n        category,\r\n        type: 'gameCount'\r\n      });\r\n    }\r\n  });\r\n  \r\n  return achievements;\r\n}; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './GameHistoryItem.css';\r\n\r\nconst GameHistoryItem = ({ game, index }) => (\r\n  <div className=\"game-history-item\">\r\n    <div className=\"game-rank\">#{index + 1}</div>\r\n    <div className=\"game-score\">Score: {game.score}</div>\r\n    <div className=\"game-mode\">{game.category.charAt(0).toUpperCase() + game.category.slice(1)} Mode</div>\r\n    <div className=\"game-date\">\r\n      {game.timestamp?.toDate ? formatDate(game.timestamp) : 'Date unavailable'}\r\n    </div>\r\n    <div className=\"game-countries\">\r\n      {game.countries?.map((country, idx) => (\r\n        <div key={idx} className=\"country-item\">\r\n          <img src={country.flagUrl} alt={country.name} className=\"country-flag\" />\r\n          <span>{country.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nGameHistoryItem.propTypes = {\r\n  game: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    category: PropTypes.string.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  }).isRequired,\r\n  index: PropTypes.number.isRequired\r\n};\r\n\r\nexport default GameHistoryItem; ","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GameHistoryItem from './GameHistoryItem';\r\nimport './GameHistory.css';\r\n\r\nconst GameHistory = ({ gameHistory }) => {\r\n  const topGames = useMemo(() => {\r\n    if (!gameHistory || Object.keys(gameHistory).length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const entries = Object.entries(gameHistory);\r\n    const flattenedGames = entries.flatMap(([category, games]) => \r\n      games.map(game => ({ ...game, category }))\r\n    );\r\n\r\n    const uniqueGames = flattenedGames.filter((game, index, self) => \r\n      index === self.findIndex((g) => g.id === game.id)\r\n    );\r\n\r\n    return uniqueGames\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 5);\r\n  }, [gameHistory]);\r\n\r\n  if (!gameHistory) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>Loading game history...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(gameHistory).length === 0) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>No games played yet. Start playing to see your best games here!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-history-section\">\r\n      <h2>Best 5 Games</h2>\r\n      <div className=\"game-history-list\">\r\n        {topGames.map((game, index) => (\r\n          <GameHistoryItem key={game.id} game={game} index={index} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameHistory.propTypes = {\r\n  gameHistory: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  })))\r\n};\r\n\r\nexport default GameHistory; ","import React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { userProfileService } from '../services/userProfileService';\nimport { achievementsService } from '../services/achievementsService';\nimport { avatarService } from '../services/avatarService';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport ProfileHeader from '../components/profile/ProfileHeader';\nimport AchievementsSection from '../components/profile/AchievementsSection';\nimport GameHistory from '../components/profile/GameHistory';\nimport './ProfilePage.css';\n\nconst ProfilePage = () => {\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  const [profile, setProfile] = useState(null);\n  const [achievements, setAchievements] = useState(null);\n  const [gameHistory, setGameHistory] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\n  const [formData, setFormData] = useState({\n    nickname: '',\n    country: '',\n    avatarUrl: ''\n  });\n\n  const avatarOptions = avatarService.getAvatarOptions();\n  const achievementDefinitions = achievementsService.getAchievementDefinitions();\n  const userId = currentUser?.uid;\n\n  const loadProfile = useCallback(async () => {\n    if (!userId) return;\n    \n    try {\n      const [userProfile, userAchievements, userGameHistory] = await Promise.all([\n        userProfileService.getUserProfile(userId),\n        achievementsService.getUserAchievements(userId),\n        gameHistoryService.getAllTopGames(userId)\n      ]);\n\n      if (userProfile) {\n        setProfile(userProfile);\n        setFormData({\n          nickname: userProfile.nickname || '',\n          country: userProfile.country || '',\n          avatarUrl: userProfile.avatarUrl || avatarOptions[0].url\n        });\n      }\n\n      setAchievements(userAchievements);\n      setGameHistory(userGameHistory);\n    } catch (error) {\n      setError('Failed to load profile: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId, avatarOptions]);\n\n  useEffect(() => {\n    if (currentUser) {\n      loadProfile();\n    }\n  }, [currentUser, loadProfile]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleAvatarSelect = (avatarUrl) => {\n    setFormData(prev => ({ ...prev, avatarUrl }));\n    setShowAvatarSelector(false);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setError('');\n      await userProfileService.updateUserProfile(currentUser.uid, formData);\n      setProfile(prev => ({ ...prev, ...formData }));\n      setEditing(false);\n    } catch (error) {\n      setError('Failed to update profile: ' + error.message);\n    }\n  };\n\n  if (!currentUser) {\n    navigate('/');\n    return null;\n  }\n\n  if (loading) {\n    return <div className=\"profile-page\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"profile-page\">\n      <div className=\"profile-content\">\n        <ProfileHeader\n          profile={profile}\n          currentUser={currentUser}\n          editing={editing}\n          formData={formData}\n          avatarOptions={avatarOptions}\n          showAvatarSelector={showAvatarSelector}\n          onEdit={() => setEditing(true)}\n          onAvatarSelect={handleAvatarSelect}\n          onAvatarSelectorToggle={() => setShowAvatarSelector(!showAvatarSelector)}\n          onSubmit={handleSubmit}\n          onChange={handleInputChange}\n          onCancel={() => setEditing(false)}\n        />\n\n        {error && <div className=\"error-message\">{error}</div>}\n\n        <AchievementsSection\n          achievementDefinitions={achievementDefinitions}\n          achievements={achievements}\n        />\n\n        <GameHistory gameHistory={gameHistory} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage; ","import { realtimeDb } from '../firebase';\nimport { ref, set, update, remove, get, onValue, off } from 'firebase/database';\n\nconst LOBBIES_PATH = 'lobbies';\n\nclass LobbyService {\n  constructor() {\n    this.lobbiesRef = ref(realtimeDb, LOBBIES_PATH);\n  }\n\n  // Create a new lobby\n  async createLobby(lobbyId, player, gameMode = 'cooperation') {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await set(lobbyRef, {\n      players: [player],\n      status: 'waiting',\n      gameMode: gameMode,\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n    return lobbyId;\n  }\n\n  // Join an existing lobby\n  async joinLobby(lobbyId, player) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const snapshot = await get(lobbyRef);\n    const lobbyData = snapshot.val();\n    \n    if (lobbyData) {\n      const currentPlayers = lobbyData.players || [];\n      if (currentPlayers.some(p => p.id === player.id)) {\n        console.warn(`Player ${player.id} already in lobby ${lobbyId}.`);\n        return;\n      }\n      await update(lobbyRef, {\n        players: [...currentPlayers, player],\n        lastUpdated: Date.now()\n      });\n    } else {\n      throw new Error('Lobby not found');\n    }\n  }\n\n  // Leave a lobby\n  async leaveLobby(lobbyId, playerId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const snapshot = await get(lobbyRef);\n    const lobbyData = snapshot.val();\n    \n    if (lobbyData) {\n      const currentPlayers = lobbyData.players || [];\n      const updatedPlayers = currentPlayers.filter(p => p.id !== playerId);\n      \n      if (updatedPlayers.length === 0) {\n        console.log(`Last player left lobby ${lobbyId}. Deleting lobby.`);\n        await remove(lobbyRef);\n      } else {\n        let updates = {\n            players: updatedPlayers,\n            lastUpdated: Date.now()\n        };\n        \n        await update(lobbyRef, updates);\n      }\n    } else {\n      console.warn(`Attempted to leave non-existent or already deleted lobby: ${lobbyId}`);\n    }\n  }\n\n  // Subscribe to lobby changes\n  subscribeToLobby(lobbyId, callback) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const listener = onValue(lobbyRef, (snapshot) => {\n      const data = snapshot.val();\n      callback(data);\n    }, (error) => {\n        console.error(`Error subscribing to lobby ${lobbyId}:`, error);\n        callback(null);\n    });\n\n    return () => off(lobbyRef, 'value', listener);\n  }\n\n  // Start the game\n  async startGame(lobbyId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await update(lobbyRef, {\n      status: 'playing',\n      startedAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n  }\n\n  // End the game\n  async endGame(lobbyId, result = {}) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await update(lobbyRef, {\n      status: 'completed',\n      result: result,\n      endedAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n  }\n\n  // Clean up lobby\n  async cleanupLobby(lobbyId) {\n    console.log(`Cleaning up lobby: ${lobbyId}`);\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await remove(lobbyRef);\n  }\n}\n\nexport const lobbyService = new LobbyService(); ","import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useSearchParams, useParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { userProfileService } from '../services/userProfileService';\nimport { lobbyService } from '../services/lobbyService';\nimport { cooperationGameService } from '../services/cooperationGameService';\nimport { battleRoyaleGameService } from '../services/battleRoyaleGameService';\nimport './GameLobby.css';\n\n// Define game settings based on mode (moved outside component)\nconst gameSettings = {\n  cooperation: {\n    minPlayers: 2,\n    maxPlayers: 4, // Assuming max 4 for cooperation\n    service: cooperationGameService,\n    name: 'Cooperation Mode'\n  },\n  battleRoyale: {\n    minPlayers: 2,\n    maxPlayers: 8,\n    service: battleRoyaleGameService,\n    name: 'Battle Royale Mode'\n  }\n};\n\nfunction GameLobby({ gameMode }) {\n  const { currentUser } = useAuth();\n  const { category } = useParams();\n  const [lobbyId, setLobbyId] = useState('');\n  const [players, setPlayers] = useState([]);\n  const [isHost, setIsHost] = useState(false);\n  const [error, setError] = useState('');\n  const [copyStatus, setCopyStatus] = useState('');\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const currentLobbyId = useRef('');\n  const currentPlayer = useRef(null);\n\n  // Effect 2: Initialize lobby, join/create, and subscribe *after* gameMode prop is available\n  useEffect(() => {\n    // Wait for gameMode prop and user to be logged in\n    if (!gameMode || !currentUser || !category) {\n      if (!category) setError('Game category not specified in URL.');\n      return; \n    }\n\n    let unsubscribeFn = null;\n    let isMounted = true; // Flag to prevent state updates on unmounted component\n\n    const initializeLobby = async () => {\n      try {\n        let playerName = '';\n        try {\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\n          playerName = profile?.nickname || '';\n        } catch (fetchProfileError) {\n          console.error('Error fetching user profile:', fetchProfileError);\n        }\n\n        const lobbyParam = searchParams.get('lobby');\n        let targetLobbyId = '';\n        let playerInfo = {\n          id: currentUser.uid,\n          name: playerName || (lobbyParam ? `Player ${Math.floor(Math.random() * 100)}` : 'Player 1'),\n          email: currentUser.email\n        };\n        currentPlayer.current = playerInfo;\n\n        if (lobbyParam) { // Join Lobby\n          targetLobbyId = lobbyParam;\n          currentLobbyId.current = targetLobbyId;\n          if (isMounted) {\n             setLobbyId(targetLobbyId);\n             setIsHost(false); \n          }\n          try {\n            await lobbyService.joinLobby(targetLobbyId, playerInfo);\n          } catch (joinError) {\n            console.error('Error joining lobby:', joinError);\n            if (isMounted) setError(joinError.message || 'Failed to join lobby');\n            return; \n          }\n        } else { // Create Lobby\n          targetLobbyId = Math.random().toString(36).substring(2, 8).toUpperCase();\n          currentLobbyId.current = targetLobbyId;\n          if (isMounted) {\n              setLobbyId(targetLobbyId);\n              setIsHost(true);\n          }\n          try {\n            await lobbyService.createLobby(targetLobbyId, playerInfo, gameMode, category); \n          } catch (createError) {\n            console.error('Error creating lobby:', createError);\n            if (isMounted) setError(createError.message || 'Failed to create lobby');\n            return; \n          }\n        }\n\n        // Subscribe to lobby changes\n        unsubscribeFn = lobbyService.subscribeToLobby(targetLobbyId, (lobbyData) => {\n          if (!isMounted) return; \n          \n          if (lobbyData) {\n            setPlayers(lobbyData.players || []);\n            setIsHost(lobbyData.players && lobbyData.players[0]?.id === currentUser.uid);\n            \n            const dbCategory = lobbyData.category;\n            if (dbCategory && dbCategory !== category) {\n                 console.warn(`Lobby category (${dbCategory}) doesn't match URL category (${category})`);\n            }\n\n            if (lobbyData.status === 'playing') {\n              if (gameMode && category) { \n                  const navigatePath = `/game/${category}/${gameMode}`; \n                  try {\n                    console.log(`Navigating to ${navigatePath} with mode ${gameMode} and category ${category}`);\n                    navigate(navigatePath, { \n                      state: { lobbyId: targetLobbyId } \n                    });\n                  } catch (navError) {\n                      console.error(\"Navigation error:\", navError);\n                  }\n              } else {\n                 console.error(\"Cannot navigate, gameMode prop or category param is missing.\");\n                 setError(\"Error determining game mode/category for navigation.\");\n              }\n            }\n          } else {\n            setError('Lobby not found or has been closed');\n          }\n        });\n      } catch (error) {\n        console.error('Error initializing lobby:', error);\n        if (isMounted) setError('Failed to initialize lobby');\n      }\n    };\n\n    initializeLobby();\n\n    // Cleanup function\n    return () => {\n      isMounted = false; \n      if (unsubscribeFn) {\n        unsubscribeFn();\n      }\n      if (currentLobbyId.current && currentPlayer.current) {\n        lobbyService.leaveLobby(currentLobbyId.current, currentPlayer.current.id);\n      }\n    };\n  }, [gameMode, searchParams, currentUser, navigate, category]); \n\n  const copyLink = async () => {\n    if (!gameMode || !currentLobbyId.current || !category) return;\n\n    const baseUrl = window.location.origin;\n    const gameLink = `${baseUrl}/#/game/${category}/${gameMode}?lobby=${encodeURIComponent(currentLobbyId.current)}`;\n    \n    try {\n      await navigator.clipboard.writeText(gameLink);\n      setCopyStatus('Copied!');\n      setTimeout(() => setCopyStatus(''), 2000);\n    } catch (err) {\n      const textArea = document.createElement('textarea');\n      textArea.value = gameLink;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-9999px';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      try {\n        document.execCommand('copy');\n        setCopyStatus('Copied!');\n        setTimeout(() => setCopyStatus(''), 2000);\n      } catch (copyErr) {\n        setCopyStatus('Failed to copy');\n        console.error('Fallback copy failed: ', copyErr);\n      }\n      document.body.removeChild(textArea);\n    }\n  };\n\n  const startGame = async () => {\n    if (!isHost || !gameMode || !currentLobbyId.current || !category) return;\n\n    const settings = gameSettings[gameMode];\n    if (!settings) {\n      setError('Invalid game mode configuration.');\n      return;\n    }\n    if (players.length < settings.minPlayers) {\n      setError(`Waiting for more players. Need at least ${settings.minPlayers}.`);\n      return;\n    }\n    if (players.length > settings.maxPlayers) {\n      setError(`Too many players. Maximum is ${settings.maxPlayers}.`);\n      return;\n    }\n\n    try {\n      setError('');\n      \n      await settings.service.initializeGameState(\n        currentLobbyId.current, \n        players,\n        category\n      );\n\n      await lobbyService.startGame(currentLobbyId.current);\n\n    } catch (error) {\n      console.error('Error starting game:', error);\n      setError(error.message || 'Failed to start game');\n    }\n  };\n  \n  if (!gameMode) {\n    return <div className=\"game-lobby\">Error: Game mode not provided.</div>;\n  }\n  if (!category) {\n      return <div className=\"game-lobby\">Error: Game category not specified in URL. {error && <p className=\"error-message\">{error}</p>}</div>;\n  }\n  if (!currentUser) {\n    return <div className=\"game-lobby\">Loading user...</div>;\n  }\n\n  const settings = gameSettings[gameMode];\n\n  return (\n    <div className=\"game-lobby\">\n      <div className=\"lobby-header\">\n        <h2>{settings?.name || 'Game Lobby'} - {category.toUpperCase()}</h2>\n        {lobbyId && <p className=\"lobby-id-display\">Lobby ID: <strong>{lobbyId}</strong></p>}\n      </div>\n      \n      {error && <p className=\"error-message\">{error}</p>}\n\n      <div className=\"player-list-container\">\n        <h3>Players ({players.length} / {settings?.maxPlayers || 'N/A'}):</h3>\n        <ul className=\"player-list\">\n          {players.map((player, index) => (\n            <li key={player.id} className=\"player-item\">\n              <span className=\"player-name\">{player.name || `Player ${index + 1}`}</span>\n              {player.id === currentUser.uid && <span className=\"player-tag you-tag\"> (You)</span>} \n              {index === 0 && <span className=\"player-tag host-tag\"> (Host)</span>}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {lobbyId && (\n        <div className=\"lobby-controls\">\n          {isHost ? (\n            <>\n              <button \n                className=\"button button-secondary\" \n                onClick={copyLink} \n                disabled={copyStatus === 'Copied!' || copyStatus === 'Failed to copy'}\n              >\n                {copyStatus || 'Copy Invite Link'}\n              </button>\n              <button \n                className=\"button button-primary\" \n                onClick={startGame} \n                disabled={players.length < (settings?.minPlayers || 2)}\n              >\n                Start Game\n              </button>\n            </>\n          ) : (\n            <button \n              className=\"button button-secondary\" \n              onClick={copyLink} \n              disabled={copyStatus === 'Copied!' || copyStatus === 'Failed to copy'}\n            >\n              {copyStatus || 'Copy Invite Link'}\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameLobby; ","import { \r\n  collection, \r\n  addDoc, \r\n  query, \r\n  orderBy, \r\n  getDocs,\r\n  where,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst LEADERBOARD_COLLECTION = 'scores';\r\n\r\nexport const leaderboardService = {\r\n  // Add a new score\r\n  async addScore(userId, username, score, gameMode) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, LEADERBOARD_COLLECTION), {\r\n        userId,\r\n        username,\r\n        score,\r\n        gameMode,\r\n        timestamp: serverTimestamp()\r\n      });\r\n      return docRef.id;\r\n    } catch (error) {\r\n      console.error('Error adding score:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get global leaderboard\r\n  async getGlobalLeaderboard(limit = 10) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting leaderboard:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user's best scores\r\n  async getUserBestScores(userId, limit = 5) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        where('userId', '==', userId),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting user scores:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; ","import React, { useState } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { leaderboardService } from '../services/leaderboardService';\r\n\r\nexport function FirebaseTest() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [testScore, setTestScore] = useState(null);\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function addTestScore() {\r\n    if (!currentUser) return;\r\n    try {\r\n      await leaderboardService.addScore(\r\n        currentUser.uid,\r\n        currentUser.email,\r\n        100,\r\n        'test'\r\n      );\r\n      setTestScore('Score added successfully!');\r\n    } catch (error) {\r\n      setTestScore('Failed to add score: ' + error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Firebase Test</h2>\r\n      \r\n      {currentUser ? (\r\n        <div>\r\n          <p>Logged in as: {currentUser.email}</p>\r\n          <button onClick={handleLogout} disabled={loading}>\r\n            Log Out\r\n          </button>\r\n          <button onClick={addTestScore} style={{ marginLeft: '10px' }}>\r\n            Add Test Score\r\n          </button>\r\n          {testScore && <p>{testScore}</p>}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"Email\"\r\n              required\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n            <button type=\"submit\" disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n          </form>\r\n          <form onSubmit={handleLogin} style={{ marginTop: '10px' }}>\r\n            <button type=\"submit\" disabled={loading}>\r\n              Log In\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      \r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n} ","// src/pages/GameReviewPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate, Link } from 'react-router-dom';\r\nimport { gameHistoryService } from '../services/gameHistoryService';\r\nimport CountryCard from '../components/CountryCard';\r\nimport { formatDate } from '../utils/dateUtils';\r\nimport { capitalize } from '../utils/stringUtils';\r\nimport './GameReviewPage.css'; // Create this CSS file for styling\r\nimport '../components/Buttons.css';\r\n\r\nfunction GameReviewPage() {\r\n  const { gameId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [gameData, setGameData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchGameData = async () => {\r\n      if (!gameId) {\r\n        setError('No game ID provided.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      setLoading(true);\r\n      try {\r\n        console.log(`Fetching game details for ID: ${gameId}`);\r\n        const data = await gameHistoryService.getGameDetails(gameId);\r\n        if (data) {\r\n          console.log(\"Fetched game data:\", data);\r\n          // Ensure nested arrays/objects exist before accessing\r\n          if (!data.correctlySortedList) data.correctlySortedList = [];\r\n          if (!data.incorrectCountry) data.incorrectCountry = null;\r\n          setGameData(data);\r\n        } else {\r\n          setError(`Game with ID ${gameId} not found.`);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching game details:\", err);\r\n        setError('Failed to load game details. Please try again later.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchGameData();\r\n  }, [gameId]);\r\n\r\n  if (loading) {\r\n    return <div className=\"game-review-page loading\">Loading game review...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"game-review-page error\">\r\n        <h2>Error</h2>\r\n        <p>{error}</p>\r\n        <button onClick={() => navigate('/leaderboard')} className=\"button button-secondary\">\r\n          Back to Leaderboard\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!gameData) {\r\n    // This case should ideally be covered by the error state if not found\r\n    return <div className=\"game-review-page\">Game data could not be loaded.</div>;\r\n  }\r\n\r\n  // Ensure we only show classic mode details if applicable\r\n  const isClassicReview = gameData.mode === 'classic' && gameData.correctlySortedList && gameData.incorrectCountry;\r\n  const categoryDisplay = gameData.category === 'gini' ? 'Gini Index' : capitalize(gameData.category || 'Unknown');\r\n\r\n  return (\r\n    <div className=\"game-review-page\">\r\n      <h2>Game Review - {capitalize(gameData.mode || 'Game')} ({categoryDisplay})</h2>\r\n      <p>Score: {gameData.score}</p>\r\n      <p>Played on: {gameData.timestamp ? formatDate(gameData.timestamp) : 'Date unknown'}</p>\r\n\r\n      {isClassicReview ? (\r\n        <div className=\"review-section final-order-display\">\r\n          <h3>Your Final Correct Sequence & Mistake:</h3>\r\n          <div className=\"country-list combined-list\">\r\n            {gameData.correctlySortedList.map((country) => (\r\n              <CountryCard\r\n                key={`correct-${country.id || country.name}`}\r\n                country={country}\r\n                isClickable={false}\r\n                highlight={'correct'}\r\n                mode={gameData.category}\r\n                statisticValue={country.value}\r\n                isFlippable={true}\r\n              />\r\n            ))}\r\n\r\n            {gameData.incorrectCountry && (\r\n              <CountryCard\r\n                key={`incorrect-${gameData.incorrectCountry.id || gameData.incorrectCountry.name}`}\r\n                country={gameData.incorrectCountry}\r\n                isClickable={false}\r\n                highlight={'incorrect'}\r\n                mode={gameData.category}\r\n                statisticValue={gameData.incorrectCountry.value}\r\n                isFlippable={true}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"general-game-info review-section\">\r\n          <h3>Game Summary</h3>\r\n          {gameData.userAttemptList && gameData.userAttemptList.length > 0 ? (\r\n            <div className=\"country-list\">\r\n              {gameData.userAttemptList.map(item => (\r\n                <CountryCard\r\n                  key={`attempt-${item.id || item.name}`}\r\n                  country={item}\r\n                  isClickable={false}\r\n                  mode={gameData.category}\r\n                  statisticValue={item.value}\r\n                  isFlippable={true}\r\n                />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <p>Basic game data is available, but detailed review for this mode might not be fully implemented.</p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"navigation-buttons\" style={{ marginTop: '30px' }}>\r\n        <button onClick={() => navigate('/leaderboard')} className=\"button button-secondary\">\r\n          Back to Leaderboard\r\n        </button>\r\n        <Link to=\"/\" className=\"button button-secondary\">Go Home</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameReviewPage; ","// src/App.js\n\nimport React, { useEffect } from 'react';\n// Import useMatch for extracting route params outside Routes\nimport { useLocation, Routes, Route, useMatch } from 'react-router-dom'; \nimport ReactGA from 'react-ga4';\nimport Header from './components/Header';\nimport Footer from './components/Footer'; \nimport HomePage from './pages/HomePage';\nimport UnifiedGamePage from './pages/GamePage';\nimport GameOverPage from './pages/GameOverPage';\nimport LeaderboardPage from './pages/LeaderboardPage';\nimport ProfilePage from './pages/ProfilePage';\nimport GameLobby from './components/GameLobby';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { FirebaseTest } from './components/FirebaseTest';\nimport GameReviewPage from './pages/GameReviewPage';\nimport './App.css';\n\nfunction App() {\n  const location = useLocation();\n  \n  // Check if the current path matches a game route pattern\n  const gameRouteMatch = useMatch('/game/:category/:mode');\n  const lobbyRouteMatch = useMatch('/game/:category/:mode/*'); // Match lobby routes too\n\n  // Extract category if we are on a game or lobby page\n  const gameCategory = gameRouteMatch?.params?.category || lobbyRouteMatch?.params?.category;\n\n  // Determine background class based on category\n  let backgroundClass = '';\n  if (gameCategory === 'population') {\n    backgroundClass = 'bg-population';\n  } else if (gameCategory === 'area') {\n    backgroundClass = 'bg-area';\n  } else if (gameCategory === 'gini') {\n    backgroundClass = 'bg-gini';\n  }\n\n  // Initialize Google Analytics only once\n  useEffect(() => {\n    ReactGA.initialize('G-9679TPXEBR'); // Replace with your Measurement ID\n  }, []);\n\n  // Send pageview whenever the pathname changes\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: location.pathname });\n  }, [location.pathname]);\n\n  return (\n    <AuthProvider>\n      {/* Apply dynamic background class */}\n      <div className={`App ${backgroundClass}`}>\n        <Header />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            {/* Updated lobby route path to match useMatch */}\n            <Route path=\"/game/:category/cooperation\" element={<GameLobby gameMode=\"cooperation\" />} /> \n            <Route path=\"/game/:category/battleroyale\" element={<GameLobby gameMode=\"battleRoyale\" />} />\n            <Route path=\"/game/:category/:mode\" element={<UnifiedGamePage />} />\n            <Route path=\"/gameover\" element={<GameOverPage />} />\n            <Route path=\"/leaderboard\" element={<LeaderboardPage />} />\n            <Route path=\"/profile\" element={<ProfilePage />} />\n            <Route path=\"/test\" element={<FirebaseTest />} />\n            <Route path=\"/game-review/:gameId\" element={<GameReviewPage />} />\n          </Routes>\n        </div>\n        <Footer /> \n      </div>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Wrap everything inside HashRouter\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <DndProvider backend={HTML5Backend}>\n        <App />\n      </DndProvider>\n    </HashRouter>\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}