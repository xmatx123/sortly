{"version":3,"sources":["assets/logo.png","firebase.js","contexts/AuthContext.js","services/avatarService.js","services/userProfileService.js","components/LoginButton.js","components/Header.js","components/Footer.js","pages/HomePage.js","components/CountryCard.js","api/countriesApi.js","services/achievementsService.js","pages/GamePage.js","api/leaderboardApi.js","services/gameHistoryService.js","pages/GameOverPage.js","utils/dateUtils.js","pages/LeaderboardPage.js","components/profile/AvatarSelector.jsx","components/profile/ProfileForm.jsx","components/profile/ProfileHeader.jsx","components/profile/AchievementCard.jsx","components/profile/AchievementsSection.jsx","utils/achievementUtils.js","components/profile/GameHistoryItem.jsx","components/profile/GameHistory.jsx","pages/ProfilePage.js","services/leaderboardService.js","components/FirebaseTest.js","App.js","index.js"],"names":["module","exports","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","db","getFirestore","AuthContext","createContext","useAuth","useContext","AuthProvider","_ref","children","currentUser","setCurrentUser","useState","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","React","createElement","Provider","avatarService","getAvatarOptions","id","url","name","userProfileService","userId","userDoc","getDoc","doc","exists","data","defaultProfile","nickname","country","avatarUrl","createdAt","Date","this","updateUserProfile","error","console","profileData","userRef","setDoc","updatedAt","merge","field","updateDoc","LoginButton","setEmail","setPassword","setError","showLoginForm","setShowLoginForm","userProfile","setUserProfile","navigate","useNavigate","async","profile","getUserProfile","uid","loadUserProfile","className","onClick","src","alt","message","disabled","type","onChange","e","target","placeholder","required","preventDefault","style","color","Header","isMenuOpen","setIsMenuOpen","closeMenu","Link","to","logo","toggleMenu","Footer","getFullYear","HomePage","handlePlayPopulation","ReactGA","event","category","action","handlePlayArea","CountryCard","isClickable","highlight","mode","isFlipped","setIsFlipped","highlightClass","handleClick","flagUrl","population","toLocaleString","area","ACHIEVEMENT_DEFINITIONS","sorting","bronze","title","description","icon","requirement","silver","gold","platinum","gameCount","achievementsService","achievements","serverTimestamp","correctCount","_currentAchievements$","_currentAchievements$2","currentAchievements","getUserAchievements","categoryAchievements","updated","Object","values","forEach","achievement","unlocked","unlockedAt","gameCountAchievement","currentCount","count","updateUserAchievements","getAchievementDefinitions","GamePage","sortedCountries","setSortedCountries","currentCountry","setCurrentCountry","remainingCountries","setRemainingCountries","score","setScore","hoverIndex","setHoverIndex","useParams","getRandomCountry","countries","randomIndex","Math","floor","random","length","splice","startNewGame","useCallback","availableCountries","firstCountry","nextCountry","validCountries","response","fetch","ok","Error","status","json","Array","isArray","unMemberCountries","filter","_country$name","_country$flags","unMember","common","flags","svg","map","index","fetchCountries","initializeGame","compareProperty","handleInsert","newSortedCountries","isCorrectOrder","prevScore","log","updatedAchievements","checkAndUpdateAchievements","state","countriesCopy","pickNextCountry","correctOrder","sort","a","b","incorrectCountry","userOrder","countriesList","i","key","onMouseEnter","onMouseLeave","_","getLeaderboard","arguments","undefined","leaderboard","JSON","parse","localStorage","getItem","entry","CATEGORIES","gameHistoryService","limitCount","gamesRef","collection","q","query","where","orderBy","firestoreLimit","getDocs","docs","slice","topGames","Promise","all","getTopGames","minimalCountries","addDoc","timestamp","GameOverPage","location","useLocation","playerName","setPlayerName","isSubmitted","setIsSubmitted","hasSaved","useRef","current","countriesCount","saveGame","saveGameHistory","onSubmit","trim","submitScore","newEntry","now","date","toISOString","push","top100","setItem","stringify","err","htmlFor","maxLength","formatDate","toDate","toLocaleDateString","year","month","day","LeaderboardPage","setLeaderboard","selectedMode","setSelectedMode","loadLeaderboard","charAt","toUpperCase","AvatarSelector","avatarOptions","selectedAvatar","onSelect","onClose","avatar","ProfileForm","formData","onCancel","ProfileHeader","editing","showAvatarSelector","onEdit","onAvatarSelect","onAvatarSelectorToggle","Fragment","AchievementCard","isUnlocked","unlockDate","AchievementsSection","achievementDefinitions","transformedAchievements","definitions","entries","categoryData","_ref2","level","transformAchievementDefinitions","_achievements$achieve","_achievements$achieve2","GameHistoryItem","_game$timestamp","_game$countries","game","idx","GameHistory","gameHistory","useMemo","keys","flatMap","games","self","findIndex","g","ProfilePage","setProfile","setAchievements","setGameHistory","setEditing","setShowAvatarSelector","setFormData","loadProfile","userAchievements","userGameHistory","getAllTopGames","prev","leaderboardService","username","gameMode","limit","FirebaseTest","testScore","setTestScore","padding","addScore","marginLeft","marginTop","App","initialize","send","hitType","page","pathname","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode","BrowserRouter","DndProvider","backend","HTML5Backend"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,ujBCI3C,MAUMC,EAAMC,YAVW,CACrBC,OAAQC,0CACRC,WAAYD,+BACZE,UAAWF,eACXG,cAAeH,mCACfI,kBAAmBJ,cACnBK,MAAOL,6CAOIM,EAAOC,YAAQV,GAGfW,EAAKC,YAAaZ,GCX/B,MAAMa,EAAcC,0BAEb,SAASC,IACd,OAAOC,qBAAWH,GAGb,SAASI,EAAYC,GAAgB,IAAf,SAAEC,GAAUD,EACvC,MAAOE,EAAaC,GAAkBC,mBAAS,OACxCC,EAASC,GAAcF,oBAAS,GAcvCG,oBAAU,IACYC,YAAmBjB,EAAOkB,IAC5CN,EAAeM,GACfH,GAAW,KAIZ,IAEH,MAAMI,EAAQ,CACZR,cACAS,OAvBF,SAAgBC,EAAOC,GACrB,OAAOC,YAA+BvB,EAAMqB,EAAOC,IAuBnDE,MApBF,SAAeH,EAAOC,GACpB,OAAOG,YAA2BzB,EAAMqB,EAAOC,IAoB/CI,OAjBF,WACE,OAAOC,YAAQ3B,KAmBjB,OACE4B,IAAAC,cAACzB,EAAY0B,SAAQ,CAACX,MAAOA,IACzBL,GAAWJ,GCjDZ,MAAMqB,EAAgB,CAC3BC,iBAAgBA,IACP,CACL,CACEC,GAAI,UACJC,IAAK,0DACLC,KAAM,WAER,CACEF,GAAI,QACJC,IAAK,wDACLC,KAAM,SAER,CACEF,GAAI,OACJC,IAAK,uDACLC,KAAM,QAER,CACEF,GAAI,QACJC,IAAK,wDACLC,KAAM,SAER,CACEF,GAAI,WACJC,IAAK,2DACLC,KAAM,YAER,CACEF,GAAI,cACJC,IAAK,8DACLC,KAAM,eAER,CACEF,GAAI,WACJC,IAAK,2DACLC,KAAM,YAER,CACEF,GAAI,aACJC,IAAK,6DACLC,KAAM,gBCnCDC,EAAqB,CAEhC,qBAAqBC,GACnB,IACE,MAAMC,QAAgBC,YAAOC,YAAItC,EANd,QAMoCmC,IACvD,GAAIC,EAAQG,SACV,OAAOH,EAAQI,OAGjB,MAAMC,EAAiB,CACrBC,SAAU,GACVC,QAAS,GACTC,UAAWf,EAAcC,mBAAmB,GAAGE,IAC/Ca,UAAW,IAAIC,MAGjB,aADMC,KAAKC,kBAAkBb,EAAQM,GAC9BA,EACP,MAAOQ,GAEP,MADAC,QAAQD,MAAM,8BAA+BA,GACvCA,IAKV,wBAAwBd,EAAQgB,GAC9B,IACE,MAAMC,EAAUd,YAAItC,EA5BD,QA4BuBmC,SACpCkB,YAAOD,EAAS,IACjBD,EACHG,UAAW,IAAIR,MACd,CAAES,OAAO,IACZ,MAAON,GAEP,MADAC,QAAQD,MAAM,+BAAgCA,GACxCA,IAKV,yBAAyBd,EAAQqB,EAAOvC,GACtC,IACE,MAAMmC,EAAUd,YAAItC,EA1CD,QA0CuBmC,SACpCsB,YAAUL,EAAS,CACvB,CAACI,GAAQvC,EACTqC,UAAW,IAAIR,OAEjB,MAAOG,GAEP,MADAC,QAAQD,MAAM,gCAAiCA,GACzCA,K,MC9CG,SAASS,IACtB,MAAM,YAAEjD,EAAW,MAAEa,EAAK,OAAEJ,EAAM,OAAEM,GAAWpB,KACxCe,EAAOwC,GAAYhD,mBAAS,KAC5BS,EAAUwC,GAAejD,mBAAS,KAClCsC,EAAOY,GAAYlD,mBAAS,KAC5BC,EAASC,GAAcF,oBAAS,IAChCmD,EAAeC,GAAoBpD,oBAAS,IAC5CqD,EAAaC,GAAkBtD,mBAAS,MACzCuD,EAAWC,cAwDjB,OAtDArD,oBAAU,KACgBsD,WACtB,GAAI3D,EACF,IACE,MAAM4D,QAAgBnC,EAAmBoC,eAAe7D,EAAY8D,KACpEN,EAAeI,GACf,MAAOpB,GACPC,QAAQD,MAAM,8BAA+BA,KAInDuB,IACC,CAAC/D,IA0CAA,EAEAiB,IAAAC,cAAA,OAAK8C,UAAU,gBACb/C,IAAAC,cAAA,OAAK8C,UAAU,sBAAsBC,QAASA,IAAMR,EAAS,aAC3DxC,IAAAC,cAAA,OACEgD,KAAgB,OAAXX,QAAW,IAAXA,OAAW,EAAXA,EAAapB,YAAaf,EAAcC,mBAAmB,GAAGE,IACnE4C,IAAI,UACJH,UAAU,kBAEZ/C,IAAAC,cAAA,QAAM8C,UAAU,cAAwB,OAAXT,QAAW,IAAXA,OAAW,EAAXA,EAAatB,WAAYjC,EAAYU,QAEpEO,IAAAC,cAAA,UAAQ+C,QAvBdN,iBACE,IACEP,EAAS,IACThD,GAAW,SACLW,IACN0C,EAAS,KACT,MAAOjB,GACPY,EAAS,sBAAwBZ,EAAM4B,SAEzChE,GAAW,IAcwBiE,SAAUlE,EAAS6D,UAAU,iBAAgB,YAQhF/C,IAAAC,cAAA,OAAK8C,UAAU,gBACXX,EAKApC,IAAAC,cAAA,OAAK8C,UAAU,cACb/C,IAAAC,cAAA,SACEoD,KAAK,QACL9D,MAAOE,EACP6D,SAAWC,GAAMtB,EAASsB,EAAEC,OAAOjE,OACnCkE,YAAY,QACZC,UAAQ,IAEV1D,IAAAC,cAAA,SACEoD,KAAK,WACL9D,MAAOG,EACP4D,SAAWC,GAAMrB,EAAYqB,EAAEC,OAAOjE,OACtCkE,YAAY,WACZC,UAAQ,IAEV1D,IAAAC,cAAA,OAAK8C,UAAU,iBACb/C,IAAAC,cAAA,UAAQ+C,QAjFlBN,eAA2Ba,GACzBA,EAAEI,iBACF,IACExB,EAAS,IACThD,GAAW,SACLS,EAAMH,EAAOC,GACnB2C,GAAiB,GACjBG,EAAS,YACT,MAAOjB,GACPY,EAAS,qBAAuBZ,EAAM4B,SAExChE,GAAW,IAsE2BiE,SAAUlE,GAAS,SAGjDc,IAAAC,cAAA,UAAQ+C,QAtElBN,eAA4Ba,GAC1BA,EAAEI,iBACF,IACExB,EAAS,IACThD,GAAW,SACLK,EAAOC,EAAOC,GACpB2C,GAAiB,GACjBG,EAAS,YACT,MAAOjB,GACPY,EAAS,gCAAkCZ,EAAM4B,SAEnDhE,GAAW,IA2D4BiE,SAAUlE,GAAS,WAGlDc,IAAAC,cAAA,UAAQ+C,QAASA,IAAMX,GAAiB,IAAQ,WAIjDd,GAASvB,IAAAC,cAAA,KAAG2D,MAAO,CAAEC,MAAO,QAAUtC,IA9BzCvB,IAAAC,cAAA,UAAQ+C,QAASA,IAAMX,GAAiB,IAAO,oBCjDxCyB,MAnCf,WACE,MAAOC,EAAYC,GAAiB/E,oBAAS,GAMvCgF,EAAYA,KAChBD,GAAc,IAGhB,OACEhE,IAAAC,cAAA,UAAQ8C,UAAU,UAChB/C,IAAAC,cAAA,OAAK8C,UAAU,oBACb/C,IAAAC,cAACiE,IAAI,CAACC,GAAG,IAAIpB,UAAU,cAAcC,QAASiB,GAC5CjE,IAAAC,cAAA,OAAKgD,IAAKmB,IAAMlB,IAAI,cAAcH,UAAU,eAC5C/C,IAAAC,cAAA,QAAM8C,UAAU,aAAY,8BAE9B/C,IAAAC,cAAA,UAAQ8C,UAAU,cAAcC,QAfnBqB,KACjBL,GAAeD,KAc0C,UAGrD/D,IAAAC,cAAA,OAAK8C,UAAW,eAAcgB,EAAa,SAAW,KACpD/D,IAAAC,cAACiE,IAAI,CAACC,GAAG,IAAIpB,UAAU,WAAWC,QAASiB,GAAW,QACtDjE,IAAAC,cAACiE,IAAI,CAACC,GAAG,mBAAmBpB,UAAU,WAAWC,QAASiB,GAAW,cACrEjE,IAAAC,cAACiE,IAAI,CAACC,GAAG,aAAapB,UAAU,WAAWC,QAASiB,GAAW,QAC/DjE,IAAAC,cAACiE,IAAI,CAACC,GAAG,eAAepB,UAAU,WAAWC,QAASiB,GAAW,eACjEjE,IAAAC,cAAA,OAAK8C,UAAU,aACb/C,IAAAC,cAAC+B,EAAW,W,MClBTsC,MAXf,WACE,OACEtE,IAAAC,cAAA,UAAQ8C,UAAU,UAChB/C,IAAAC,cAAA,OAAK8C,UAAU,oBACb/C,IAAAC,cAAA,OAAKgD,IAAKmB,IAAMlB,IAAI,cAAcH,UAAU,gBAC5C/C,IAAAC,cAAA,SAAG,SAAQ,IAAImB,MAAOmD,cAAc,oC,MC2D7BC,MA/Df,WACE,MAAMhC,EAAWC,cAuBjB,OACEzC,IAAAC,cAAA,OAAK8C,UAAU,YAEb/C,IAAAC,cAAA,OAAK8C,UAAU,8BACb/C,IAAAC,cAAA,OAAK8C,UAAU,WACb/C,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,UACE8C,UAAU,wBACVC,QA5BmByB,KAE3BC,IAAQC,MAAM,CACZC,SAAU,OACVC,OAAQ,iCAGVrC,EAAS,sBAsBF,cAOLxC,IAAAC,cAAA,OAAK8C,UAAU,wBACb/C,IAAAC,cAAA,OAAK8C,UAAU,WACb/C,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,UACE8C,UAAU,wBACVC,QA/Ba8B,KAErBJ,IAAQC,MAAM,CACZC,SAAU,OACVC,OAAQ,2BAGVrC,EAAS,gBAyBF,cAOLxC,IAAAC,cAAA,OAAK8C,UAAU,+BACb/C,IAAAC,cAAA,OAAK8C,UAAU,WACb/C,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAAA,SAAG,mB,MCNE8E,MApDf,SAAoBlG,GAA6C,IAA5C,QAAEoC,EAAO,YAAE+D,EAAW,UAAEC,EAAS,KAAEC,GAAMrG,EAC5D,MAAOsG,EAAWC,GAAgBnG,oBAAS,GAQrCoG,EAAiBJ,EAAY,eAAeA,EAAc,GAUhE,OACEjF,IAAAC,cAAA,OACE8C,UAAW,gBAAgBoC,EAAY,UAAY,MACjDH,EAAc,YAAc,MAC1BK,IACJrC,QArBgBsC,KACdN,GACFI,GAAcD,KAqBdnF,IAAAC,cAAA,OAAK8C,UAAU,cAEb/C,IAAAC,cAAA,OAAK8C,UAAW,wBAAwBsC,GACtCrF,IAAAC,cAAA,OACEgD,IAAKhC,EAAQsE,QACbrC,IAAK,WAAWjC,EAAQV,KACxBwC,UAAU,iBAEZ/C,IAAAC,cAAA,OAAK8C,UAAU,gBACb/C,IAAAC,cAAA,MAAI8C,UAAU,gBAAgB9B,EAAQV,QAI1CP,IAAAC,cAAA,OAAK8C,UAAW,uBAAuBsC,GACrCrF,IAAAC,cAAA,OAAK8C,UAAU,gBACb/C,IAAAC,cAAA,MAAI8C,UAAU,gBAAgB9B,EAAQV,MACtCP,IAAAC,cAAA,KAAG8C,UAAU,kBA9BE,CACrByC,WAAY,eAAevE,EAAQuE,WAAWC,iBAC9CC,KAAM,SAASzE,EAAQyE,KAAKD,2BAERP,IAAS,S,MCnB5B,MCGDS,EAA0B,CAC9BH,WAAY,CACVI,QAAS,CACPC,OAAQ,CAAExF,GAAI,4BAA6ByF,MAAO,2BAA4BC,YAAa,2CAA4CC,KAAM,eAAMC,YAAa,GAChKC,OAAQ,CAAE7F,GAAI,4BAA6ByF,MAAO,2BAA4BC,YAAa,2CAA4CC,KAAM,eAAMC,YAAa,GAChKE,KAAM,CAAE9F,GAAI,0BAA2ByF,MAAO,yBAA0BC,YAAa,4CAA6CC,KAAM,eAAMC,YAAa,IAC3JG,SAAU,CAAE/F,GAAI,8BAA+ByF,MAAO,6BAA8BC,YAAa,4CAA6CC,KAAM,eAAMC,YAAa,KAEzKI,UAAW,CACThG,GAAI,mBACJyF,MAAO,yBACPC,YAAa,uCACbC,KAAM,eACNC,YAAa,KAGjBP,KAAM,CACJE,QAAS,CACPC,OAAQ,CAAExF,GAAI,sBAAuByF,MAAO,qBAAsBC,YAAa,qCAAsCC,KAAM,eAAMC,YAAa,GAC9IC,OAAQ,CAAE7F,GAAI,sBAAuByF,MAAO,qBAAsBC,YAAa,qCAAsCC,KAAM,eAAMC,YAAa,GAC9IE,KAAM,CAAE9F,GAAI,oBAAqByF,MAAO,mBAAoBC,YAAa,sCAAuCC,KAAM,eAAMC,YAAa,IACzIG,SAAU,CAAE/F,GAAI,wBAAyByF,MAAO,uBAAwBC,YAAa,sCAAuCC,KAAM,eAAMC,YAAa,KAEvJI,UAAW,CACThG,GAAI,aACJyF,MAAO,mBACPC,YAAa,iCACbC,KAAM,eACNC,YAAa,MAKNK,EAAsB,CAEjC,0BAA0B7F,GACxB,IACE,MAAMC,QAAgBC,YAAOC,YAAItC,EAvCP,eAuCoCmC,IAC9D,OAAOC,EAAQG,SAAWH,EAAQI,OAAS,KAC3C,MAAOS,GAEP,MADAC,QAAQD,MAAM,mCAAoCA,GAC5CA,IAKV,6BAA6Bd,EAAQ8F,GACnC,UACQ5E,YAAOf,YAAItC,EAlDS,eAkDoBmC,GAAS,IAClD8F,EACH3E,UAAW4E,eACV,CAAE3E,OAAO,IACZ,MAAON,GAEP,MADAC,QAAQD,MAAM,oCAAqCA,GAC7CA,IAKV,iCAAiCd,EAAQmE,EAAU6B,GACjD,IAAK,IAADC,EAAAC,EACF,MAAMC,QAA4BvF,KAAKwF,oBAAoBpG,IAAW,GAChEqG,EAAuBnB,EAAwBf,GACrD,IAAImC,GAAU,EAGdC,OAAOC,OAAOH,EAAqBlB,SAASsB,QAAQC,KAC7CP,EAAoBO,EAAY9G,KAAOoG,GAAgBU,EAAYlB,cACtEW,EAAoBO,EAAY9G,IAAM,CACpC+G,UAAU,EACVC,WAAYb,eAEdO,GAAU,KAKd,MAAMO,EAAuBR,EAAqBT,UAC5CkB,IAA4D,QAA5Cb,EAAAE,EAAoBU,EAAqBjH,WAAG,IAAAqG,OAAA,EAA5CA,EAA8Cc,QAAS,GAAK,EAqBlF,OAnBID,GAAgBD,EAAqBrB,eAA4D,QAA7CU,EAACC,EAAoBU,EAAqBjH,WAAG,IAAAsG,OAAA,EAA5CA,EAA8CS,WACrGR,EAAoBU,EAAqBjH,IAAM,CAC7C+G,UAAU,EACVC,WAAYb,cACZgB,MAAOD,GAETR,GAAU,IAEVH,EAAoBU,EAAqBjH,IAAM,IAC1CuG,EAAoBU,EAAqBjH,IAC5CmH,MAAOD,GAETR,GAAU,GAGRA,SACI1F,KAAKoG,uBAAuBhH,EAAQmG,GAGrCA,EACP,MAAOrF,GAEP,MADAC,QAAQD,MAAM,+BAAgCA,GACxCA,IAKVmG,0BAAyBA,IAChB/B,GCsFIgC,MA7Lf,WACE,MAAM,YAAE5I,GAAgBL,KACjBkJ,EAAiBC,GAAsB5I,mBAAS,KAChD6I,EAAgBC,GAAqB9I,mBAAS,OAC9C+I,EAAoBC,GAAyBhJ,mBAAS,KACtDiJ,EAAOC,GAAYlJ,mBAAS,IAC5BmJ,EAAYC,GAAiBpJ,mBAAS,OACvC,KAAEiG,GAASoD,cACX9F,EAAWC,cAGX8F,EAAoBC,IACxB,MAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUK,QACzD,OAAOL,EAAUM,OAAOL,EAAa,GAAG,IAGpCM,EAAeC,sBAAalI,IAChC,MAAMmI,EAAqB,IAAInI,GAGzBoI,EAAeX,EAAiBU,GAChCE,EAAcZ,EAAiBU,GAErCpB,EAAmB,CAACqB,IACpBjB,EAAsBgB,GACtBd,EAAS,GACTJ,EAAkBoB,IACjB,IAEH/J,oBAAU,KACesD,WACrB,MAEM0G,QFzCkB1G,WAC5B,IACE,MAAM2G,QAAiBC,MAAM,sCAC7B,IAAKD,EAASE,GACZ,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,QAElD,MAAM3I,QAAauI,EAASK,OAC5B,IAAKC,MAAMC,QAAQ9I,GACjB,MAAM,IAAI0I,MAAM,yCAIlB,MAAMK,EAAoB/I,EAAKgJ,OAAQ7I,IAAO,IAAA8I,EAAAC,EAAA,OAC5C/I,EAAQgJ,WACI,QADIF,EAChB9I,EAAQV,YAAI,IAAAwJ,OAAA,EAAZA,EAAcG,UACD,QADOF,EACpB/I,EAAQkJ,aAAK,IAAAH,OAAA,EAAbA,EAAeI,MACe,kBAAvBnJ,EAAQuE,YACS,kBAAjBvE,EAAQyE,OAYjB,OARkBmE,EAAkBQ,IAAI,CAACpJ,EAASqJ,KAAK,CACrDjK,GAAIiK,EAAQ,EACZ/J,KAAMU,EAAQV,KAAK2J,OACnB3E,QAAStE,EAAQkJ,MAAMC,IACvB5E,WAAYvE,EAAQuE,WACpBE,KAAMzE,EAAQyE,QAIhB,MAAOnE,GAEP,MADAC,QAAQD,MAAM,4BAA6BA,GACrC,IAAIiI,MAAM,6DEOKe,IAEST,OACzB7I,GAAYA,EAAQuE,YAAcvE,EAAQyE,MAAQzE,EAAQsE,SAE7DwD,EAAaK,IAGfoB,IACC,CAACzB,IAGJ,MAAM0B,EAA2B,SAATvF,EAAkB,OAAS,aAmC7CwF,EAAehI,UACnB,MAAMiI,EAAqB,IAAI/C,GAG/B,GAFA+C,EAAmB7B,OAAOwB,EAAO,EAAGxC,GAEhC8C,EAAeD,GACjB9C,EAAmB8C,GACnBxC,EAAU0C,GAAcA,EAAY,GACpC9C,EAAkB,MAxCErF,WACtB,GAAkC,IAA9BsF,EAAmBa,OAAc,CAMnC,GALArH,QAAQsJ,IAAI,gCACZtJ,QAAQsJ,IAAI,eAAgB5C,GAC5B1G,QAAQsJ,IAAI,QAAS5F,GAGjBnG,EACF,IACEyC,QAAQsJ,IAAI,kCAAmC/L,EAAY8D,KAC3D,MAAMkI,QAA4BzE,EAAoB0E,2BAA2BjM,EAAY8D,IAAKqC,EAAMgD,GACxG1G,QAAQsJ,IAAI,wBAAyBC,GACrC,MAAOxJ,GACPC,QAAQD,MAAM,+BAAgCA,QAGhDC,QAAQsJ,IAAI,kDAMd,YAHAtI,EAAS,YAAa,CACpByI,MAAO,CAAE/C,QAAO/E,QAAS,uDAAwD+B,UAKrF,MAAMgG,EAAgB,IAAIlD,GACpBS,EAAcC,KAAKC,MAAMD,KAAKE,SAAWsC,EAAcrC,QACvDM,EAAc+B,EAAcpC,OAAOL,EAAa,GAAG,GAEzDV,EAAkBoB,GAClBlB,EAAsBiD,IAWpBC,OACK,CACL,MACMC,EAAe,IADA,IAAIxD,EAAiBE,IACHuD,KAAK,CAACC,EAAGC,IAAMD,EAAEb,GAAmBc,EAAEd,IAQ7E,GANAjJ,QAAQsJ,IAAI,uCACZtJ,QAAQsJ,IAAI,eAAgB5C,GAC5B1G,QAAQsJ,IAAI,QAAS5F,GACrB1D,QAAQsJ,IAAI,8BAA+B5C,GAGvCnJ,EACF,IACEyC,QAAQsJ,IAAI,kCAAmC/L,EAAY8D,KAC3D,MAAMkI,QAA4BzE,EAAoB0E,2BAA2BjM,EAAY8D,IAAKqC,EAAMgD,GACxG1G,QAAQsJ,IAAI,wBAAyBC,GACrC,MAAOxJ,GACPC,QAAQD,MAAM,+BAAgCA,QAGhDC,QAAQsJ,IAAI,kDAGdtI,EAAS,YAAa,CACpByI,MAAO,CACL/C,QACA/E,QAAS,uBACTqI,iBAAkB1D,EAClB2D,UAAWd,EACXS,aAAcA,EACdlG,YAMF0F,EAAkBc,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAc7C,OAAS,EAAG8C,IAC5C,GAAID,EAAcC,GAAGlB,GAAmBiB,EAAcC,EAAI,GAAGlB,GAC3D,OAAO,EAGX,OAAO,GAGT,OACEzK,IAAAC,cAAA,OAAK8C,UAAU,aACb/C,IAAAC,cAAA,UAAI,qBAA4B,SAATiF,EAAkB,OAAS,aAAa,gBAC/DlF,IAAAC,cAAA,SAAG,UAAQiI,EAAQ,GACnBlI,IAAAC,cAAA,OAAK8C,UAAU,8BACZ+E,GACC9H,IAAAC,cAAA,OAAK8C,UAAU,gBACb/C,IAAAC,cAAA,SAAG,cACUD,IAAAC,cAAA,cAAS6H,EAAevH,MAAc,qCAIvDP,IAAAC,cAAA,OAAK8C,UAAU,oBACZ6E,EAAgByC,IAAI,CAACpJ,EAASqJ,IAC7BtK,IAAAC,cAAC8E,EAAW,CACV6G,IAAK,WAAW3K,EAAQZ,GACxBY,QAASA,EACT+D,aAAa,EACbE,KAAMA,EACND,UAAWmD,IAAekC,EAAQ,QAAU,OAKjDxC,GACC9H,IAAAC,cAAA,OAAK8C,UAAU,kBACb/C,IAAAC,cAAA,UACE8C,UAAU,6BACVC,QAASA,IAAM0H,EAAa,GAC5BmB,aAAcA,IAAMxD,EAAc,GAClCyD,aAAcA,IAAMzD,EAAc,OACnC,UAGAT,EAAgByC,IAAI,CAAC0B,EAAGzB,IACvBtK,IAAAC,cAAA,UACE2L,IAAK,WAAUtB,EAAQ,GACvBvH,UAAW,kBAAiBuH,IAAU1C,EAAgBiB,OAAS,EAAI,gBAAkB,eACrF7F,QAASA,IAAM0H,EAAaJ,EAAQ,GACpCuB,aAAcA,IAAMxD,EAAciC,EAAQ,GAC1CwB,aAAcA,IAAMzD,EAAc,OAEjCiC,IAAU1C,EAAgBiB,OAAS,EAAI,SAAMyB,EAAQ,MAM/DxC,GACC9H,IAAAC,cAAA,OAAK8C,UAAU,mBACb/C,IAAAC,cAAA,UAAI,oBACJD,IAAAC,cAAC8E,EAAW,CAAC9D,QAAS6G,EAAgB9C,aAAa,EAAOE,KAAMA,OC3L1E,MAqBa8G,EAAiB,WAAkB,IAAjB9G,EAAI+G,UAAApD,OAAA,QAAAqD,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACpC,MAAME,EAAcC,KAAKC,MAAMC,aAAaC,QAtBtB,uBAsBkD,MACxE,OAAIrH,EACKiH,EAAYrC,OAAO0C,GAASA,EAAMtH,OAASA,GAE7CiH,GC3BHM,EAAa,CAAC,aAAc,QAErBC,EAAqB,CAChC,kBAAkBjM,EAAQmE,GAA2B,IAAjB+H,EAAUV,UAAApD,OAAA,QAAAqD,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC/C,IACE,MAAMW,EAAWC,YAAWvO,EANF,eAOpBwO,EAAIC,YACRH,EACAI,YAAM,SAAU,KAAMvM,GACtBuM,YAAM,WAAY,KAAMpI,GACxBqI,YAAQ,QAAS,QACjBC,YAAeP,IAIjB,aAD4BQ,YAAQL,IACfM,KAAK/C,IAAIzJ,IAAG,CAC/BP,GAAIO,EAAIP,MACLO,EAAIE,UAET,MAAOS,GAEP,MAAMuL,EAAIC,YACRF,YAAWvO,EAvBa,eAwBxB0O,YAAM,SAAU,KAAMvM,GACtBuM,YAAM,WAAY,KAAMpI,IAS1B,aAN4BuI,YAAQL,IACRM,KAAK/C,IAAIzJ,IAAG,CACtCP,GAAIO,EAAIP,MACLO,EAAIE,UAGIuK,KAAK,CAACC,EAAGC,IAAMA,EAAErD,MAAQoD,EAAEpD,OAAOmF,MAAM,EAAGV,KAI5D,qBAAqBlM,GACnB,IACE,MAAM6M,EAAW,GAMjB,aALMC,QAAQC,IACZf,EAAWpC,IAAI3H,UACb4K,EAAS1I,SAAkBvD,KAAKoM,YAAYhN,EAAQmE,MAGjD0I,EACP,MAAO/L,GAEP,OADAC,QAAQD,MAAM,gCAAiCA,GACxC,KAIX,eAAed,EAAQmE,EAAUsD,EAAOM,GACtC,IACE,MAAMkF,EAAmBlF,EAAU6B,IAAIxL,IAAA,IAAC,GAAEwB,EAAE,KAAEE,EAAI,QAAEgF,GAAS1G,EAAA,MAAM,CACjEwB,KACAE,OACAgF,mBAGIoI,YAAOd,YAAWvO,EA7DE,eA6D4B,CACpDmC,SACAmE,WACAsD,QACAM,UAAWkF,EACXE,UAAWpH,gBAEb,MAAOjF,GAEP,MADAC,QAAQD,MAAM,6BAA8BA,GACtCA,K,YC0EGsM,MAxIf,WACE,MAAMC,EAAWC,cACXvL,EAAWC,eACX,YAAE1D,GAAgBL,KAClB,MAAEwJ,EAAK,QAAE/E,EAAO,iBAAEqI,EAAgB,UAAEC,EAAS,aAAEL,EAAY,KAAElG,GAAS4I,EAAS7C,OAAS,IACvF+C,EAAYC,GAAiBhP,mBAAS,KACtCiP,EAAaC,GAAkBlP,oBAAS,IACxCsC,EAAOY,GAAYlD,mBAAS,IAC7BmP,EAAWC,kBAAO,GAiDxB,OA/CAjP,oBAAU,KACgBsD,WACtB,GAAI3D,GAAe0M,IAAc2C,EAASE,QACxC,IACE9M,QAAQsJ,IAAI,mCAAoC,CAC9CrK,OAAQ1B,EAAY8D,IACpBqC,OACAgD,MAAOA,EAAQ,EACfqG,eAAgB9C,EAAU5C,eAGtB6D,EAAmB8B,SACvBzP,EAAY8D,IACZqC,EACAgD,EAAQ,EACRuD,EAAUpB,IAAIpJ,IAAO,CACnBZ,GAAIY,EAAQZ,GACZE,KAAMU,EAAQV,KACdgF,QAAStE,EAAQsE,YAGrB6I,EAASE,SAAU,EACnB9M,QAAQsJ,IAAI,mCACZ,MAAOvJ,GACPC,QAAQD,MAAM,6BAA8BA,KAKlDkN,IACC,CAAC1P,EAAa0M,EAAWvG,EAAMgD,IAkBhClI,IAAAC,cAAA,OAAK8C,UAAU,kBACb/C,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,SAAIkD,GACJnD,IAAAC,cAAA,SAAG,qBAAmBiI,EAAQ,GAE5BgG,EAmBAlO,IAAAC,cAAA,OAAK8C,UAAU,sBACb/C,IAAAC,cAAA,SAAG,kCAnBLD,IAAAC,cAAA,QAAMyO,SAtBUnL,IAEpB,GADAA,EAAEI,iBACGqK,EAAWW,OAKhB,IFrDuBC,EAACZ,EAAY9F,EAAOhD,KAC7C,MAAMiH,EAAcH,IACd6C,EAAW,CACfxO,GAAIe,KAAK0N,MACTd,aACA9F,QACAhD,OACA6J,MAAM,IAAI3N,MAAO4N,eAGnB7C,EAAY8C,KAAKJ,GAEjB1C,EAAYd,KAAK,CAACC,EAAGC,IAAMA,EAAErD,MAAQoD,EAAEpD,OACvC,MAAMgH,EAAS/C,EAAYkB,MAAM,EAAG,KAEpCf,aAAa6C,QAjBS,qBAiBgB/C,KAAKgD,UAAUF,KEuCjDN,CAAYZ,EAAY9F,EAAQ,EAAGhD,GACnCiJ,GAAe,GACf,MAAOkB,GACPlN,EAAS,kDARTA,EAAS,2BAmBuBY,UAAU,oBACtC/C,IAAAC,cAAA,OAAK8C,UAAU,eACb/C,IAAAC,cAAA,SAAOqP,QAAQ,cAAa,oBAC5BtP,IAAAC,cAAA,SACEoD,KAAK,OACLhD,GAAG,aACHd,MAAOyO,EACP1K,SAAWC,GAAM0K,EAAc1K,EAAEC,OAAOjE,OACxCkE,YAAY,YACZ8L,UAAW,MAGdhO,GAASvB,IAAAC,cAAA,KAAG8C,UAAU,SAASxB,GAChCvB,IAAAC,cAAA,UAAQoD,KAAK,SAASN,UAAU,yBAAwB,iBAU3D0I,GAAaD,GACZxL,IAAAC,cAAA,OAAK8C,UAAU,cACb/C,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,OAAK8C,UAAU,gBACZ0I,EAAUpB,IAAKpJ,GACdjB,IAAAC,cAAC8E,EAAW,CACV6G,IAAK3K,EAAQZ,GACbY,QAASA,EACT+D,aAAa,EACbC,UAAWhE,EAAQZ,KAAOmL,EAAiBnL,GAAK,YAAc,GAC9D6E,KAAMA,OAOfkG,GAAgBI,GACfxL,IAAAC,cAAA,OAAK8C,UAAU,iBACb/C,IAAAC,cAAA,UAAI,0BACJD,IAAAC,cAAA,OAAK8C,UAAU,gBACZqI,EAAaf,IAAKpJ,GACjBjB,IAAAC,cAAC8E,EAAW,CACV6G,IAAK3K,EAAQZ,GACbY,QAASA,EACT+D,aAAa,EACbC,UAAWhE,EAAQZ,KAAOmL,EAAiBnL,GAAK,UAAY,GAC5D6E,KAAMA,OAOhBlF,IAAAC,cAAA,OAAK8C,UAAU,qBACb/C,IAAAC,cAAA,UAAQ8C,UAAU,wBAAwBC,QAASA,IAAMR,EAAS,SAAS0C,IAAS,cAGpFlF,IAAAC,cAAA,UAAQ8C,UAAU,0BAA0BC,QAASA,IAAMR,EAAS,MAAM,mBAG1ExC,IAAAC,cAAA,UAAQ8C,UAAU,0BAA0BC,QAASA,IAAMR,EAAS,iBAAiB,uBC3ItF,MAAMgN,EAAc5B,IACX,OAATA,QAAS,IAATA,OAAS,EAATA,EAAW6B,QACT7B,EAAU6B,SAASC,mBAAmB,QAAS,CACpDC,KAAM,UACNC,MAAO,QACPC,IAAK,YAJwB,K,MCqElBC,MAjEf,WACE,MAAO3D,EAAa4D,GAAkB9Q,mBAAS,KACxC+Q,EAAcC,GAAmBhR,mBAAS,MAUjD,OARAG,oBAAU,KACgB8Q,MACtB,MAAMpP,EAAOkL,EAAegE,GAC5BD,EAAejP,IAEjBoP,IACC,CAACF,IAGFhQ,IAAAC,cAAA,OAAK8C,UAAU,oBACb/C,IAAAC,cAAA,UAAI,eAEJD,IAAAC,cAAA,OAAK8C,UAAU,gBACb/C,IAAAC,cAAA,UACE8C,UAAW,WAAWiN,EAAkC,mBAAnB,kBACrChN,QAASA,IAAMiN,EAAgB,OAChC,aAGDjQ,IAAAC,cAAA,UACE8C,UAAW,WAA2B,eAAjBiN,EAAgC,iBAAmB,oBACxEhN,QAASA,IAAMiN,EAAgB,eAChC,cAGDjQ,IAAAC,cAAA,UACE8C,UAAW,WAA2B,SAAjBiN,EAA0B,iBAAmB,oBAClEhN,QAASA,IAAMiN,EAAgB,SAChC,SAKHjQ,IAAAC,cAAA,OAAK8C,UAAU,qBACb/C,IAAAC,cAAA,aACED,IAAAC,cAAA,aACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,UAAI,UACJD,IAAAC,cAAA,UAAI,SACJD,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,UAAI,UAGRD,IAAAC,cAAA,aACGkM,EAAY9B,IAAI,CAACmC,EAAOlC,IACvBtK,IAAAC,cAAA,MAAI2L,IAAKY,EAAMnM,IACbL,IAAAC,cAAA,UAAKqK,EAAQ,GACbtK,IAAAC,cAAA,UAAKuM,EAAMwB,YACXhO,IAAAC,cAAA,UAAKuM,EAAMtE,OACXlI,IAAAC,cAAA,UAAKuM,EAAMtH,KAAKiL,OAAO,GAAGC,cAAgB5D,EAAMtH,KAAKmI,MAAM,IAC3DrN,IAAAC,cAAA,UAAKuP,EAAWhD,EAAMuC,c,MC5BvBsB,MA5BQxR,IAAA,IAAC,cAAEyR,EAAa,eAAEC,EAAc,SAAEC,EAAQ,QAAEC,GAAS5R,EAAA,OAC1EmB,IAAAC,cAAA,OAAK8C,UAAU,mBACb/C,IAAAC,cAAA,OAAK8C,UAAU,eACZuN,EAAcjG,IAAIqG,GACjB1Q,IAAAC,cAAA,OACE2L,IAAK8E,EAAOrQ,GACZ0C,UAAW,kBAAiBwN,IAAmBG,EAAOpQ,IAAM,WAAa,IACzE0C,QAASA,IAAMwN,EAASE,EAAOpQ,MAE/BN,IAAAC,cAAA,OAAKgD,IAAKyN,EAAOpQ,IAAK4C,IAAKwN,EAAOnQ,OAClCP,IAAAC,cAAA,YAAOyQ,EAAOnQ,W,MC8BToQ,MAxCK9R,IAAA,IAAC,SAAE+R,EAAQ,SAAElC,EAAQ,SAAEpL,EAAQ,SAAEuN,GAAUhS,EAAA,OAC7DmB,IAAAC,cAAA,QAAMyO,SAAUA,EAAU3L,UAAU,gBAClC/C,IAAAC,cAAA,OAAK8C,UAAU,cACb/C,IAAAC,cAAA,aAAO,aACPD,IAAAC,cAAA,SACEoD,KAAK,OACL9C,KAAK,WACLhB,MAAOqR,EAAS5P,SAChBsC,SAAUA,EACVI,UAAQ,KAGZ1D,IAAAC,cAAA,OAAK8C,UAAU,cACb/C,IAAAC,cAAA,aAAO,YACPD,IAAAC,cAAA,SACEoD,KAAK,OACL9C,KAAK,UACLhB,MAAOqR,EAAS3P,QAChBqC,SAAUA,EACVI,UAAQ,KAGZ1D,IAAAC,cAAA,OAAK8C,UAAU,gBACb/C,IAAAC,cAAA,UAAQoD,KAAK,SAASN,UAAU,eAAc,gBAC9C/C,IAAAC,cAAA,UAAQoD,KAAK,SAASL,QAAS6N,EAAU9N,UAAU,iBAAgB,a,MCqE1D+N,MA3FOjS,IAAA,IAAC,QACrB8D,EAAO,YACP5D,EAAW,QACXgS,EAAO,SACPH,EAAQ,cACRN,EAAa,mBACbU,EAAkB,OAClBC,EAAM,eACNC,EAAc,uBACdC,EAAsB,SACtBzC,EAAQ,SACRpL,EAAQ,SACRuN,GACDhS,EAAA,OACCmB,IAAAC,cAAA,OAAK8C,UAAU,kBACb/C,IAAAC,cAAA,OAAK8C,UAAU,oBACb/C,IAAAC,cAAA,OACEgD,KAAY,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAASzB,YAAaoP,EAAc,GAAGhQ,IAC5C4C,IAAI,UACJH,UAAU,mBAEXgO,GACC/Q,IAAAC,cAAA,UACE8C,UAAU,uBACVC,QAASmO,GACV,iBAIFH,GACChR,IAAAC,cAACoQ,EAAc,CACbC,cAAeA,EACfC,eAAgBK,EAAS1P,UACzBsP,SAAUU,EACVT,QAASA,IAAMU,GAAuB,MAI5CnR,IAAAC,cAAA,OAAK8C,UAAU,gBACb/C,IAAAC,cAAA,OAAK8C,UAAU,gBACXgO,EAUA/Q,IAAAC,cAAC0Q,EAAW,CACVC,SAAUA,EACVlC,SAAUA,EACVpL,SAAUA,EACVuN,SAAUA,IAbZ7Q,IAAAC,cAAAD,IAAAoR,SAAA,KACEpR,IAAAC,cAAA,MAAI8C,UAAU,aAAmB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAAS3B,WAAY,qBAC/ChB,IAAAC,cAAA,KAAG8C,UAAU,SAAShE,EAAYU,OAClCO,IAAAC,cAAA,KAAG8C,UAAU,YAAkB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAAS1B,UAAW,oBAC5CjB,IAAAC,cAAA,UAAQ+C,QAASiO,EAAQlO,UAAU,eAAc,qB,MCf9CsO,MA/BSxS,IAAA,IAAC,YAAEsI,EAAW,WAAEmK,EAAU,WAAEC,GAAY1S,EAAA,OAC9DmB,IAAAC,cAAA,OAAK8C,UAAW,qBAAoBuO,EAAa,WAAa,WAC5DtR,IAAAC,cAAA,OAAK8C,UAAU,uBACb/C,IAAAC,cAAA,OAAK8C,UAAU,oBAAoBoE,EAAYnB,MAC/ChG,IAAAC,cAAA,OAAK8C,UAAU,oBACb/C,IAAAC,cAAA,UAAKkH,EAAYrB,OACjB9F,IAAAC,cAAA,SAAIkH,EAAYpB,aACfuL,GAAcC,GACbvR,IAAAC,cAAA,OAAK8C,UAAU,oBAAmB,aACrByM,EAAW+B,MAK9BvR,IAAAC,cAAA,OAAK8C,UAAU,sBACZuO,EAAa,SAAM,kB,MCcXE,MA5Ba3S,IAA+C,IAA9C,uBAAE4S,EAAsB,aAAElL,GAAc1H,EACnE,MAAM6S,ECPwCC,KAC9C,MAAMpL,EAAe,GAuBrB,OApBAS,OAAO4K,QAAQD,GAAazK,QAAQrI,IAA+B,IAA7B+F,EAAUiN,GAAahT,EAE3DmI,OAAO4K,QAAQC,EAAajM,SAASsB,QAAQ4K,IAA2B,IAAzBC,EAAO5K,GAAY2K,EAChEvL,EAAa0I,KAAK,IACb9H,EACHvC,WACAvB,KAAM,cAKNwO,EAAaxL,WACfE,EAAa0I,KAAK,IACb4C,EAAaxL,UAChBzB,WACAvB,KAAM,gBAKLkD,GDjByByL,CAAgCP,GAEhE,OACEzR,IAAAC,cAAA,OAAK8C,UAAU,wBACb/C,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,OAAK8C,UAAU,qBACZ2O,EAAwBrH,IAAIlD,IAAW,IAAA8K,EAAAC,EAAA,OACtClS,IAAAC,cAACoR,EAAe,CACdzF,IAAKzE,EAAY9G,GACjB8G,YAAaA,EACbmK,WAAwB,OAAZ/K,QAAY,IAAZA,GAA8B,QAAlB0L,EAAZ1L,EAAeY,EAAY9G,WAAG,IAAA4R,OAAlB,EAAZA,EAAgC7K,SAC5CmK,WAAwB,OAAZhL,QAAY,IAAZA,GAA8B,QAAlB2L,EAAZ3L,EAAeY,EAAY9G,WAAG,IAAA6R,OAAlB,EAAZA,EAAgC7K,kB,MEoBzC8K,MAjCStT,IAAA,IAAAuT,EAAAC,EAAA,IAAC,KAAEC,EAAI,MAAEhI,GAAOzL,EAAA,OACtCmB,IAAAC,cAAA,OAAK8C,UAAU,qBACb/C,IAAAC,cAAA,OAAK8C,UAAU,aAAY,IAAEuH,EAAQ,GACrCtK,IAAAC,cAAA,OAAK8C,UAAU,cAAa,UAAQuP,EAAKpK,OACzClI,IAAAC,cAAA,OAAK8C,UAAU,aAAauP,EAAK1N,SAASuL,OAAO,GAAGC,cAAgBkC,EAAK1N,SAASyI,MAAM,GAAG,SAC3FrN,IAAAC,cAAA,OAAK8C,UAAU,cACE,QAAdqP,EAAAE,EAAK1E,iBAAS,IAAAwE,OAAA,EAAdA,EAAgB3C,QAASD,EAAW8C,EAAK1E,WAAa,oBAEzD5N,IAAAC,cAAA,OAAK8C,UAAU,kBACE,QADcsP,EAC5BC,EAAK9J,iBAAS,IAAA6J,OAAA,EAAdA,EAAgBhI,IAAI,CAACpJ,EAASsR,IAC7BvS,IAAAC,cAAA,OAAK2L,IAAK2G,EAAKxP,UAAU,gBACvB/C,IAAAC,cAAA,OAAKgD,IAAKhC,EAAQsE,QAASrC,IAAKjC,EAAQV,KAAMwC,UAAU,iBACxD/C,IAAAC,cAAA,YAAOgB,EAAQV,W,MCkDViS,MA9DK3T,IAAsB,IAArB,YAAE4T,GAAa5T,EAClC,MAAMyO,EAAWoF,kBAAQ,KACvB,IAAKD,GAAmD,IAApCzL,OAAO2L,KAAKF,GAAa5J,OAC3C,MAAO,GAYT,OATgB7B,OAAO4K,QAAQa,GACAG,QAAQd,IAAA,IAAElN,EAAUiO,GAAMf,EAAA,OACvDe,EAAMxI,IAAIiI,IAAI,IAAUA,EAAM1N,gBAGGkF,OAAO,CAACwI,EAAMhI,EAAOwI,IACtDxI,IAAUwI,EAAKC,UAAWC,GAAMA,EAAE3S,KAAOiS,EAAKjS,KAI7CgL,KAAK,CAACC,EAAGC,IAAMA,EAAErD,MAAQoD,EAAEpD,OAC3BmF,MAAM,EAAG,IACX,CAACoF,IAEJ,OAAKA,EASmC,IAApCzL,OAAO2L,KAAKF,GAAa5J,OAEzB7I,IAAAC,cAAA,OAAK8C,UAAU,wBACb/C,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,SAAG,oEAMPD,IAAAC,cAAA,OAAK8C,UAAU,wBACb/C,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,OAAK8C,UAAU,qBACZuK,EAASjD,IAAI,CAACiI,EAAMhI,IACnBtK,IAAAC,cAACkS,EAAe,CAACvG,IAAK0G,EAAKjS,GAAIiS,KAAMA,EAAMhI,MAAOA,OArBtDtK,IAAAC,cAAA,OAAK8C,UAAU,wBACb/C,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,SAAG,6B,MCmGIgT,MApHKA,KAClB,MAAM,YAAElU,GAAgBL,IAClB8D,EAAWC,eACVE,EAASuQ,GAAcjU,mBAAS,OAChCsH,EAAc4M,GAAmBlU,mBAAS,OAC1CwT,EAAaW,GAAkBnU,mBAAS,OACxCC,EAASC,GAAcF,oBAAS,IAChCsC,EAAOY,GAAYlD,mBAAS,KAC5B8R,EAASsC,GAAcpU,oBAAS,IAChC+R,EAAoBsC,GAAyBrU,oBAAS,IACtD2R,EAAU2C,GAAetU,mBAAS,CACvC+B,SAAU,GACVC,QAAS,GACTC,UAAW,KAGPoP,EAAgBnQ,EAAcC,mBAC9BqR,EAAyBnL,EAAoBoB,4BAC7CjH,EAAoB,OAAX1B,QAAW,IAAXA,OAAW,EAAXA,EAAa8D,IAEtB2Q,EAAcxK,sBAAYtG,UAC9B,GAAKjC,EAEL,IACE,MAAO6B,EAAamR,EAAkBC,SAAyBnG,QAAQC,IAAI,CACzEhN,EAAmBoC,eAAenC,GAClC6F,EAAoBO,oBAAoBpG,GACxCiM,EAAmBiH,eAAelT,KAGhC6B,IACF4Q,EAAW5Q,GACXiR,EAAY,CACVvS,SAAUsB,EAAYtB,UAAY,GAClCC,QAASqB,EAAYrB,SAAW,GAChCC,UAAWoB,EAAYpB,WAAaoP,EAAc,GAAGhQ,OAIzD6S,EAAgBM,GAChBL,EAAeM,GACf,MAAOnS,GACPY,EAAS,2BAA6BZ,EAAM4B,SAC7C,QACChE,GAAW,KAEZ,CAACsB,EAAQ6P,IAEZlR,oBAAU,KACJL,GACFyU,KAED,CAACzU,EAAayU,IAwBjB,OAAKzU,EAKDG,EACKc,IAAAC,cAAA,OAAK8C,UAAU,gBAAe,cAIrC/C,IAAAC,cAAA,OAAK8C,UAAU,gBACb/C,IAAAC,cAAA,OAAK8C,UAAU,mBACb/C,IAAAC,cAAC6Q,EAAa,CACZnO,QAASA,EACT5D,YAAaA,EACbgS,QAASA,EACTH,SAAUA,EACVN,cAAeA,EACfU,mBAAoBA,EACpBC,OAAQA,IAAMoC,GAAW,GACzBnC,eArCoBhQ,IAC1BqS,EAAYK,IAAI,IAAUA,EAAM1S,eAChCoS,GAAsB,IAoChBnC,uBAAwBA,IAAMmC,GAAuBtC,GACrDtC,SAlCahM,UACnBa,EAAEI,iBACF,IACExB,EAAS,UACH3B,EAAmBc,kBAAkBvC,EAAY8D,IAAK+N,GAC5DsC,EAAWU,IAAI,IAAUA,KAAShD,KAClCyC,GAAW,GACX,MAAO9R,GACPY,EAAS,6BAA+BZ,EAAM4B,WA2B1CG,SA7CmBC,IACzB,MAAM,KAAEhD,EAAI,MAAEhB,GAAUgE,EAAEC,OAC1B+P,EAAYK,IAAI,IAAUA,EAAM,CAACrT,GAAOhB,MA4ClCsR,SAAUA,IAAMwC,GAAW,KAG5B9R,GAASvB,IAAAC,cAAA,OAAK8C,UAAU,iBAAiBxB,GAE1CvB,IAAAC,cAACuR,EAAmB,CAClBC,uBAAwBA,EACxBlL,aAAcA,IAGhBvG,IAAAC,cAACuS,EAAW,CAACC,YAAaA,OAjC9BjQ,EAAS,KACF,OC/EX,MAEaqR,EAAqB,CAEhC,eAAepT,EAAQqT,EAAU5L,EAAO6L,GACtC,IAQE,aAPqBpG,YAAOd,YAAWvO,EANd,UAM2C,CAClEmC,SACAqT,WACA5L,QACA6L,WACAnG,UAAWpH,iBAECnG,GACd,MAAOkB,GAEP,MADAC,QAAQD,MAAM,sBAAuBA,GAC/BA,IAKV,6BAAwC,IAAbyS,EAAK/H,UAAApD,OAAA,QAAAqD,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACjC,IACE,MAAMa,EAAIC,YACRF,YAAWvO,EAxBY,UAyBvB2O,YAAQ,QAAS,QACjB+G,EAAMA,IAGR,aAD4B7G,YAAQL,IACfM,KAAK/C,IAAIzJ,IAAG,CAC/BP,GAAIO,EAAIP,MACLO,EAAIE,UAET,MAAOS,GAEP,MADAC,QAAQD,MAAM,6BAA8BA,GACtCA,IAKV,wBAAwBd,GAAoB,IAAZuT,EAAK/H,UAAApD,OAAA,QAAAqD,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACtC,IACE,MAAMa,EAAIC,YACRF,YAAWvO,EA3CY,UA4CvB0O,YAAM,SAAU,KAAMvM,GACtBwM,YAAQ,QAAS,QACjB+G,EAAMA,IAGR,aAD4B7G,YAAQL,IACfM,KAAK/C,IAAIzJ,IAAG,CAC/BP,GAAIO,EAAIP,MACLO,EAAIE,UAET,MAAOS,GAEP,MADAC,QAAQD,MAAM,6BAA8BA,GACtCA,KC9DL,SAAS0S,IACd,MAAM,YAAElV,EAAW,MAAEa,EAAK,OAAEJ,EAAM,OAAEM,GAAWpB,KACxCe,EAAOwC,GAAYhD,mBAAS,KAC5BS,EAAUwC,GAAejD,mBAAS,KAClCsC,EAAOY,GAAYlD,mBAAS,KAC5BC,EAASC,GAAcF,oBAAS,IAChCiV,EAAWC,GAAgBlV,mBAAS,MAoD3C,OACEe,IAAAC,cAAA,OAAK2D,MAAO,CAAEwQ,QAAS,SACrBpU,IAAAC,cAAA,UAAI,iBAEHlB,EACCiB,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,iBAAelB,EAAYU,OAC9BO,IAAAC,cAAA,UAAQ+C,QAjChBN,iBACE,IACEP,EAAS,IACThD,GAAW,SACLW,IACN,MAAOyB,GACPY,EAAS,sBAAwBZ,EAAM4B,SAEzChE,GAAW,IAyB0BiE,SAAUlE,GAAS,WAGlDc,IAAAC,cAAA,UAAQ+C,QAzBhBN,iBACE,GAAK3D,EACL,UACQ8U,EAAmBQ,SACvBtV,EAAY8D,IACZ9D,EAAYU,MACZ,IACA,QAEF0U,EAAa,6BACb,MAAO5S,GACP4S,EAAa,wBAA0B5S,EAAM4B,WAcVS,MAAO,CAAE0Q,WAAY,SAAU,kBAG7DJ,GAAalU,IAAAC,cAAA,SAAIiU,IAGpBlU,IAAAC,cAAA,WACED,IAAAC,cAAA,QAAMyO,SAnEdhM,eAA4Ba,GAC1BA,EAAEI,iBACF,IACExB,EAAS,IACThD,GAAW,SACLK,EAAOC,EAAOC,GACpB,MAAO6B,GACPY,EAAS,gCAAkCZ,EAAM4B,SAEnDhE,GAAW,KA2DHa,IAAAC,cAAA,SACEoD,KAAK,QACL9D,MAAOE,EACP6D,SAAWC,GAAMtB,EAASsB,EAAEC,OAAOjE,OACnCkE,YAAY,QACZC,UAAQ,IAEV1D,IAAAC,cAAA,SACEoD,KAAK,WACL9D,MAAOG,EACP4D,SAAWC,GAAMrB,EAAYqB,EAAEC,OAAOjE,OACtCkE,YAAY,WACZC,UAAQ,IAEV1D,IAAAC,cAAA,UAAQoD,KAAK,SAASD,SAAUlE,GAAS,YAI3Cc,IAAAC,cAAA,QAAMyO,SA1EdhM,eAA2Ba,GACzBA,EAAEI,iBACF,IACExB,EAAS,IACThD,GAAW,SACLS,EAAMH,EAAOC,GACnB,MAAO6B,GACPY,EAAS,qBAAuBZ,EAAM4B,SAExChE,GAAW,IAiEwByE,MAAO,CAAE2Q,UAAW,SAC/CvU,IAAAC,cAAA,UAAQoD,KAAK,SAASD,SAAUlE,GAAS,YAO9CqC,GAASvB,IAAAC,cAAA,KAAG2D,MAAO,CAAEC,MAAO,QAAUtC,I,MCzD9BiT,MAjCf,WACE,MAAM1G,EAAWC,cAYjB,OATA3O,oBAAU,KACRsF,IAAQ+P,WAAW,iBAClB,IAGHrV,oBAAU,KACRsF,IAAQgQ,KAAK,CAAEC,QAAS,WAAYC,KAAM9G,EAAS+G,YAClD,CAAC/G,EAAS+G,WAGX7U,IAAAC,cAACrB,EAAY,KACXoB,IAAAC,cAAA,OAAK8C,UAAU,OACb/C,IAAAC,cAAC6D,EAAM,MACP9D,IAAAC,cAAA,OAAK8C,UAAU,WACb/C,IAAAC,cAAC6U,IAAM,KACL9U,IAAAC,cAAC8U,IAAK,CAACC,KAAK,IAAIC,QAASjV,IAAAC,cAACuE,EAAQ,QAClCxE,IAAAC,cAAC8U,IAAK,CAACC,KAAK,cAAcC,QAASjV,IAAAC,cAAC0H,EAAQ,QAC5C3H,IAAAC,cAAC8U,IAAK,CAACC,KAAK,YAAYC,QAASjV,IAAAC,cAAC4N,EAAY,QAC9C7N,IAAAC,cAAC8U,IAAK,CAACC,KAAK,eAAeC,QAASjV,IAAAC,cAAC6P,EAAe,QACpD9P,IAAAC,cAAC8U,IAAK,CAACC,KAAK,WAAWC,QAASjV,IAAAC,cAACgT,EAAW,QAC5CjT,IAAAC,cAAC8U,IAAK,CAACC,KAAK,QAAQC,QAASjV,IAAAC,cAACgU,EAAY,UAG9CjU,IAAAC,cAACqE,EAAM,S,MCjCF4Q,IAASC,WAAWC,SAASC,eAAe,SAGpDC,OACHtV,IAAAC,cAACD,IAAMuV,WAAU,KACfvV,IAAAC,cAACuV,IAAa,KACZxV,IAAAC,cAACwV,IAAW,CAACC,QAASC,KACpB3V,IAAAC,cAACuU,EAAG,Y","file":"static/js/main.5b6c3356.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de73253.png\";","import { initializeApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Firebase Authentication and get a reference to the service\r\nexport const auth = getAuth(app);\r\n\r\n// Initialize Cloud Firestore and get a reference to the service\r\nexport const db = getFirestore(app);\r\n\r\nexport default app; ","import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged \r\n} from 'firebase/auth';\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  function signup(email, password) {\r\n    return createUserWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function login(email, password) {\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function logout() {\r\n    return signOut(auth);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setCurrentUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n} ","export const avatarService = {\r\n  getAvatarOptions() {\r\n    return [\r\n      {\r\n        id: 'default',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=default',\r\n        name: 'Default'\r\n      },\r\n      {\r\n        id: 'happy',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=happy',\r\n        name: 'Happy'\r\n      },\r\n      {\r\n        id: 'cool',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=cool',\r\n        name: 'Cool'\r\n      },\r\n      {\r\n        id: 'smart',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=smart',\r\n        name: 'Smart'\r\n      },\r\n      {\r\n        id: 'friendly',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=friendly',\r\n        name: 'Friendly'\r\n      },\r\n      {\r\n        id: 'adventurous',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=adventurous',\r\n        name: 'Adventurous'\r\n      },\r\n      {\r\n        id: 'creative',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=creative',\r\n        name: 'Creative'\r\n      },\r\n      {\r\n        id: 'mysterious',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mysterious',\r\n        name: 'Mysterious'\r\n      }\r\n    ];\r\n  }\r\n}; ","import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\nimport { avatarService } from './avatarService';\r\n\r\nconst USERS_COLLECTION = 'users';\r\n\r\nexport const userProfileService = {\r\n  // Get user profile\r\n  async getUserProfile(userId) {\r\n    try {\r\n      const userDoc = await getDoc(doc(db, USERS_COLLECTION, userId));\r\n      if (userDoc.exists()) {\r\n        return userDoc.data();\r\n      }\r\n      // If no profile exists, create a default one\r\n      const defaultProfile = {\r\n        nickname: '',\r\n        country: '',\r\n        avatarUrl: avatarService.getAvatarOptions()[0].url,\r\n        createdAt: new Date()\r\n      };\r\n      await this.updateUserProfile(userId, defaultProfile);\r\n      return defaultProfile;\r\n    } catch (error) {\r\n      console.error('Error getting user profile:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create or update user profile\r\n  async updateUserProfile(userId, profileData) {\r\n    try {\r\n      const userRef = doc(db, USERS_COLLECTION, userId);\r\n      await setDoc(userRef, {\r\n        ...profileData,\r\n        updatedAt: new Date()\r\n      }, { merge: true });\r\n    } catch (error) {\r\n      console.error('Error updating user profile:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update specific profile fields\r\n  async updateProfileField(userId, field, value) {\r\n    try {\r\n      const userRef = doc(db, USERS_COLLECTION, userId);\r\n      await updateDoc(userRef, {\r\n        [field]: value,\r\n        updatedAt: new Date()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating profile field:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { userProfileService } from '../services/userProfileService';\r\nimport { avatarService } from '../services/avatarService';\r\nimport './LoginButton.css';\r\n\r\nexport default function LoginButton() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [showLoginForm, setShowLoginForm] = useState(false);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadUserProfile = async () => {\r\n      if (currentUser) {\r\n        try {\r\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\r\n          setUserProfile(profile);\r\n        } catch (error) {\r\n          console.error('Error loading user profile:', error);\r\n        }\r\n      }\r\n    };\r\n    loadUserProfile();\r\n  }, [currentUser]);\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleSignup(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n      navigate('/');\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  if (currentUser) {\r\n    return (\r\n      <div className=\"login-button\">\r\n        <div className=\"user-profile-button\" onClick={() => navigate('/profile')}>\r\n          <img \r\n            src={userProfile?.avatarUrl || avatarService.getAvatarOptions()[0].url} \r\n            alt=\"Profile\" \r\n            className=\"header-avatar\"\r\n          />\r\n          <span className=\"user-name\">{userProfile?.nickname || currentUser.email}</span>\r\n        </div>\r\n        <button onClick={handleLogout} disabled={loading} className=\"logout-button\">\r\n          Log Out\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-button\">\r\n      {!showLoginForm ? (\r\n        <button onClick={() => setShowLoginForm(true)}>\r\n          Login / Sign Up\r\n        </button>\r\n      ) : (\r\n        <div className=\"login-form\">\r\n          <input\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder=\"Email\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n          <div className=\"login-buttons\">\r\n            <button onClick={handleLogin} disabled={loading}>\r\n              Login\r\n            </button>\r\n            <button onClick={handleSignup} disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n            <button onClick={() => setShowLoginForm(false)}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} ","// src/components/Header.js\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\nimport logo from '../assets/logo.png'; // Ensure you have a logo image in your assets folder\nimport LoginButton from './LoginButton';\n\nfunction Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-container\">\n        <Link to=\"/\" className=\"header-logo\" onClick={closeMenu}>\n          <img src={logo} alt=\"Sortly Logo\" className=\"logo-image\" />\n          <span className=\"site-name\">Sortly - The Sorting Game</span>\n        </Link>\n        <button className=\"menu-button\" onClick={toggleMenu}>\n          ☰\n        </button>\n        <nav className={`header-nav ${isMenuOpen ? 'active' : ''}`}>\n          <Link to=\"/\" className=\"nav-link\" onClick={closeMenu}>Home</Link>\n          <Link to=\"/game/population\" className=\"nav-link\" onClick={closeMenu}>Population</Link>\n          <Link to=\"/game/area\" className=\"nav-link\" onClick={closeMenu}>Area</Link>\n          <Link to=\"/leaderboard\" className=\"nav-link\" onClick={closeMenu}>Leaderboard</Link>\n          <div className=\"nav-login\">\n            <LoginButton />\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","// src/components/Footer.js\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\nimport logo from '../assets/logo.png'; // Reuse your logo\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <img src={logo} alt=\"Sortly Logo\" className=\"footer-logo\" />\r\n        <p>&copy; {new Date().getFullYear()} Sortly. All rights reserved.</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// src/pages/HomePage.js\r\n\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReactGA from 'react-ga4'; // Import ReactGA\r\nimport './HomePage.css';\r\n\r\nfunction HomePage() {\r\n  const navigate = useNavigate();\r\n\r\n  // Define the handler functions\r\n  const handlePlayPopulation = () => {\r\n    // Track the event in Google Analytics\r\n    ReactGA.event({\r\n      category: 'Game',\r\n      action: 'Clicked Play Population Game',\r\n    });\r\n    // Navigate to the population game page\r\n    navigate('/game/population');\r\n  };\r\n\r\n  const handlePlayArea = () => {\r\n    // Track the event in Google Analytics\r\n    ReactGA.event({\r\n      category: 'Game',\r\n      action: 'Clicked Play Area Game',\r\n    });\r\n    // Navigate to the area game page\r\n    navigate('/game/area');\r\n  };\r\n\r\n  return (\r\n    <div className=\"homepage\">\r\n      {/* Section 1: Sort by Population */}\r\n      <div className=\"section population-section\">\r\n        <div className=\"overlay\">\r\n          <h2>Sort by Population</h2>\r\n          <button\r\n            className=\"button button-primary\"\r\n            onClick={handlePlayPopulation} // Use the handler function\r\n          >\r\n            Play Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section 2: Sort by Area */}\r\n      <div className=\"section area-section\">\r\n        <div className=\"overlay\">\r\n          <h2>Sort by Area</h2>\r\n          <button\r\n            className=\"button button-primary\"\r\n            onClick={handlePlayArea} // Use the handler function\r\n          >\r\n            Play Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section 3: Coming Soon */}\r\n      <div className=\"section coming-soon-section\">\r\n        <div className=\"overlay\">\r\n          <h2>New Game Mode</h2>\r\n          <p>Coming Soon</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","// src/components/CountryCard.js\n\nimport React, { useState } from 'react';\nimport './CountryCard.css';\n\nfunction CountryCard({ country, isClickable, highlight, mode }) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    if (isClickable) {\n      setIsFlipped(!isFlipped);\n    }\n  };\n\n  const highlightClass = highlight ? `highlighted-${highlight}` : '';\n\n  const getDetailText = () => {\n    const detailMappings = {\n      population: `Population: ${country.population.toLocaleString()}`,\n      area: `Area: ${country.area.toLocaleString()} km²`\n    };\n    return detailMappings[mode] || '';\n  };\n\n  return (\n    <div\n      className={`country-card ${isFlipped ? 'flipped' : ''} ${\n        isClickable ? 'clickable' : ''\n      } ${highlightClass}`}\n      onClick={handleClick}\n    >\n      <div className=\"card-inner\">\n        {/* Front Side */}\n        <div className={`card-face card-front ${highlightClass}`}>\n          <img\n            src={country.flagUrl}\n            alt={`Flag of ${country.name}`}\n            className=\"country-flag\"\n          />\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n          </div>\n        </div>\n        {/* Back Side */}\n        <div className={`card-face card-back ${highlightClass}`}>\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n            <p className=\"country-detail\">\n              {getDetailText()}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CountryCard;\n","// src/api/countriesApi.js\n\nexport const fetchCountries = async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      throw new Error('Invalid data format received from API');\n    }\n\n    // Filter to only include UN member states with valid data\n    const unMemberCountries = data.filter((country) => \n      country.unMember && \n      country.name?.common && \n      country.flags?.svg && \n      typeof country.population === 'number' && \n      typeof country.area === 'number'\n    );\n\n    // Map the API data to match your application's structure\n    const countries = unMemberCountries.map((country, index) => ({\n      id: index + 1,\n      name: country.name.common,\n      flagUrl: country.flags.svg,\n      population: country.population,\n      area: country.area,\n    }));\n\n    return countries;\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    throw new Error('Failed to fetch countries data. Please try again later.');\n  }\n};\n  ","import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\n\nconst ACHIEVEMENTS_COLLECTION = 'achievements';\n\nconst ACHIEVEMENT_DEFINITIONS = {\n  population: {\n    sorting: {\n      bronze: { id: 'population_sorting_bronze', title: 'Population Bronze Sorter', description: 'Correctly sort 3 countries by population', icon: '🥉', requirement: 3 },\n      silver: { id: 'population_sorting_silver', title: 'Population Silver Sorter', description: 'Correctly sort 7 countries by population', icon: '🥈', requirement: 7 },\n      gold: { id: 'population_sorting_gold', title: 'Population Gold Sorter', description: 'Correctly sort 12 countries by population', icon: '🥇', requirement: 12 },\n      platinum: { id: 'population_sorting_platinum', title: 'Population Platinum Sorter', description: 'Correctly sort 20 countries by population', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'population_games',\n      title: 'Population Game Master',\n      description: 'Complete 50 population sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  },\n  area: {\n    sorting: {\n      bronze: { id: 'area_sorting_bronze', title: 'Area Bronze Sorter', description: 'Correctly sort 3 countries by area', icon: '🥉', requirement: 3 },\n      silver: { id: 'area_sorting_silver', title: 'Area Silver Sorter', description: 'Correctly sort 7 countries by area', icon: '🥈', requirement: 7 },\n      gold: { id: 'area_sorting_gold', title: 'Area Gold Sorter', description: 'Correctly sort 12 countries by area', icon: '🥇', requirement: 12 },\n      platinum: { id: 'area_sorting_platinum', title: 'Area Platinum Sorter', description: 'Correctly sort 20 countries by area', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'area_games',\n      title: 'Area Game Master',\n      description: 'Complete 50 area sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  }\n};\n\nexport const achievementsService = {\n  // Get user achievements\n  async getUserAchievements(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId));\n      return userDoc.exists() ? userDoc.data() : null;\n    } catch (error) {\n      console.error('Error getting user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Update user achievements\n  async updateUserAchievements(userId, achievements) {\n    try {\n      await setDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId), {\n        ...achievements,\n        updatedAt: serverTimestamp()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Check and update achievements based on game results\n  async checkAndUpdateAchievements(userId, category, correctCount) {\n    try {\n      const currentAchievements = await this.getUserAchievements(userId) || {};\n      const categoryAchievements = ACHIEVEMENT_DEFINITIONS[category];\n      let updated = false;\n\n      // Check sorting achievements\n      Object.values(categoryAchievements.sorting).forEach(achievement => {\n        if (!currentAchievements[achievement.id] && correctCount >= achievement.requirement) {\n          currentAchievements[achievement.id] = {\n            unlocked: true,\n            unlockedAt: serverTimestamp()\n          };\n          updated = true;\n        }\n      });\n\n      // Check game count achievements\n      const gameCountAchievement = categoryAchievements.gameCount;\n      const currentCount = (currentAchievements[gameCountAchievement.id]?.count || 0) + 1;\n      \n      if (currentCount >= gameCountAchievement.requirement && !currentAchievements[gameCountAchievement.id]?.unlocked) {\n        currentAchievements[gameCountAchievement.id] = {\n          unlocked: true,\n          unlockedAt: serverTimestamp(),\n          count: currentCount\n        };\n        updated = true;\n      } else {\n        currentAchievements[gameCountAchievement.id] = {\n          ...currentAchievements[gameCountAchievement.id],\n          count: currentCount\n        };\n        updated = true;\n      }\n\n      if (updated) {\n        await this.updateUserAchievements(userId, currentAchievements);\n      }\n\n      return currentAchievements;\n    } catch (error) {\n      console.error('Error checking achievements:', error);\n      throw error;\n    }\n  },\n\n  // Achievement definitions\n  getAchievementDefinitions() {\n    return ACHIEVEMENT_DEFINITIONS;\n  }\n}; ","// src/pages/GamePage.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport CountryCard from '../components/CountryCard';\nimport './GamePage.css';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { fetchCountries } from '../api/countriesApi'; // As previously set up\nimport { achievementsService } from '../services/achievementsService';\nimport { useAuth } from '../contexts/AuthContext';\n\nfunction GamePage() {\n  const { currentUser } = useAuth();\n  const [sortedCountries, setSortedCountries] = useState([]);\n  const [currentCountry, setCurrentCountry] = useState(null);\n  const [remainingCountries, setRemainingCountries] = useState([]);\n  const [score, setScore] = useState(0);\n  const [hoverIndex, setHoverIndex] = useState(null);\n  const { mode } = useParams(); // Get the game mode from the URL\n  const navigate = useNavigate();\n\n  // Helper function to get a random country from the array\n  const getRandomCountry = (countries) => {\n    const randomIndex = Math.floor(Math.random() * countries.length);\n    return countries.splice(randomIndex, 1)[0];\n  };\n\n  const startNewGame = useCallback((data) => {\n    const availableCountries = [...data];\n\n    // Pick a random starting country\n    const firstCountry = getRandomCountry(availableCountries);\n    const nextCountry = getRandomCountry(availableCountries);\n\n    setSortedCountries([firstCountry]);\n    setRemainingCountries(availableCountries);\n    setScore(1);\n    setCurrentCountry(nextCountry);\n  }, []); // Empty dependency array since it doesn't depend on any props or state\n\n  useEffect(() => {\n    const initializeGame = async () => {\n      const data = await fetchCountries();\n      // Filter countries with missing data if necessary\n      const validCountries = data.filter(\n        (country) => country.population && country.area && country.flagUrl\n      );\n      startNewGame(validCountries);\n    };\n\n    initializeGame();\n  }, [startNewGame]); // Add startNewGame to dependency array\n\n  // Determine the comparison property based on the game mode\n  const compareProperty = mode === 'area' ? 'area' : 'population';\n\n  const pickNextCountry = async () => {\n    if (remainingCountries.length === 0) {\n      console.log('Game completed successfully!');\n      console.log('Final score:', score);\n      console.log('Mode:', mode);\n      \n      // Check and update achievements before navigating to game over\n      if (currentUser) {\n        try {\n          console.log('Checking achievements for user:', currentUser.uid);\n          const updatedAchievements = await achievementsService.checkAndUpdateAchievements(currentUser.uid, mode, score);\n          console.log('Updated achievements:', updatedAchievements);\n        } catch (error) {\n          console.error('Error updating achievements:', error);\n        }\n      } else {\n        console.log('No user logged in, skipping achievement update');\n      }\n\n      navigate('/gameover', {\n        state: { score, message: 'Congratulations! You sorted all countries correctly.', mode },\n      });\n      return;\n    }\n\n    const countriesCopy = [...remainingCountries];\n    const randomIndex = Math.floor(Math.random() * countriesCopy.length);\n    const nextCountry = countriesCopy.splice(randomIndex, 1)[0];\n\n    setCurrentCountry(nextCountry);\n    setRemainingCountries(countriesCopy);\n  };\n\n  const handleInsert = async (index) => {\n    const newSortedCountries = [...sortedCountries];\n    newSortedCountries.splice(index, 0, currentCountry);\n\n    if (isCorrectOrder(newSortedCountries)) {\n      setSortedCountries(newSortedCountries);\n      setScore((prevScore) => prevScore + 1);\n      setCurrentCountry(null);\n      pickNextCountry();\n    } else {\n      const allCountries = [...sortedCountries, currentCountry];\n      const correctOrder = [...allCountries].sort((a, b) => a[compareProperty] - b[compareProperty]);\n\n      console.log('Game ended with incorrect placement');\n      console.log('Final score:', score);\n      console.log('Mode:', mode);\n      console.log('Number of countries sorted:', score);\n\n      // Check and update achievements before navigating to game over\n      if (currentUser) {\n        try {\n          console.log('Checking achievements for user:', currentUser.uid);\n          const updatedAchievements = await achievementsService.checkAndUpdateAchievements(currentUser.uid, mode, score);\n          console.log('Updated achievements:', updatedAchievements);\n        } catch (error) {\n          console.error('Error updating achievements:', error);\n        }\n      } else {\n        console.log('No user logged in, skipping achievement update');\n      }\n\n      navigate('/gameover', {\n        state: {\n          score,\n          message: 'Incorrect placement!',\n          incorrectCountry: currentCountry,\n          userOrder: newSortedCountries,\n          correctOrder: correctOrder,\n          mode,\n        },\n      });\n    }\n  };\n\n  const isCorrectOrder = (countriesList) => {\n    for (let i = 0; i < countriesList.length - 1; i++) {\n      if (countriesList[i][compareProperty] > countriesList[i + 1][compareProperty]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  return (\n    <div className=\"game-page\">\n      <h2>Sort Countries by {mode === 'area' ? 'Area' : 'Population'} (Ascending)</h2>\n      <p>Score: {score - 1}</p>\n      <div className=\"sorted-countries-container\">\n        {currentCountry && (\n          <div className=\"instructions\">\n            <p>\n              Where does <strong>{currentCountry.name}</strong> fit among the sorted countries?\n            </p>\n          </div>\n        )}\n        <div className=\"sorted-countries\">\n          {sortedCountries.map((country, index) => (\n            <CountryCard\n              key={`country-${country.id}`}\n              country={country}\n              isClickable={true}\n              mode={mode}\n              highlight={hoverIndex === index ? 'hover' : ''}\n            />\n          ))}\n        </div>\n\n        {currentCountry && (\n          <div className=\"insert-buttons\">\n            <button\n              className=\"insert-button lower-button\"\n              onClick={() => handleInsert(0)}\n              onMouseEnter={() => setHoverIndex(0)}\n              onMouseLeave={() => setHoverIndex(null)}\n            >\n              ↓\n            </button>\n            {sortedCountries.map((_, index) => (\n              <button\n                key={`insert-${index + 1}`}\n                className={`insert-button ${index === sortedCountries.length - 1 ? 'higher-button' : 'here-button'}`}\n                onClick={() => handleInsert(index + 1)}\n                onMouseEnter={() => setHoverIndex(index + 1)}\n                onMouseLeave={() => setHoverIndex(null)}\n              >\n                {index === sortedCountries.length - 1 ? '↑' : index + 1}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n      {currentCountry && (\n        <div className=\"current-country\">\n          <h3>Current Country:</h3>\n          <CountryCard country={currentCountry} isClickable={false} mode={mode} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GamePage;\n","// src/api/leaderboardApi.js\r\n\r\n// For now, we'll use localStorage to store leaderboard data\r\n// In a real application, this would be replaced with actual API calls to a backend\r\n\r\nconst LEADERBOARD_KEY = 'sortly_leaderboard';\r\n\r\nexport const submitScore = (playerName, score, mode) => {\r\n  const leaderboard = getLeaderboard();\r\n  const newEntry = {\r\n    id: Date.now(),\r\n    playerName,\r\n    score,\r\n    mode,\r\n    date: new Date().toISOString(),\r\n  };\r\n  \r\n  leaderboard.push(newEntry);\r\n  // Sort by score (descending) and keep only top 100 entries\r\n  leaderboard.sort((a, b) => b.score - a.score);\r\n  const top100 = leaderboard.slice(0, 100);\r\n  \r\n  localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(top100));\r\n  return newEntry;\r\n};\r\n\r\nexport const getLeaderboard = (mode = null) => {\r\n  const leaderboard = JSON.parse(localStorage.getItem(LEADERBOARD_KEY) || '[]');\r\n  if (mode) {\r\n    return leaderboard.filter(entry => entry.mode === mode);\r\n  }\r\n  return leaderboard;\r\n};\r\n\r\nexport const getTopScores = (mode = null, limit = 10) => {\r\n  const leaderboard = getLeaderboard(mode);\r\n  return leaderboard.slice(0, limit);\r\n}; ","import { db } from '../firebase';\nimport { collection, query, where, orderBy, limit as firestoreLimit, getDocs, addDoc, serverTimestamp } from 'firebase/firestore';\n\nconst GAME_HISTORY_COLLECTION = 'gameHistory';\nconst CATEGORIES = ['population', 'area'];\n\nexport const gameHistoryService = {\n  async getTopGames(userId, category, limitCount = 5) {\n    try {\n      const gamesRef = collection(db, GAME_HISTORY_COLLECTION);\n      const q = query(\n        gamesRef,\n        where('userId', '==', userId),\n        where('category', '==', category),\n        orderBy('score', 'desc'),\n        firestoreLimit(limitCount)\n      );\n\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      // If the index is not ready, fall back to fetching all games and sorting in memory\n      const q = query(\n        collection(db, GAME_HISTORY_COLLECTION),\n        where('userId', '==', userId),\n        where('category', '==', category)\n      );\n\n      const querySnapshot = await getDocs(q);\n      const games = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      return games.sort((a, b) => b.score - a.score).slice(0, limitCount);\n    }\n  },\n\n  async getAllTopGames(userId) {\n    try {\n      const topGames = {};\n      await Promise.all(\n        CATEGORIES.map(async category => {\n          topGames[category] = await this.getTopGames(userId, category);\n        })\n      );\n      return topGames;\n    } catch (error) {\n      console.error('Error fetching all top games:', error);\n      return {};\n    }\n  },\n\n  async saveGame(userId, category, score, countries) {\n    try {\n      const minimalCountries = countries.map(({ id, name, flagUrl }) => ({\n        id,\n        name,\n        flagUrl\n      }));\n\n      await addDoc(collection(db, GAME_HISTORY_COLLECTION), {\n        userId,\n        category,\n        score,\n        countries: minimalCountries,\n        timestamp: serverTimestamp()\n      });\n    } catch (error) {\n      console.error('Error saving game history:', error);\n      throw error;\n    }\n  }\n}; ","// src/pages/GameOverPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport CountryCard from '../components/CountryCard';\nimport { submitScore } from '../api/leaderboardApi';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport { useAuth } from '../contexts/AuthContext';\nimport './GameOverPage.css';\nimport '../components/Buttons.css';\n\nfunction GameOverPage() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  const { score, message, incorrectCountry, userOrder, correctOrder, mode } = location.state || {};\n  const [playerName, setPlayerName] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState('');\n  const hasSaved = useRef(false);\n\n  useEffect(() => {\n    const saveGameHistory = async () => {\n      if (currentUser && userOrder && !hasSaved.current) {\n        try {\n          console.log('Attempting to save game history:', {\n            userId: currentUser.uid,\n            mode,\n            score: score - 1,\n            countriesCount: userOrder.length\n          });\n          \n          await gameHistoryService.saveGame(\n            currentUser.uid,\n            mode,\n            score - 1,\n            userOrder.map(country => ({\n              id: country.id,\n              name: country.name,\n              flagUrl: country.flagUrl\n            }))\n          );\n          hasSaved.current = true;\n          console.log('Game history saved successfully');\n        } catch (error) {\n          console.error('Error saving game history:', error);\n        }\n      }\n    };\n\n    saveGameHistory();\n  }, [currentUser, userOrder, mode, score]); // Include all dependencies\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!playerName.trim()) {\n      setError('Please enter your name');\n      return;\n    }\n    \n    try {\n      submitScore(playerName, score - 1, mode);\n      setIsSubmitted(true);\n    } catch (err) {\n      setError('Failed to submit score. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"game-over-page\">\n      <h2>Game Over</h2>\n      <p>{message}</p>\n      <p>Your final score: {score - 1}</p>\n\n      {!isSubmitted ? (\n        <form onSubmit={handleSubmit} className=\"score-submission\">\n          <div className=\"input-group\">\n            <label htmlFor=\"playerName\">Enter your name:</label>\n            <input\n              type=\"text\"\n              id=\"playerName\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              placeholder=\"Your name\"\n              maxLength={20}\n            />\n          </div>\n          {error && <p className=\"error\">{error}</p>}\n          <button type=\"submit\" className=\"button button-primary\">\n            Submit Score\n          </button>\n        </form>\n      ) : (\n        <div className=\"submission-success\">\n          <p>Score submitted successfully!</p>\n        </div>\n      )}\n\n      {userOrder && incorrectCountry && (\n        <div className=\"user-order\">\n          <h3>Your order was:</h3>\n          <div className=\"country-list\">\n            {userOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={true}\n                highlight={country.id === incorrectCountry.id ? 'incorrect' : ''}\n                mode={mode}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {correctOrder && incorrectCountry && (\n        <div className=\"correct-order\">\n          <h3>The correct order was:</h3>\n          <div className=\"country-list\">\n            {correctOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={true}\n                highlight={country.id === incorrectCountry.id ? 'correct' : ''}\n                mode={mode}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"game-over-buttons\">\n        <button className=\"button button-primary\" onClick={() => navigate(`/game/${mode}`)}>\n          Play Again\n        </button>\n        <button className=\"button button-secondary\" onClick={() => navigate('/')}>\n          Go to Home Page\n        </button>\n        <button className=\"button button-secondary\" onClick={() => navigate('/leaderboard')}>\n          View Leaderboard\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameOverPage;\n","export const formatDate = (timestamp) => {\r\n  if (!timestamp?.toDate) return null;\r\n  return timestamp.toDate().toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  });\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { getLeaderboard } from '../api/leaderboardApi';\r\nimport { formatDate } from '../utils/dateUtils';\r\nimport './LeaderboardPage.css';\r\n\r\nfunction LeaderboardPage() {\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadLeaderboard = () => {\r\n      const data = getLeaderboard(selectedMode);\r\n      setLeaderboard(data);\r\n    };\r\n    loadLeaderboard();\r\n  }, [selectedMode]);\r\n\r\n  return (\r\n    <div className=\"leaderboard-page\">\r\n      <h2>Leaderboard</h2>\r\n      \r\n      <div className=\"mode-filters\">\r\n        <button \r\n          className={`button ${!selectedMode ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode(null)}\r\n        >\r\n          All Modes\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'population' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('population')}\r\n        >\r\n          Population\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'area' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('area')}\r\n        >\r\n          Area\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"leaderboard-table\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Rank</th>\r\n              <th>Player</th>\r\n              <th>Score</th>\r\n              <th>Mode</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {leaderboard.map((entry, index) => (\r\n              <tr key={entry.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{entry.playerName}</td>\r\n                <td>{entry.score}</td>\r\n                <td>{entry.mode.charAt(0).toUpperCase() + entry.mode.slice(1)}</td>\r\n                <td>{formatDate(entry.date)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeaderboardPage; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AvatarSelector.css';\r\n\r\nconst AvatarSelector = ({ avatarOptions, selectedAvatar, onSelect, onClose }) => (\r\n  <div className=\"avatar-selector\">\r\n    <div className=\"avatar-grid\">\r\n      {avatarOptions.map(avatar => (\r\n        <div \r\n          key={avatar.id} \r\n          className={`avatar-option ${selectedAvatar === avatar.url ? 'selected' : ''}`}\r\n          onClick={() => onSelect(avatar.url)}\r\n        >\r\n          <img src={avatar.url} alt={avatar.name} />\r\n          <span>{avatar.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAvatarSelector.propTypes = {\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  selectedAvatar: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AvatarSelector; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ProfileForm.css';\r\n\r\nconst ProfileForm = ({ formData, onSubmit, onChange, onCancel }) => (\r\n  <form onSubmit={onSubmit} className=\"profile-form\">\r\n    <div className=\"form-group\">\r\n      <label>Nickname:</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"nickname\"\r\n        value={formData.nickname}\r\n        onChange={onChange}\r\n        required\r\n      />\r\n    </div>\r\n    <div className=\"form-group\">\r\n      <label>Country:</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"country\"\r\n        value={formData.country}\r\n        onChange={onChange}\r\n        required\r\n      />\r\n    </div>\r\n    <div className=\"form-actions\">\r\n      <button type=\"submit\" className=\"save-button\">Save Changes</button>\r\n      <button type=\"button\" onClick={onCancel} className=\"cancel-button\">Cancel</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nProfileForm.propTypes = {\r\n  formData: PropTypes.shape({\r\n    nickname: PropTypes.string.isRequired,\r\n    country: PropTypes.string.isRequired,\r\n    avatarUrl: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onCancel: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ProfileForm; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarSelector from './AvatarSelector';\r\nimport ProfileForm from './ProfileForm';\r\nimport './ProfileHeader.css';\r\n\r\nconst ProfileHeader = ({ \r\n  profile, \r\n  currentUser, \r\n  editing, \r\n  formData, \r\n  avatarOptions, \r\n  showAvatarSelector,\r\n  onEdit,\r\n  onAvatarSelect,\r\n  onAvatarSelectorToggle,\r\n  onSubmit,\r\n  onChange,\r\n  onCancel\r\n}) => (\r\n  <div className=\"profile-header\">\r\n    <div className=\"avatar-container\">\r\n      <img \r\n        src={profile?.avatarUrl || avatarOptions[0].url} \r\n        alt=\"Profile\" \r\n        className=\"profile-avatar\"\r\n      />\r\n      {editing && (\r\n        <button \r\n          className=\"change-avatar-button\"\r\n          onClick={onAvatarSelectorToggle}\r\n        >\r\n          Change Avatar\r\n        </button>\r\n      )}\r\n      {showAvatarSelector && (\r\n        <AvatarSelector\r\n          avatarOptions={avatarOptions}\r\n          selectedAvatar={formData.avatarUrl}\r\n          onSelect={onAvatarSelect}\r\n          onClose={() => onAvatarSelectorToggle(false)}\r\n        />\r\n      )}\r\n    </div>\r\n    <div className=\"profile-info\">\r\n      <div className=\"profile-main\">\r\n        {!editing ? (\r\n          <>\r\n            <h1 className=\"nickname\">{profile?.nickname || 'Set your nickname'}</h1>\r\n            <p className=\"email\">{currentUser.email}</p>\r\n            <p className=\"country\">{profile?.country || 'Set your country'}</p>\r\n            <button onClick={onEdit} className=\"edit-button\">\r\n              Edit Profile\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <ProfileForm\r\n            formData={formData}\r\n            onSubmit={onSubmit}\r\n            onChange={onChange}\r\n            onCancel={onCancel}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nProfileHeader.propTypes = {\r\n  profile: PropTypes.shape({\r\n    nickname: PropTypes.string,\r\n    country: PropTypes.string,\r\n    avatarUrl: PropTypes.string\r\n  }),\r\n  currentUser: PropTypes.shape({\r\n    email: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  editing: PropTypes.bool.isRequired,\r\n  formData: PropTypes.shape({\r\n    nickname: PropTypes.string.isRequired,\r\n    country: PropTypes.string.isRequired,\r\n    avatarUrl: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  showAvatarSelector: PropTypes.bool.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onAvatarSelect: PropTypes.func.isRequired,\r\n  onAvatarSelectorToggle: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onCancel: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ProfileHeader; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './AchievementCard.css';\r\n\r\nconst AchievementCard = ({ achievement, isUnlocked, unlockDate }) => (\r\n  <div className={`achievement-card ${isUnlocked ? 'unlocked' : 'locked'}`}>\r\n    <div className=\"achievement-content\">\r\n      <div className=\"achievement-icon\">{achievement.icon}</div>\r\n      <div className=\"achievement-info\">\r\n        <h3>{achievement.title}</h3>\r\n        <p>{achievement.description}</p>\r\n        {isUnlocked && unlockDate && (\r\n          <div className=\"achievement-date\">\r\n            Unlocked: {formatDate(unlockDate)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className=\"achievement-status\">\r\n      {isUnlocked ? '✓' : '🔒'}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAchievementCard.propTypes = {\r\n  achievement: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  isUnlocked: PropTypes.bool.isRequired,\r\n  unlockDate: PropTypes.object\r\n};\r\n\r\nexport default AchievementCard; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AchievementCard from './AchievementCard';\r\nimport { transformAchievementDefinitions } from '../../utils/achievementUtils';\r\nimport './AchievementsSection.css';\r\n\r\nconst AchievementsSection = ({ achievementDefinitions, achievements }) => {\r\n  const transformedAchievements = transformAchievementDefinitions(achievementDefinitions);\r\n\r\n  return (\r\n    <div className=\"achievements-section\">\r\n      <h2>Achievements</h2>\r\n      <div className=\"achievements-grid\">\r\n        {transformedAchievements.map(achievement => (\r\n          <AchievementCard\r\n            key={achievement.id}\r\n            achievement={achievement}\r\n            isUnlocked={achievements?.[achievement.id]?.unlocked}\r\n            unlockDate={achievements?.[achievement.id]?.unlockedAt}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievementsSection.propTypes = {\r\n  achievementDefinitions: PropTypes.object.isRequired,\r\n  achievements: PropTypes.objectOf(PropTypes.shape({\r\n    unlocked: PropTypes.bool,\r\n    unlockedAt: PropTypes.object\r\n  }))\r\n};\r\n\r\nexport default AchievementsSection; ","export const transformAchievementDefinitions = (definitions) => {\r\n  const achievements = [];\r\n  \r\n  // Process each category (population, area)\r\n  Object.entries(definitions).forEach(([category, categoryData]) => {\r\n    // Process sorting achievements\r\n    Object.entries(categoryData.sorting).forEach(([level, achievement]) => {\r\n      achievements.push({\r\n        ...achievement,\r\n        category,\r\n        type: 'sorting'\r\n      });\r\n    });\r\n    \r\n    // Process game count achievement\r\n    if (categoryData.gameCount) {\r\n      achievements.push({\r\n        ...categoryData.gameCount,\r\n        category,\r\n        type: 'gameCount'\r\n      });\r\n    }\r\n  });\r\n  \r\n  return achievements;\r\n}; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './GameHistoryItem.css';\r\n\r\nconst GameHistoryItem = ({ game, index }) => (\r\n  <div className=\"game-history-item\">\r\n    <div className=\"game-rank\">#{index + 1}</div>\r\n    <div className=\"game-score\">Score: {game.score}</div>\r\n    <div className=\"game-mode\">{game.category.charAt(0).toUpperCase() + game.category.slice(1)} Mode</div>\r\n    <div className=\"game-date\">\r\n      {game.timestamp?.toDate ? formatDate(game.timestamp) : 'Date unavailable'}\r\n    </div>\r\n    <div className=\"game-countries\">\r\n      {game.countries?.map((country, idx) => (\r\n        <div key={idx} className=\"country-item\">\r\n          <img src={country.flagUrl} alt={country.name} className=\"country-flag\" />\r\n          <span>{country.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nGameHistoryItem.propTypes = {\r\n  game: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    category: PropTypes.string.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  }).isRequired,\r\n  index: PropTypes.number.isRequired\r\n};\r\n\r\nexport default GameHistoryItem; ","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GameHistoryItem from './GameHistoryItem';\r\nimport './GameHistory.css';\r\n\r\nconst GameHistory = ({ gameHistory }) => {\r\n  const topGames = useMemo(() => {\r\n    if (!gameHistory || Object.keys(gameHistory).length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const entries = Object.entries(gameHistory);\r\n    const flattenedGames = entries.flatMap(([category, games]) => \r\n      games.map(game => ({ ...game, category }))\r\n    );\r\n\r\n    const uniqueGames = flattenedGames.filter((game, index, self) => \r\n      index === self.findIndex((g) => g.id === game.id)\r\n    );\r\n\r\n    return uniqueGames\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 5);\r\n  }, [gameHistory]);\r\n\r\n  if (!gameHistory) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>Loading game history...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(gameHistory).length === 0) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>No games played yet. Start playing to see your best games here!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-history-section\">\r\n      <h2>Best 5 Games</h2>\r\n      <div className=\"game-history-list\">\r\n        {topGames.map((game, index) => (\r\n          <GameHistoryItem key={game.id} game={game} index={index} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameHistory.propTypes = {\r\n  gameHistory: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  })))\r\n};\r\n\r\nexport default GameHistory; ","import React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { userProfileService } from '../services/userProfileService';\nimport { achievementsService } from '../services/achievementsService';\nimport { avatarService } from '../services/avatarService';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport ProfileHeader from '../components/profile/ProfileHeader';\nimport AchievementsSection from '../components/profile/AchievementsSection';\nimport GameHistory from '../components/profile/GameHistory';\nimport './ProfilePage.css';\n\nconst ProfilePage = () => {\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  const [profile, setProfile] = useState(null);\n  const [achievements, setAchievements] = useState(null);\n  const [gameHistory, setGameHistory] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\n  const [formData, setFormData] = useState({\n    nickname: '',\n    country: '',\n    avatarUrl: ''\n  });\n\n  const avatarOptions = avatarService.getAvatarOptions();\n  const achievementDefinitions = achievementsService.getAchievementDefinitions();\n  const userId = currentUser?.uid;\n\n  const loadProfile = useCallback(async () => {\n    if (!userId) return;\n    \n    try {\n      const [userProfile, userAchievements, userGameHistory] = await Promise.all([\n        userProfileService.getUserProfile(userId),\n        achievementsService.getUserAchievements(userId),\n        gameHistoryService.getAllTopGames(userId)\n      ]);\n\n      if (userProfile) {\n        setProfile(userProfile);\n        setFormData({\n          nickname: userProfile.nickname || '',\n          country: userProfile.country || '',\n          avatarUrl: userProfile.avatarUrl || avatarOptions[0].url\n        });\n      }\n\n      setAchievements(userAchievements);\n      setGameHistory(userGameHistory);\n    } catch (error) {\n      setError('Failed to load profile: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId, avatarOptions]);\n\n  useEffect(() => {\n    if (currentUser) {\n      loadProfile();\n    }\n  }, [currentUser, loadProfile]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleAvatarSelect = (avatarUrl) => {\n    setFormData(prev => ({ ...prev, avatarUrl }));\n    setShowAvatarSelector(false);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setError('');\n      await userProfileService.updateUserProfile(currentUser.uid, formData);\n      setProfile(prev => ({ ...prev, ...formData }));\n      setEditing(false);\n    } catch (error) {\n      setError('Failed to update profile: ' + error.message);\n    }\n  };\n\n  if (!currentUser) {\n    navigate('/');\n    return null;\n  }\n\n  if (loading) {\n    return <div className=\"profile-page\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"profile-page\">\n      <div className=\"profile-content\">\n        <ProfileHeader\n          profile={profile}\n          currentUser={currentUser}\n          editing={editing}\n          formData={formData}\n          avatarOptions={avatarOptions}\n          showAvatarSelector={showAvatarSelector}\n          onEdit={() => setEditing(true)}\n          onAvatarSelect={handleAvatarSelect}\n          onAvatarSelectorToggle={() => setShowAvatarSelector(!showAvatarSelector)}\n          onSubmit={handleSubmit}\n          onChange={handleInputChange}\n          onCancel={() => setEditing(false)}\n        />\n\n        {error && <div className=\"error-message\">{error}</div>}\n\n        <AchievementsSection\n          achievementDefinitions={achievementDefinitions}\n          achievements={achievements}\n        />\n\n        <GameHistory gameHistory={gameHistory} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage; ","import { \r\n  collection, \r\n  addDoc, \r\n  query, \r\n  orderBy, \r\n  getDocs,\r\n  where,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst LEADERBOARD_COLLECTION = 'scores';\r\n\r\nexport const leaderboardService = {\r\n  // Add a new score\r\n  async addScore(userId, username, score, gameMode) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, LEADERBOARD_COLLECTION), {\r\n        userId,\r\n        username,\r\n        score,\r\n        gameMode,\r\n        timestamp: serverTimestamp()\r\n      });\r\n      return docRef.id;\r\n    } catch (error) {\r\n      console.error('Error adding score:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get global leaderboard\r\n  async getGlobalLeaderboard(limit = 10) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting leaderboard:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user's best scores\r\n  async getUserBestScores(userId, limit = 5) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        where('userId', '==', userId),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting user scores:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; ","import React, { useState } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { leaderboardService } from '../services/leaderboardService';\r\n\r\nexport function FirebaseTest() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [testScore, setTestScore] = useState(null);\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function addTestScore() {\r\n    if (!currentUser) return;\r\n    try {\r\n      await leaderboardService.addScore(\r\n        currentUser.uid,\r\n        currentUser.email,\r\n        100,\r\n        'test'\r\n      );\r\n      setTestScore('Score added successfully!');\r\n    } catch (error) {\r\n      setTestScore('Failed to add score: ' + error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Firebase Test</h2>\r\n      \r\n      {currentUser ? (\r\n        <div>\r\n          <p>Logged in as: {currentUser.email}</p>\r\n          <button onClick={handleLogout} disabled={loading}>\r\n            Log Out\r\n          </button>\r\n          <button onClick={addTestScore} style={{ marginLeft: '10px' }}>\r\n            Add Test Score\r\n          </button>\r\n          {testScore && <p>{testScore}</p>}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"Email\"\r\n              required\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n            <button type=\"submit\" disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n          </form>\r\n          <form onSubmit={handleLogin} style={{ marginTop: '10px' }}>\r\n            <button type=\"submit\" disabled={loading}>\r\n              Log In\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      \r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n} ","// src/App.js\n\nimport React, { useEffect } from 'react';\nimport { useLocation, Routes, Route } from 'react-router-dom';\nimport ReactGA from 'react-ga4';\nimport Header from './components/Header';\nimport Footer from './components/Footer'; \nimport HomePage from './pages/HomePage';\nimport GamePage from './pages/GamePage';\nimport GameOverPage from './pages/GameOverPage';\nimport LeaderboardPage from './pages/LeaderboardPage';\nimport ProfilePage from './pages/ProfilePage';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { FirebaseTest } from './components/FirebaseTest';\nimport './App.css';\n\nfunction App() {\n  const location = useLocation();\n\n  // Initialize Google Analytics only once\n  useEffect(() => {\n    ReactGA.initialize('G-9679TPXEBR'); // Replace with your Measurement ID\n  }, []);\n\n  // Send pageview whenever the pathname changes\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: location.pathname });\n  }, [location.pathname]);\n\n  return (\n    <AuthProvider>\n      <div className=\"App\">\n        <Header />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/game/:mode\" element={<GamePage />} />\n            <Route path=\"/gameover\" element={<GameOverPage />} />\n            <Route path=\"/leaderboard\" element={<LeaderboardPage />} />\n            <Route path=\"/profile\" element={<ProfilePage />} />\n            <Route path=\"/test\" element={<FirebaseTest />} />\n          </Routes>\n        </div>\n        <Footer /> \n      </div>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// src/index.js\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// Wrap everything inside BrowserRouter\r\nroot.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <DndProvider backend={HTML5Backend}>\r\n        <App />\r\n      </DndProvider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}