{"version":3,"sources":["assets/logo.png","assets/population.jpg","assets/area.jpg","firebase.js","contexts/AuthContext.js","services/avatarService.js","services/userProfileService.js","components/LoginButton.js","components/Header.js","components/Footer.js","pages/HomePage.js","components/CountryCard.js","api/countriesApi.js","services/cooperationGameService.js","pages/GamePage.js","pages/ClassicGamePage.js","api/leaderboardApi.js","services/gameHistoryService.js","pages/GameOverPage.js","utils/dateUtils.js","pages/LeaderboardPage.js","services/achievementsService.js","components/profile/AvatarSelector.jsx","components/profile/ProfileHeader.jsx","components/profile/AchievementCard.jsx","components/profile/AchievementsSection.jsx","utils/achievementUtils.js","components/profile/GameHistoryItem.jsx","components/profile/GameHistory.jsx","pages/ProfilePage.js","services/lobbyService.js","components/GameLobby.js","services/leaderboardService.js","components/FirebaseTest.js","App.js","index.js"],"names":["module","exports","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","auth","getAuth","db","getFirestore","realtimeDb","getDatabase","AuthContext","createContext","useAuth","useContext","AuthProvider","_ref","children","currentUser","setCurrentUser","useState","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","React","createElement","Provider","avatarService","getAvatarOptions","id","url","name","userProfileService","userId","userDoc","getDoc","doc","exists","data","defaultProfile","nickname","country","avatarUrl","createdAt","Date","this","updateUserProfile","error","console","profileData","userRef","setDoc","updatedAt","merge","field","updateDoc","LoginButton","setEmail","setPassword","setError","showLoginForm","setShowLoginForm","userProfile","setUserProfile","navigate","useNavigate","async","profile","getUserProfile","uid","loadUserProfile","className","onClick","src","alt","message","disabled","type","onChange","e","target","placeholder","required","preventDefault","style","color","Header","isMenuOpen","setIsMenuOpen","closeMenu","Link","to","logo","toggleMenu","Footer","getFullYear","HomePage","backgroundImage","populationImage","backgroundPosition","backgroundSize","backgroundRepeat","handlePlayPopulation","ReactGA","event","category","action","handlePlayCooperation","areaImage","handlePlayArea","CountryCard","isClickable","highlight","mode","isFlipped","setIsFlipped","highlightClass","handleClick","flagUrl","population","toLocaleString","area","fetchCountries","response","fetch","ok","Error","status","json","Array","isArray","unMemberCountries","filter","_country$name","_country$flags","unMember","common","flags","svg","map","index","cooperationGameService","lobbyId","players","allCountries","length","fetchError","selectedCountries","getRandomElements","arr","num","warn","sort","Math","random","slice","initialCountry","inventoryCountries","gameStateRef","ref","initialState","currentPlayer","sortedCountries","remainingCountries","currentCountry","score","now","lastUpdated","set","log","subscribeToGameState","callback","listener","onValue","snapshot","val","off","updates","update","playerId","chosenCountry","gameState","get","some","c","updatedRemaining","placementData","countriesList","i","isCorrect","_gameState$players$fi","_gameState$players$","find","p","result","endGame","GamePage","_gameStateData$player","setSortedCountries","setCurrentCountry","setRemainingCountries","setScore","setGameState","gameStateData","setGameStateData","location","useLocation","state","unsubscribe","undefined","replace","handlePlaceCard","newSortedCountries","splice","placeCard","isMyTurn","currentPlayerName","key","_","chooseCard","handleChooseCard","ClassicGamePage","countriesToPick","setCountriesToPick","gameStatus","setGameStatus","isLoading","setIsLoading","shuffled","initialSortedCountry","firstCountryToPlace","err","loadGame","handlePlaceCountry","countryToPlace","pickNextCountry","nextCountry","finalSortedList","incorrectCountry","attemptedIndex","window","reload","title","Fragment","getLeaderboard","arguments","leaderboard","JSON","parse","localStorage","getItem","entry","CATEGORIES","gameHistoryService","limitCount","gamesRef","collection","q","query","where","orderBy","firestoreLimit","getDocs","docs","a","b","topGames","Promise","all","getTopGames","countries","minimalCountries","addDoc","timestamp","serverTimestamp","GameOverPage","userOrder","correctOrder","playerName","setPlayerName","isSubmitted","setIsSubmitted","hasSaved","useRef","fetchUserProfile","current","countriesCount","saveGame","saveGameHistory","onSubmit","trim","submitScore","newEntry","date","toISOString","push","top100","setItem","stringify","htmlFor","maxLength","getPlayAgainPath","formatDate","toDate","toLocaleDateString","year","month","day","LeaderboardPage","setLeaderboard","selectedMode","setSelectedMode","loadLeaderboard","charAt","toUpperCase","ACHIEVEMENT_DEFINITIONS","sorting","bronze","description","icon","requirement","silver","gold","platinum","gameCount","achievementsService","achievements","correctCount","_currentAchievements$","_currentAchievements$2","currentAchievements","getUserAchievements","categoryAchievements","updated","Object","values","forEach","achievement","unlocked","unlockedAt","gameCountAchievement","currentCount","count","updateUserAchievements","getAchievementDefinitions","AvatarSelector","avatarOptions","selectedAvatar","onSelect","onClose","avatar","ProfileHeader","formData","setFormData","showAvatarSelector","setShowAvatarSelector","isEditing","setIsEditing","handleChange","prev","AchievementCard","isUnlocked","unlockDate","AchievementsSection","achievementDefinitions","transformedAchievements","definitions","entries","categoryData","_ref2","level","transformAchievementDefinitions","_achievements$achieve","_achievements$achieve2","_achievements$achieve3","GameHistoryItem","_game$timestamp","_game$countries","game","idx","GameHistory","gameHistory","useMemo","keys","flatMap","games","self","findIndex","g","ProfilePage","setProfile","setAchievements","setGameHistory","editing","setEditing","loadProfile","useCallback","userAchievements","userGameHistory","getAllTopGames","onEdit","onAvatarSelect","onAvatarSelectorToggle","onCancel","lobbyService","constructor","lobbiesRef","player","lobbyRef","lobbyData","currentPlayers","updatedPlayers","remove","subscribeToLobby","startedAt","endedAt","GameLobby","setLobbyId","setPlayers","isHost","setIsHost","copyStatus","setCopyStatus","searchParams","useSearchParams","currentLobbyId","unsubscribeFn","setTimeout","lobbyParam","joinLobby","newLobbyId","toString","substring","createLobby","initializeLobby","leaveLobby","gameLink","origin","encodeURIComponent","navigator","clipboard","writeText","textArea","document","body","appendChild","select","execCommand","removeChild","_currentPlayer$curren","initializeGameState","startGame","leaderboardService","username","gameMode","limit","FirebaseTest","testScore","setTestScore","padding","addScore","marginLeft","marginTop","App","initialize","send","hitType","page","pathname","Routes","Route","path","element","ReactDOM","createRoot","getElementById","render","StrictMode","HashRouter","DndProvider","backend","HTML5Backend"],"mappings":"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","file":"static/js/main.7dcf0233.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de73253.png\";","module.exports = __webpack_public_path__ + \"static/media/population.b123bcc2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/area.1a41ffef.jpg\";","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getDatabase } from 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nexport const auth = getAuth(app);\n\n// Initialize Cloud Firestore and get a reference to the service\nexport const db = getFirestore(app);\n\n// Initialize Realtime Database and get a reference to the service\nexport const realtimeDb = getDatabase(app);\n\nexport default app; ","import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged \r\n} from 'firebase/auth';\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  function signup(email, password) {\r\n    return createUserWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function login(email, password) {\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function logout() {\r\n    return signOut(auth);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setCurrentUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n} ","export const avatarService = {\r\n  getAvatarOptions() {\r\n    return [\r\n      {\r\n        id: 'default',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=default',\r\n        name: 'Default'\r\n      },\r\n      {\r\n        id: 'happy',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=happy',\r\n        name: 'Happy'\r\n      },\r\n      {\r\n        id: 'cool',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=cool',\r\n        name: 'Cool'\r\n      },\r\n      {\r\n        id: 'smart',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=smart',\r\n        name: 'Smart'\r\n      },\r\n      {\r\n        id: 'friendly',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=friendly',\r\n        name: 'Friendly'\r\n      },\r\n      {\r\n        id: 'adventurous',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=adventurous',\r\n        name: 'Adventurous'\r\n      },\r\n      {\r\n        id: 'creative',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=creative',\r\n        name: 'Creative'\r\n      },\r\n      {\r\n        id: 'mysterious',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mysterious',\r\n        name: 'Mysterious'\r\n      }\r\n    ];\r\n  }\r\n}; ","import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { avatarService } from './avatarService';\n\nconst USERS_COLLECTION = 'users';\n\nexport const userProfileService = {\n  // Get user profile\n  async getUserProfile(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, USERS_COLLECTION, userId));\n      if (userDoc.exists()) {\n        return userDoc.data();\n      }\n      // If no profile exists, create a default one\n      const defaultProfile = {\n        nickname: '',\n        country: '',\n        avatarUrl: avatarService.getAvatarOptions()[0].url,\n        createdAt: new Date()\n      };\n      await this.updateUserProfile(userId, defaultProfile);\n      return defaultProfile;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      throw error;\n    }\n  },\n\n  // Create or update user profile\n  async updateUserProfile(userId, profileData) {\n    try {\n      const userRef = doc(db, USERS_COLLECTION, userId);\n      await setDoc(userRef, {\n        ...profileData,\n        updatedAt: new Date()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n\n  // Update specific profile fields\n  async updateProfileField(userId, field, value) {\n    try {\n      const userRef = doc(db, USERS_COLLECTION, userId);\n      await updateDoc(userRef, {\n        [field]: value,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.error('Error updating profile field:', error);\n      throw error;\n    }\n  }\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { userProfileService } from '../services/userProfileService';\r\nimport { avatarService } from '../services/avatarService';\r\nimport './LoginButton.css';\r\n\r\nexport default function LoginButton() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [showLoginForm, setShowLoginForm] = useState(false);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadUserProfile = async () => {\r\n      if (currentUser) {\r\n        try {\r\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\r\n          setUserProfile(profile);\r\n        } catch (error) {\r\n          console.error('Error loading user profile:', error);\r\n        }\r\n      }\r\n    };\r\n    loadUserProfile();\r\n  }, [currentUser]);\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleSignup(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n      navigate('/');\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  if (currentUser) {\r\n    return (\r\n      <div className=\"login-button\">\r\n        <div className=\"user-profile-button\" onClick={() => navigate('/profile')}>\r\n          <img \r\n            src={userProfile?.avatarUrl || avatarService.getAvatarOptions()[0].url} \r\n            alt=\"Profile\" \r\n            className=\"header-avatar\"\r\n          />\r\n          <span className=\"user-name\">{userProfile?.nickname || currentUser.email}</span>\r\n        </div>\r\n        <button onClick={handleLogout} disabled={loading} className=\"logout-button\">\r\n          Log Out\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-button\">\r\n      {!showLoginForm ? (\r\n        <button onClick={() => setShowLoginForm(true)}>\r\n          Login / Sign Up\r\n        </button>\r\n      ) : (\r\n        <div className=\"login-form\">\r\n          <input\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder=\"Email\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n          <div className=\"login-buttons\">\r\n            <button onClick={handleLogin} disabled={loading}>\r\n              Login\r\n            </button>\r\n            <button onClick={handleSignup} disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n            <button onClick={() => setShowLoginForm(false)}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} ","// src/components/Header.js\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\nimport logo from '../assets/logo.png'; // Ensure you have a logo image in your assets folder\nimport LoginButton from './LoginButton';\n\nfunction Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-container\">\n        <Link to=\"/\" className=\"header-logo\" onClick={closeMenu}>\n          <img src={logo} alt=\"Sortly Logo\" className=\"logo-image\" />\n          <span className=\"site-name\">Sortly - The Sorting Game</span>\n        </Link>\n        <button className=\"menu-button\" onClick={toggleMenu}>\n          ☰\n        </button>\n        <nav className={`header-nav ${isMenuOpen ? 'active' : ''}`}>\n          <Link to=\"/\" className=\"nav-link\" onClick={closeMenu}>Home</Link>\n          <Link to=\"/game/population\" className=\"nav-link\" onClick={closeMenu}>Population</Link>\n          <Link to=\"/game/area\" className=\"nav-link\" onClick={closeMenu}>Area</Link>\n          <Link to=\"/leaderboard\" className=\"nav-link\" onClick={closeMenu}>Leaderboard</Link>\n          <div className=\"nav-login\">\n            <LoginButton />\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","// src/components/Footer.js\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\nimport logo from '../assets/logo.png'; // Reuse your logo\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <img src={logo} alt=\"Sortly Logo\" className=\"footer-logo\" />\r\n        <p>&copy; {new Date().getFullYear()} Sortly. All rights reserved.</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// src/pages/HomePage.js\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ReactGA from 'react-ga4'; // Import ReactGA\nimport populationImage from '../assets/population.jpg';\nimport areaImage from '../assets/area.jpg';\nimport './HomePage.css';\n\nfunction HomePage() {\n  const navigate = useNavigate();\n\n  // Define the handler functions\n  const handlePlayPopulation = () => {\n    // Track the event in Google Analytics\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Population Game',\n    });\n    // Navigate to the population game page\n    navigate('/game/population');\n  };\n\n  const handlePlayArea = () => {\n    // Track the event in Google Analytics\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Area Game',\n    });\n    // Navigate to the area game page\n    navigate('/game/area');\n  };\n\n  const handlePlayCooperation = () => {\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Cooperation Game',\n    });\n    navigate('/game/population/cooperation');\n  };\n\n  return (\n    <div className=\"homepage\">\n      {/* Section 1: Sort by Population */}\n      <div \n        className=\"section population-section\"\n        style={{\n          backgroundImage: `url(${populationImage})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat'\n        }}\n      >\n        <div className=\"overlay\">\n          <h2>Sort by Population</h2>\n          <div className=\"population-modes\">\n            <button\n              className=\"button button-primary\"\n              onClick={handlePlayPopulation}\n            >\n              Classic Mode\n            </button>\n            <button\n              className=\"button button-primary\"\n              onClick={handlePlayCooperation}\n            >\n              Cooperation Mode\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 2: Sort by Area */}\n      <div \n        className=\"section area-section\"\n        style={{\n          backgroundImage: `url(${areaImage})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat'\n        }}\n      >\n        <div className=\"overlay\">\n          <h2>Sort by Area</h2>\n          <button\n            className=\"button button-primary\"\n            onClick={handlePlayArea}\n          >\n            Play Now\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","// src/components/CountryCard.js\n\nimport React, { useState } from 'react';\nimport './CountryCard.css';\n\nfunction CountryCard({ country, isClickable, highlight, mode, onClick }) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    if (onClick) {\n      if (isClickable) {\n        onClick();\n      }\n    } else {\n      if (isClickable) {\n        setIsFlipped(!isFlipped);\n      }\n    }\n  };\n\n  const highlightClass = highlight ? `highlighted-${highlight}` : '';\n\n  const getDetailText = () => {\n    const detailMappings = {\n      population: `Population: ${country.population.toLocaleString()}`,\n      area: `Area: ${country.area.toLocaleString()} km²`\n    };\n    return detailMappings[mode] || '';\n  };\n\n  return (\n    <div\n      className={`country-card ${isFlipped ? 'flipped' : ''} ${\n        isClickable ? 'clickable' : ''\n      } ${highlightClass}`}\n      onClick={handleClick}\n    >\n      <div className=\"card-inner\">\n        {/* Front Side */}\n        <div className={`card-face card-front ${highlightClass}`}>\n          <img\n            src={country.flagUrl}\n            alt={`Flag of ${country.name}`}\n            className=\"country-flag\"\n          />\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n          </div>\n        </div>\n        {/* Back Side */}\n        <div className={`card-face card-back ${highlightClass}`}>\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n            <p className=\"country-detail\">\n              {getDetailText()}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CountryCard;\n","// src/api/countriesApi.js\n\nexport const fetchCountries = async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      throw new Error('Invalid data format received from API');\n    }\n\n    // Filter to only include UN member states with valid data\n    const unMemberCountries = data.filter((country) => \n      country.unMember && \n      country.name?.common && \n      country.flags?.svg && \n      typeof country.population === 'number' && \n      typeof country.area === 'number'\n    );\n\n    // Map the API data to match your application's structure\n    const countries = unMemberCountries.map((country, index) => ({\n      id: index + 1,\n      name: country.name.common,\n      flagUrl: country.flags.svg,\n      population: country.population,\n      area: country.area,\n    }));\n\n    return countries;\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    throw new Error('Failed to fetch countries data. Please try again later.');\n  }\n};\n  ","import { realtimeDb } from '../firebase';\r\nimport { ref, set, update, onValue, off, get } from 'firebase/database';\r\nimport { fetchCountries } from '../api/countriesApi'; // Import fetchCountries here\r\n\r\nconst GAME_STATES_PATH = 'gameStates';\r\n\r\n// Helper to get random elements without mutation\r\nconst getRandomElements = (arr, num) => {\r\n  if (num > arr.length) {\r\n    console.warn(\"Requested more elements than available\");\r\n    num = arr.length;\r\n  }\r\n  const shuffled = [...arr].sort(() => 0.5 - Math.random());\r\n  return shuffled.slice(0, num);\r\n};\r\n\r\nexport const cooperationGameService = {\r\n  // Initialize a new game state for cooperation mode\r\n  async initializeGameState(lobbyId, players) {\r\n    // Fetch all countries within the service\r\n    let allCountries;\r\n    try {\r\n      allCountries = await fetchCountries();\r\n      if (!allCountries || allCountries.length < 11) { // Need at least 11\r\n        throw new Error('Not enough valid countries fetched to start cooperation mode.');\r\n      }\r\n    } catch (fetchError) {\r\n      console.error(\"Failed to fetch countries for initialization:\", fetchError);\r\n      throw new Error('Could not fetch country data to start the game.');\r\n    }\r\n\r\n    // Select 11 countries (1 initial + 10 inventory)\r\n    const selectedCountries = getRandomElements(allCountries, 11);\r\n    const initialCountry = selectedCountries[0];\r\n    const inventoryCountries = selectedCountries.slice(1);\r\n\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    const initialState = {\r\n      lobbyId: lobbyId, // Store lobbyId for reference\r\n      currentPlayer: players[0].id, // First player starts\r\n      players: players,\r\n      mode: 'choosing', // Start in choosing mode\r\n      sortedCountries: [initialCountry], // Start with one country sorted\r\n      remainingCountries: inventoryCountries, // The 10 countries in inventory\r\n      currentCountry: null, // No country chosen to place yet\r\n      score: 1, // Started with 1 country sorted\r\n      status: 'playing',\r\n      createdAt: Date.now(),\r\n      lastUpdated: Date.now()\r\n    };\r\n\r\n    await set(gameStateRef, initialState);\r\n    console.log(\"Initialized game state for lobby\", lobbyId, initialState);\r\n    // No need to return initialState, changes propagate via subscription\r\n  },\r\n\r\n  // Subscribe to game state changes\r\n  subscribeToGameState(lobbyId, callback) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    const listener = onValue(gameStateRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      callback(data); // Pass data (or null if deleted) to callback\r\n    }, (error) => {\r\n      console.error(\"Error subscribing to game state:\", error);\r\n      callback(null); // Notify callback of error/disconnection\r\n    });\r\n\r\n    // Return unsubscribe function\r\n    return () => off(gameStateRef, 'value', listener);\r\n  },\r\n\r\n  // Update game state (internal helper - might not be needed externally anymore)\r\n  async updateGameState(lobbyId, updates) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    await update(gameStateRef, {\r\n      ...updates,\r\n      lastUpdated: Date.now()\r\n    });\r\n  },\r\n\r\n  // Player chooses a card from the inventory\r\n  async chooseCard(lobbyId, playerId, chosenCountry) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    const snapshot = await get(gameStateRef);\r\n    const gameState = snapshot.val();\r\n\r\n    if (!gameState || gameState.status !== 'playing') {\r\n      throw new Error('Game is not active or not found');\r\n    }\r\n    if (gameState.mode !== 'choosing') {\r\n      throw new Error('Not in choosing mode');\r\n    }\r\n    if (gameState.currentPlayer !== playerId) {\r\n      throw new Error('Not your turn to choose');\r\n    }\r\n    if (!gameState.remainingCountries || !gameState.remainingCountries.some(c => c.id === chosenCountry.id)) {\r\n       console.error(\"Chosen country not found in remaining:\", chosenCountry, gameState.remainingCountries);\r\n       throw new Error('Chosen country is not in the remaining inventory');\r\n    }\r\n\r\n    const updatedRemaining = gameState.remainingCountries.filter(c => c.id !== chosenCountry.id);\r\n\r\n    await update(gameStateRef, {\r\n      currentCountry: chosenCountry, // Set the chosen country as the one to be placed\r\n      remainingCountries: updatedRemaining,\r\n      mode: 'placing', // Switch mode to placing\r\n      lastUpdated: Date.now()\r\n    });\r\n  },\r\n\r\n  // Player places the chosen card into the sorted list\r\n  async placeCard(lobbyId, playerId, placementData) {\r\n    // placementData contains { sortedCountries } - the proposed new sorted list\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    const snapshot = await get(gameStateRef);\r\n    const gameState = snapshot.val();\r\n\r\n    if (!gameState || gameState.status !== 'playing') {\r\n      throw new Error('Game is not active or not found');\r\n    }\r\n    if (gameState.mode !== 'placing') {\r\n      throw new Error('Not in placing mode');\r\n    }\r\n    if (gameState.currentPlayer !== playerId) {\r\n      throw new Error('Not your turn to place');\r\n    }\r\n    if (!gameState.currentCountry) {\r\n        throw new Error('No country currently chosen for placement');\r\n    }\r\n    \r\n    // Server-side validation of the placement (using compareProperty)\r\n    const compareProperty = 'population'; // Assuming population for cooperation\r\n    const isCorrect = (countriesList) => {\r\n      for (let i = 0; i < countriesList.length - 1; i++) {\r\n        if (!countriesList[i] || !countriesList[i+1] || countriesList[i][compareProperty] > countriesList[i + 1][compareProperty]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    if (isCorrect(placementData.sortedCountries)) {\r\n      // Correct Placement\r\n      const nextPlayer = gameState.players.find(p => p.id !== playerId)?.id || gameState.players[0]?.id;\r\n      const updates = {\r\n        currentPlayer: nextPlayer,\r\n        sortedCountries: placementData.sortedCountries, // Update the sorted list\r\n        currentCountry: null, // Clear the placed country\r\n        mode: 'choosing', // Go back to choosing mode\r\n        score: gameState.score + 1,\r\n        lastUpdated: Date.now()\r\n      };\r\n\r\n      // Check for win condition (inventory empty AND placed correctly)\r\n      if (gameState.remainingCountries.length === 0) {\r\n        updates.status = 'completed';\r\n        updates.result = 'win';\r\n        updates.mode = 'finished'; // Or some final mode\r\n      }\r\n\r\n      await update(gameStateRef, updates);\r\n\r\n    } else {\r\n      // Incorrect Placement - End Game\r\n      console.log(`Incorrect placement by ${playerId}. Ending game.`);\r\n      await this.endGame(lobbyId); // Call endGame directly\r\n    }\r\n  },\r\n\r\n  // End game (can be called on incorrect placement or explicitly)\r\n  async endGame(lobbyId) { // No longer needs playerId here if called internally\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    // Check if game exists before updating\r\n    const snapshot = await get(gameStateRef);\r\n    if (snapshot.exists() && snapshot.val().status === 'playing') {\r\n      await update(gameStateRef, {\r\n        status: 'completed',\r\n        result: 'lose',\r\n        mode: 'finished',\r\n        currentCountry: null, // Ensure no country is stuck in current\r\n        lastUpdated: Date.now()\r\n      });\r\n      console.log(\"Game ended with lose state for lobby:\", lobbyId);\r\n    } else {\r\n       console.log(\"Game already completed or does not exist, skipping endGame call for lobby:\", lobbyId);\r\n    }\r\n  },\r\n\r\n  // Clean up game state\r\n  async cleanupGameState(lobbyId) {\r\n    const gameStateRef = ref(realtimeDb, `${GAME_STATES_PATH}/${lobbyId}`);\r\n    await set(gameStateRef, null);\r\n  }\r\n}; ","// src/pages/GamePage.js\n\nimport React, { useState, useEffect } from 'react';\nimport CountryCard from '../components/CountryCard';\nimport './GamePage.css';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { cooperationGameService } from '../services/cooperationGameService';\n\nfunction GamePage() {\n  const { currentUser } = useAuth();\n  const [sortedCountries, setSortedCountries] = useState([]);\n  const [currentCountry, setCurrentCountry] = useState(null);\n  const [remainingCountries, setRemainingCountries] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameState, setGameState] = useState('waiting'); // waiting, playing, ended\n  const [gameStateData, setGameStateData] = useState(null); // Store full game state\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    const { lobbyId } = location.state || {};\n    \n    if (!lobbyId) {\n      console.error(\"No lobbyId found in location state. Navigating away.\");\n      navigate('/'); // Or navigate to an error page/lobby page\n      return;\n    }\n\n    // Subscribe to the game state from Firebase\n    const unsubscribe = cooperationGameService.subscribeToGameState(lobbyId, (data) => {\n      if (data) {\n        setGameStateData(data);\n        setScore(data.score !== undefined ? data.score : 0);\n        setSortedCountries(data.sortedCountries || []);\n        setCurrentCountry(data.currentCountry || null); // The country to be placed\n        setRemainingCountries(data.remainingCountries || []);\n        setGameState(data.status || 'waiting'); // Use status from DB\n\n        // Handle game completion based on status from DB\n        if (data.status === 'completed') {\n           let message = 'Game Over!';\n           if (data.result === 'win') {\n             message = 'Congratulations! You sorted all countries correctly.';\n           } else if (data.result === 'lose') {\n             message = 'Game Over! An incorrect move was made.';\n           }\n           navigate('/gameover', {\n              state: { \n                score: data.score || 0, \n                message: message,\n              }, \n              replace: true // Prevent going back to the game page\n            });\n        }\n\n      } else {\n        // Lobby or game state deleted or not found\n        console.error(\"Game state not found for lobby:\", lobbyId);\n        navigate('/'); // Navigate away if game state disappears\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n\n  }, [location.state, navigate, currentUser]); // Dependencies: only location state, navigate, currentUser\n\n  // Handler for when a player chooses a card from the inventory\n  const handleChooseCard = async (country) => {\n    if (!gameStateData || !currentUser) return;\n    if (gameStateData.currentPlayer !== currentUser.uid) return; // Not their turn\n    if (gameStateData.mode !== 'choosing') return; // Wrong mode\n\n    try {\n      await cooperationGameService.chooseCard(gameStateData.lobbyId, currentUser.uid, country);\n    } catch (error) {\n      console.error(\"Error choosing card:\", error);\n      // Could add error state/message here\n    }\n  };\n\n  // Handler for placing a card in the sorted list\n  const handlePlaceCard = async (index) => {\n    if (!gameStateData || !currentUser || !currentCountry) return;\n    if (gameStateData.currentPlayer !== currentUser.uid) return; // Not their turn\n    if (gameStateData.mode !== 'placing') return; // Wrong mode\n\n    const newSortedCountries = [...sortedCountries];\n    newSortedCountries.splice(index, 0, currentCountry);\n\n    try {\n      await cooperationGameService.placeCard(gameStateData.lobbyId, currentUser.uid, {\n        sortedCountries: newSortedCountries\n      });\n    } catch (error) {\n      console.error(\"Error placing card:\", error);\n      // Could add error state/message here\n    }\n  };\n\n  if (!gameStateData || gameState === 'waiting') {\n    return <div className=\"game-page\">Loading Game...</div>;\n  }\n\n  const isMyTurn = gameStateData.currentPlayer === currentUser?.uid;\n  const currentPlayerName = gameStateData.players.find(p => p.id === gameStateData.currentPlayer)?.name || 'Unknown';\n\n  return (\n    <div className=\"game-page\">\n      <h2>Cooperation Mode</h2>\n      <p>Current Turn: {currentPlayerName}</p>\n      <p>Score: {score}</p>\n\n      {/* Display sorted countries */}\n      <div className=\"sorted-countries-container\">\n        <h3>Sorted Countries:</h3>\n        <div className=\"sorted-countries\">\n          {sortedCountries.map((country, index) => (\n            <CountryCard\n              key={`sorted-${country.id}`}\n              country={country}\n              isClickable={false}\n              mode=\"population\"\n            />\n          ))}\n        </div>\n\n        {/* Show placement buttons only in placing mode and on player's turn */}\n        {gameStateData.mode === 'placing' && isMyTurn && currentCountry && (\n          <div className=\"insert-buttons\">\n            <button\n              className=\"insert-button\"\n              onClick={() => handlePlaceCard(0)}\n            >\n              Place at Start ↓\n            </button>\n            {sortedCountries.map((_, index) => (\n              <button\n                key={`insert-${index}`}\n                className=\"insert-button\"\n                onClick={() => handlePlaceCard(index + 1)}\n              >\n                Place Here\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Display current country being placed (in placing mode) */}\n      {gameStateData.mode === 'placing' && currentCountry && (\n        <div className=\"current-country\">\n          <h3>{isMyTurn ? 'Your Country to Place:' : `${currentPlayerName}'s Country to Place:`}</h3>\n          <CountryCard\n            country={currentCountry}\n            isClickable={false}\n            mode=\"population\"\n          />\n        </div>\n      )}\n\n      {/* Display remaining countries (inventory) */}\n      <div className=\"remaining-countries\">\n        <h3>Remaining Countries to Sort: ({remainingCountries.length})</h3>\n        <div className=\"remaining-countries-grid\">\n          {remainingCountries.map((country) => (\n            <CountryCard\n              key={`remaining-${country.id}`}\n              country={country}\n              isClickable={gameStateData.mode === 'choosing' && isMyTurn}\n              onClick={() => gameStateData.mode === 'choosing' && isMyTurn && handleChooseCard(country)}\n              mode=\"population\"\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Game instructions based on current state */}\n      <div className=\"game-instructions\">\n        {gameStateData.mode === 'choosing' && (\n          isMyTurn ? (\n            <p>Choose a country from the remaining countries to place next.</p>\n          ) : (\n            <p>Waiting for {currentPlayerName} to choose a country...</p>\n          )\n        )}\n        {gameStateData.mode === 'placing' && (\n          isMyTurn ? (\n            <p>Place {currentCountry?.name} in the correct position based on population.</p>\n          ) : (\n            <p>Waiting for {currentPlayerName} to place {currentCountry?.name}...</p>\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default GamePage;\n","// src/pages/ClassicGamePage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { fetchCountries } from '../api/countriesApi';\r\nimport CountryCard from '../components/CountryCard';\r\nimport './GamePage.css'; // Reuse some styles for now, can create ClassicGamePage.css later\r\n\r\nfunction ClassicGamePage() {\r\n  const [countriesToPick, setCountriesToPick] = useState([]);\r\n  const [sortedCountries, setSortedCountries] = useState([]);\r\n  const [currentCountry, setCurrentCountry] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [gameStatus, setGameStatus] = useState('loading'); // loading, picking, placing, ended\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadGame = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      try {\r\n        const fetchedCountries = await fetchCountries();\r\n        const shuffled = fetchedCountries.sort(() => 0.5 - Math.random());\r\n\r\n        // Start the game with the first country already sorted\r\n        if (shuffled.length >= 2) {\r\n          const initialSortedCountry = shuffled[0];\r\n          const firstCountryToPlace = shuffled[1];\r\n          \r\n          setSortedCountries([initialSortedCountry]); // Start with the first country placed\r\n          setCurrentCountry(firstCountryToPlace); // Set the second country as the one to place\r\n          setCountriesToPick(shuffled.slice(2)); // Remaining countries start from the third one\r\n          setScore(1); // Start score at 1 since one country is already placed\r\n          setGameStatus('placing');\r\n        } else if (shuffled.length === 1) {\r\n           // Handle case with only one country - technically game over?\r\n           setSortedCountries([shuffled[0]]);\r\n           setCurrentCountry(null);\r\n           setCountriesToPick([]);\r\n           setScore(0);\r\n           setGameStatus('ended');\r\n           // Maybe navigate immediately?\r\n           navigate('/gameover', { \r\n             state: { score: 0, message: 'Only one country found, nothing to sort!', mode: 'classic_population' },\r\n             replace: true \r\n           });\r\n        } else {\r\n          setError(\"Not enough countries found to start the game.\");\r\n          setGameStatus('ended');\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Failed to load countries:\", err);\r\n        setError(err.message || \"Failed to load game data.\");\r\n        setGameStatus('ended');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    loadGame();\r\n  }, [navigate]);\r\n\r\n  const pickNextCountry = () => {\r\n    if (countriesToPick.length > 0) {\r\n      const nextCountry = countriesToPick[0];\r\n      setCurrentCountry(nextCountry);\r\n      setCountriesToPick(countriesToPick.slice(1));\r\n      setGameStatus('placing');\r\n    } else {\r\n      // All countries sorted correctly!\r\n      setGameStatus('ended');\r\n      navigate('/gameover', { \r\n        state: { \r\n          score: score, \r\n          message: 'Congratulations! You sorted all countries!',\r\n          mode: 'classic_population'\r\n        },\r\n        replace: true \r\n      });\r\n    }\r\n  };\r\n\r\n  const handlePlaceCountry = (index) => {\r\n    if (!currentCountry || gameStatus !== 'placing') return;\r\n\r\n    const countryToPlace = currentCountry;\r\n    const newSortedCountries = [...sortedCountries];\r\n    newSortedCountries.splice(index, 0, countryToPlace);\r\n\r\n    // Check if the new placement is correct based on population (Lowest to Highest)\r\n    let isCorrect = true;\r\n    if (index > 0) { // Check predecessor\r\n      // Population: Lower is better (comes first)\r\n      isCorrect = isCorrect && newSortedCountries[index - 1].population <= countryToPlace.population;\r\n    }\r\n    if (index < newSortedCountries.length - 1) { // Check successor\r\n      isCorrect = isCorrect && countryToPlace.population <= newSortedCountries[index + 1].population;\r\n    }\r\n\r\n    if (isCorrect) {\r\n      setSortedCountries(newSortedCountries);\r\n      setScore(score + 1);\r\n      setCurrentCountry(null);\r\n      pickNextCountry();\r\n    } else {\r\n      // Capture state *before* navigating\r\n      const finalSortedList = [...sortedCountries]; // Copy the list before incorrect placement\r\n      const incorrectCountry = countryToPlace;\r\n      const attemptedIndex = index;\r\n\r\n      setGameStatus('ended');\r\n      navigate('/gameover', {\r\n        state: {\r\n          score: score, // Score before the failed attempt\r\n          message: `Incorrect placement. Game Over!`,\r\n          mode: 'classic_population',\r\n          // Add final state details\r\n          finalSortedList: finalSortedList,\r\n          incorrectCountry: incorrectCountry,\r\n          attemptedIndex: attemptedIndex\r\n        },\r\n        replace: true\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div className=\"game-page\">Loading Game...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"game-page\">Error: {error} <button onClick={() => window.location.reload()}>Retry</button></div>;\r\n  }\r\n\r\n  if (gameStatus === 'ended' && !isLoading) {\r\n     // Should have navigated away, but show a fallback just in case\r\n     return <div className=\"game-page\">Game Over! Final Score: {score}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-page\">\r\n      <h2>Classic Mode - Sort by Population (Lowest to Highest)</h2>\r\n      <p>Score: {score}</p>\r\n      \r\n\r\n      <div className=\"sorted-countries-container\">\r\n        \r\n        <div className=\"sorted-countries\">\r\n          {currentCountry && gameStatus === 'placing' && (\r\n            <div\r\n              className=\"insertion-point\"\r\n              onClick={() => handlePlaceCountry(0)}\r\n              title={`Place ${currentCountry.name} at the beginning`}\r\n            >\r\n              +\r\n            </div>\r\n          )}\r\n          {sortedCountries.map((country, index) => (\r\n            <React.Fragment key={`fragment-${country.id}`}>\r\n              <CountryCard\r\n                country={country}\r\n                isClickable={true}\r\n                mode=\"population\"\r\n              />\r\n              {currentCountry && gameStatus === 'placing' && (\r\n                <div\r\n                  className=\"insertion-point\"\r\n                  onClick={() => handlePlaceCountry(index + 1)}\r\n                  title={`Place ${currentCountry.name} after ${country.name}`}\r\n                >\r\n                  +\r\n                </div>\r\n              )}\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {gameStatus === 'placing' && currentCountry && (\r\n        <div className=\"current-country\">\r\n          <h3>Place this Country:</h3>\r\n          <div\r\n            className=\"current-country-wrapper\"\r\n            title={`${currentCountry.name} - place it in the list above`}\r\n          >\r\n            <CountryCard\r\n              country={currentCountry}\r\n              isClickable={false}\r\n              mode=\"population\"\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n       {/* Optionally show next few countries to pick later */}\r\n       {/* <div className=\"remaining-countries\"> ... </div> */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClassicGamePage; ","// src/api/leaderboardApi.js\r\n\r\n// For now, we'll use localStorage to store leaderboard data\r\n// In a real application, this would be replaced with actual API calls to a backend\r\n\r\nconst LEADERBOARD_KEY = 'sortly_leaderboard';\r\n\r\nexport const submitScore = (playerName, score, mode) => {\r\n  const leaderboard = getLeaderboard();\r\n  const newEntry = {\r\n    id: Date.now(),\r\n    playerName,\r\n    score,\r\n    mode,\r\n    date: new Date().toISOString(),\r\n  };\r\n  \r\n  leaderboard.push(newEntry);\r\n  // Sort by score (descending) and keep only top 100 entries\r\n  leaderboard.sort((a, b) => b.score - a.score);\r\n  const top100 = leaderboard.slice(0, 100);\r\n  \r\n  localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(top100));\r\n  return newEntry;\r\n};\r\n\r\nexport const getLeaderboard = (mode = null) => {\r\n  const leaderboard = JSON.parse(localStorage.getItem(LEADERBOARD_KEY) || '[]');\r\n  if (mode) {\r\n    return leaderboard.filter(entry => entry.mode === mode);\r\n  }\r\n  return leaderboard;\r\n};\r\n\r\nexport const getTopScores = (mode = null, limit = 10) => {\r\n  const leaderboard = getLeaderboard(mode);\r\n  return leaderboard.slice(0, limit);\r\n}; ","import { db } from '../firebase';\nimport { collection, query, where, orderBy, limit as firestoreLimit, getDocs, addDoc, serverTimestamp } from 'firebase/firestore';\n\nconst GAME_HISTORY_COLLECTION = 'gameHistory';\nconst CATEGORIES = ['population', 'area'];\n\nexport const gameHistoryService = {\n  async getTopGames(userId, category, limitCount = 5) {\n    try {\n      const gamesRef = collection(db, GAME_HISTORY_COLLECTION);\n      const q = query(\n        gamesRef,\n        where('userId', '==', userId),\n        where('category', '==', category),\n        orderBy('score', 'desc'),\n        firestoreLimit(limitCount)\n      );\n\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      // If the index is not ready, fall back to fetching all games and sorting in memory\n      const q = query(\n        collection(db, GAME_HISTORY_COLLECTION),\n        where('userId', '==', userId),\n        where('category', '==', category)\n      );\n\n      const querySnapshot = await getDocs(q);\n      const games = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      return games.sort((a, b) => b.score - a.score).slice(0, limitCount);\n    }\n  },\n\n  async getAllTopGames(userId) {\n    try {\n      const topGames = {};\n      await Promise.all(\n        CATEGORIES.map(async category => {\n          topGames[category] = await this.getTopGames(userId, category);\n        })\n      );\n      return topGames;\n    } catch (error) {\n      console.error('Error fetching all top games:', error);\n      return {};\n    }\n  },\n\n  async saveGame(userId, category, score, countries) {\n    try {\n      const minimalCountries = countries.map(({ id, name, flagUrl }) => ({\n        id,\n        name,\n        flagUrl\n      }));\n\n      await addDoc(collection(db, GAME_HISTORY_COLLECTION), {\n        userId,\n        category,\n        score,\n        countries: minimalCountries,\n        timestamp: serverTimestamp()\n      });\n    } catch (error) {\n      console.error('Error saving game history:', error);\n      throw error;\n    }\n  }\n}; ","// src/pages/GameOverPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport CountryCard from '../components/CountryCard';\nimport { submitScore } from '../api/leaderboardApi';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport { userProfileService } from '../services/userProfileService';\nimport { useAuth } from '../contexts/AuthContext';\nimport './GameOverPage.css';\nimport '../components/Buttons.css';\n\nfunction GameOverPage() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  const { score = 0, message = 'Game Over!', incorrectCountry, userOrder, correctOrder, mode = 'unknown' } = location.state || {};\n  const [playerName, setPlayerName] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState('');\n  const hasSaved = useRef(false);\n\n  // Fetch user profile and set nickname if logged in\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (currentUser) {\n        try {\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\n          if (profile?.nickname) {\n            setPlayerName(profile.nickname);\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n    fetchUserProfile();\n  }, [currentUser]);\n\n  useEffect(() => {\n    const saveGameHistory = async () => {\n      if (currentUser && userOrder && !hasSaved.current) {\n        try {\n          console.log('Attempting to save game history:', {\n            userId: currentUser.uid,\n            mode,\n            score: score - 1,\n            countriesCount: userOrder.length\n          });\n          \n          await gameHistoryService.saveGame(\n            currentUser.uid,\n            mode,\n            score - 1,\n            userOrder.map(country => ({\n              id: country.id,\n              name: country.name,\n              flagUrl: country.flagUrl\n            }))\n          );\n          hasSaved.current = true;\n          console.log('Game history saved successfully');\n        } catch (error) {\n          console.error('Error saving game history:', error);\n        }\n      }\n    };\n\n    saveGameHistory();\n  }, [currentUser, userOrder, mode, score]); // Include all dependencies\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!playerName.trim()) {\n      setError('Please enter your name');\n      return;\n    }\n    \n    try {\n      submitScore(playerName, score - 1, mode);\n      setIsSubmitted(true);\n    } catch (err) {\n      setError('Failed to submit score. Please try again.');\n    }\n  };\n\n  // Function to determine the correct path for \"Play Again\"\n  const getPlayAgainPath = () => {\n    switch (mode) {\n      case 'classic_population':\n        return '/game/population'; // Path for classic population mode\n      case 'cooperation': // Assuming cooperation mode might pass 'cooperation' or similar\n        return '/game/population/cooperation'; // Path to start a new cooperation game (lobby)\n      case 'classic_area': // Placeholder for future classic area mode\n         return '/game/area'; \n      default:\n        return '/'; // Default to homepage if mode is unknown\n    }\n  };\n\n  return (\n    <div className=\"game-over-page\">\n      <h2>Game Over</h2>\n      <p>{message}</p>\n      <p>Your final score: {score - 1}</p>\n\n      {!isSubmitted ? (\n        <form onSubmit={handleSubmit} className=\"score-submission\">\n          <div className=\"input-group\">\n            <label htmlFor=\"playerName\">Enter your name:</label>\n            <input\n              type=\"text\"\n              id=\"playerName\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              placeholder=\"Your name\"\n              maxLength={20}\n            />\n          </div>\n          {error && <p className=\"error\">{error}</p>}\n          <button type=\"submit\" className=\"button button-primary\">\n            Submit Score\n          </button>\n        </form>\n      ) : (\n        <div className=\"submission-success\">\n          <p>Score submitted successfully!</p>\n        </div>\n      )}\n\n      {userOrder && incorrectCountry && (\n        <div className=\"user-order\">\n          <h3>Your order was:</h3>\n          <div className=\"country-list\">\n            {userOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={true}\n                highlight={country.id === incorrectCountry.id ? 'incorrect' : ''}\n                mode={mode}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {correctOrder && incorrectCountry && (\n        <div className=\"correct-order\">\n          <h3>The correct order was:</h3>\n          <div className=\"country-list\">\n            {correctOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={true}\n                highlight={country.id === incorrectCountry.id ? 'correct' : ''}\n                mode={mode}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"game-over-buttons\">\n        <button className=\"button button-primary\" onClick={() => navigate(getPlayAgainPath())}>\n          Play Again\n        </button>\n        <button className=\"button button-secondary\" onClick={() => navigate('/')}>\n          Go to Home Page\n        </button>\n        <button className=\"button button-secondary\" onClick={() => navigate('/leaderboard')}>\n          View Leaderboard\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameOverPage;\n","export const formatDate = (timestamp) => {\r\n  if (!timestamp?.toDate) return null;\r\n  return timestamp.toDate().toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  });\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { getLeaderboard } from '../api/leaderboardApi';\r\nimport { formatDate } from '../utils/dateUtils';\r\nimport './LeaderboardPage.css';\r\n\r\nfunction LeaderboardPage() {\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadLeaderboard = () => {\r\n      const data = getLeaderboard(selectedMode);\r\n      setLeaderboard(data);\r\n    };\r\n    loadLeaderboard();\r\n  }, [selectedMode]);\r\n\r\n  return (\r\n    <div className=\"leaderboard-page\">\r\n      <h2>Leaderboard</h2>\r\n      \r\n      <div className=\"mode-filters\">\r\n        <button \r\n          className={`button ${!selectedMode ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode(null)}\r\n        >\r\n          All Modes\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'population' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('population')}\r\n        >\r\n          Population\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'area' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('area')}\r\n        >\r\n          Area\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"leaderboard-table\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Rank</th>\r\n              <th>Player</th>\r\n              <th>Score</th>\r\n              <th>Mode</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {leaderboard.map((entry, index) => (\r\n              <tr key={entry.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{entry.playerName}</td>\r\n                <td>{entry.score}</td>\r\n                <td>{entry.mode.charAt(0).toUpperCase() + entry.mode.slice(1)}</td>\r\n                <td>{formatDate(entry.date)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeaderboardPage; ","import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\n\nconst ACHIEVEMENTS_COLLECTION = 'achievements';\n\nconst ACHIEVEMENT_DEFINITIONS = {\n  population: {\n    sorting: {\n      bronze: { id: 'population_sorting_bronze', title: 'Population Bronze Sorter', description: 'Correctly sort 3 countries by population', icon: '🥉', requirement: 3 },\n      silver: { id: 'population_sorting_silver', title: 'Population Silver Sorter', description: 'Correctly sort 7 countries by population', icon: '🥈', requirement: 7 },\n      gold: { id: 'population_sorting_gold', title: 'Population Gold Sorter', description: 'Correctly sort 12 countries by population', icon: '🥇', requirement: 12 },\n      platinum: { id: 'population_sorting_platinum', title: 'Population Platinum Sorter', description: 'Correctly sort 20 countries by population', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'population_games',\n      title: 'Population Game Master',\n      description: 'Complete 50 population sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  },\n  area: {\n    sorting: {\n      bronze: { id: 'area_sorting_bronze', title: 'Area Bronze Sorter', description: 'Correctly sort 3 countries by area', icon: '🥉', requirement: 3 },\n      silver: { id: 'area_sorting_silver', title: 'Area Silver Sorter', description: 'Correctly sort 7 countries by area', icon: '🥈', requirement: 7 },\n      gold: { id: 'area_sorting_gold', title: 'Area Gold Sorter', description: 'Correctly sort 12 countries by area', icon: '🥇', requirement: 12 },\n      platinum: { id: 'area_sorting_platinum', title: 'Area Platinum Sorter', description: 'Correctly sort 20 countries by area', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'area_games',\n      title: 'Area Game Master',\n      description: 'Complete 50 area sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  }\n};\n\nexport const achievementsService = {\n  // Get user achievements\n  async getUserAchievements(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId));\n      return userDoc.exists() ? userDoc.data() : null;\n    } catch (error) {\n      console.error('Error getting user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Update user achievements\n  async updateUserAchievements(userId, achievements) {\n    try {\n      await setDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId), {\n        ...achievements,\n        updatedAt: serverTimestamp()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Check and update achievements based on game results\n  async checkAndUpdateAchievements(userId, category, correctCount) {\n    try {\n      const currentAchievements = await this.getUserAchievements(userId) || {};\n      const categoryAchievements = ACHIEVEMENT_DEFINITIONS[category];\n      let updated = false;\n\n      // Check sorting achievements\n      Object.values(categoryAchievements.sorting).forEach(achievement => {\n        if (!currentAchievements[achievement.id] && correctCount >= achievement.requirement) {\n          currentAchievements[achievement.id] = {\n            unlocked: true,\n            unlockedAt: serverTimestamp()\n          };\n          updated = true;\n        }\n      });\n\n      // Check game count achievements\n      const gameCountAchievement = categoryAchievements.gameCount;\n      const currentCount = (currentAchievements[gameCountAchievement.id]?.count || 0) + 1;\n      \n      if (currentCount >= gameCountAchievement.requirement && !currentAchievements[gameCountAchievement.id]?.unlocked) {\n        currentAchievements[gameCountAchievement.id] = {\n          unlocked: true,\n          unlockedAt: serverTimestamp(),\n          count: currentCount\n        };\n        updated = true;\n      } else {\n        currentAchievements[gameCountAchievement.id] = {\n          ...currentAchievements[gameCountAchievement.id],\n          count: currentCount\n        };\n        updated = true;\n      }\n\n      if (updated) {\n        await this.updateUserAchievements(userId, currentAchievements);\n      }\n\n      return currentAchievements;\n    } catch (error) {\n      console.error('Error checking achievements:', error);\n      throw error;\n    }\n  },\n\n  // Achievement definitions\n  getAchievementDefinitions() {\n    return ACHIEVEMENT_DEFINITIONS;\n  }\n}; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AvatarSelector.css';\r\n\r\nconst AvatarSelector = ({ avatarOptions, selectedAvatar, onSelect, onClose }) => (\r\n  <div className=\"avatar-selector\">\r\n    <div className=\"avatar-grid\">\r\n      {avatarOptions.map(avatar => (\r\n        <div \r\n          key={avatar.id} \r\n          className={`avatar-option ${selectedAvatar === avatar.url ? 'selected' : ''}`}\r\n          onClick={() => onSelect(avatar.url)}\r\n        >\r\n          <img src={avatar.url} alt={avatar.name} />\r\n          <span>{avatar.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAvatarSelector.propTypes = {\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  selectedAvatar: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AvatarSelector; ","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarSelector from './AvatarSelector';\r\nimport './ProfileHeader.css';\r\n\r\nconst ProfileHeader = ({ \r\n  profile, \r\n  currentUser, \r\n  avatarOptions,\r\n  onSubmit\r\n}) => {\r\n  const [formData, setFormData] = useState({\r\n    nickname: profile?.nickname || '',\r\n    country: profile?.country || '',\r\n    avatarUrl: profile?.avatarUrl || avatarOptions[0].url\r\n  });\r\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleAvatarSelect = (avatarUrl) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      avatarUrl\r\n    }));\r\n    setShowAvatarSelector(false);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await onSubmit(formData);\r\n      setIsEditing(false);\r\n    } catch (error) {\r\n      console.error('Error saving profile:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-header\">\r\n      <div className=\"avatar-container\">\r\n        <img \r\n          src={formData.avatarUrl} \r\n          alt=\"Profile\" \r\n          className=\"profile-avatar\"\r\n          onClick={() => setShowAvatarSelector(true)}\r\n        />\r\n        {showAvatarSelector && (\r\n          <AvatarSelector\r\n            avatarOptions={avatarOptions}\r\n            selectedAvatar={formData.avatarUrl}\r\n            onSelect={handleAvatarSelect}\r\n            onClose={() => setShowAvatarSelector(false)}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"profile-info\">\r\n        <form onSubmit={handleSubmit} className=\"profile-form\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"nickname\"\r\n              value={formData.nickname}\r\n              onChange={handleChange}\r\n              placeholder=\"Set your nickname\"\r\n              className=\"inline-input\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"country\"\r\n              value={formData.country}\r\n              onChange={handleChange}\r\n              placeholder=\"Set your country\"\r\n              className=\"inline-input\"\r\n            />\r\n          </div>\r\n          <div className=\"email-display\">{currentUser.email}</div>\r\n          {isEditing && (\r\n            <button type=\"submit\" className=\"save-button\">\r\n              Save Changes\r\n            </button>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileHeader.propTypes = {\r\n  profile: PropTypes.shape({\r\n    nickname: PropTypes.string,\r\n    country: PropTypes.string,\r\n    avatarUrl: PropTypes.string\r\n  }),\r\n  currentUser: PropTypes.shape({\r\n    email: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ProfileHeader; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './AchievementCard.css';\r\n\r\nconst AchievementCard = ({ achievement, isUnlocked, unlockDate }) => (\r\n  <div className={`achievement-card ${isUnlocked ? 'unlocked' : 'locked'}`}>\r\n    <div className=\"achievement-content\">\r\n      <div className=\"achievement-icon\">{achievement.icon}</div>\r\n      <div className=\"achievement-info\">\r\n        <h3>{achievement.title}</h3>\r\n        <p>{achievement.description}</p>\r\n        {isUnlocked && unlockDate && (\r\n          <div className=\"achievement-date\">\r\n            Unlocked: {formatDate(unlockDate)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className=\"achievement-status\">\r\n      {isUnlocked ? '✓' : '🔒'}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAchievementCard.propTypes = {\r\n  achievement: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  isUnlocked: PropTypes.bool.isRequired,\r\n  unlockDate: PropTypes.object\r\n};\r\n\r\nexport default AchievementCard; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AchievementCard from './AchievementCard';\r\nimport { transformAchievementDefinitions } from '../../utils/achievementUtils';\r\nimport './AchievementsSection.css';\r\n\r\nconst AchievementsSection = ({ achievementDefinitions, achievements }) => {\r\n  const transformedAchievements = transformAchievementDefinitions(achievementDefinitions);\r\n\r\n  return (\r\n    <div className=\"achievements-section\">\r\n      <h2>Achievements</h2>\r\n      <div className=\"achievements-grid\">\r\n        {transformedAchievements.map(achievement => (\r\n          <AchievementCard\r\n            key={achievement.id}\r\n            achievement={achievement}\r\n            isUnlocked={achievements?.[achievement.id]?.unlocked ?? false}\r\n            unlockDate={achievements?.[achievement.id]?.unlockedAt}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievementsSection.propTypes = {\r\n  achievementDefinitions: PropTypes.object.isRequired,\r\n  achievements: PropTypes.objectOf(PropTypes.shape({\r\n    unlocked: PropTypes.bool,\r\n    unlockedAt: PropTypes.object\r\n  }))\r\n};\r\n\r\nexport default AchievementsSection; ","export const transformAchievementDefinitions = (definitions) => {\r\n  const achievements = [];\r\n  \r\n  // Process each category (population, area)\r\n  Object.entries(definitions).forEach(([category, categoryData]) => {\r\n    // Process sorting achievements\r\n    Object.entries(categoryData.sorting).forEach(([level, achievement]) => {\r\n      achievements.push({\r\n        ...achievement,\r\n        category,\r\n        type: 'sorting'\r\n      });\r\n    });\r\n    \r\n    // Process game count achievement\r\n    if (categoryData.gameCount) {\r\n      achievements.push({\r\n        ...categoryData.gameCount,\r\n        category,\r\n        type: 'gameCount'\r\n      });\r\n    }\r\n  });\r\n  \r\n  return achievements;\r\n}; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './GameHistoryItem.css';\r\n\r\nconst GameHistoryItem = ({ game, index }) => (\r\n  <div className=\"game-history-item\">\r\n    <div className=\"game-rank\">#{index + 1}</div>\r\n    <div className=\"game-score\">Score: {game.score}</div>\r\n    <div className=\"game-mode\">{game.category.charAt(0).toUpperCase() + game.category.slice(1)} Mode</div>\r\n    <div className=\"game-date\">\r\n      {game.timestamp?.toDate ? formatDate(game.timestamp) : 'Date unavailable'}\r\n    </div>\r\n    <div className=\"game-countries\">\r\n      {game.countries?.map((country, idx) => (\r\n        <div key={idx} className=\"country-item\">\r\n          <img src={country.flagUrl} alt={country.name} className=\"country-flag\" />\r\n          <span>{country.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nGameHistoryItem.propTypes = {\r\n  game: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    category: PropTypes.string.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  }).isRequired,\r\n  index: PropTypes.number.isRequired\r\n};\r\n\r\nexport default GameHistoryItem; ","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GameHistoryItem from './GameHistoryItem';\r\nimport './GameHistory.css';\r\n\r\nconst GameHistory = ({ gameHistory }) => {\r\n  const topGames = useMemo(() => {\r\n    if (!gameHistory || Object.keys(gameHistory).length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const entries = Object.entries(gameHistory);\r\n    const flattenedGames = entries.flatMap(([category, games]) => \r\n      games.map(game => ({ ...game, category }))\r\n    );\r\n\r\n    const uniqueGames = flattenedGames.filter((game, index, self) => \r\n      index === self.findIndex((g) => g.id === game.id)\r\n    );\r\n\r\n    return uniqueGames\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 5);\r\n  }, [gameHistory]);\r\n\r\n  if (!gameHistory) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>Loading game history...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(gameHistory).length === 0) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>No games played yet. Start playing to see your best games here!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-history-section\">\r\n      <h2>Best 5 Games</h2>\r\n      <div className=\"game-history-list\">\r\n        {topGames.map((game, index) => (\r\n          <GameHistoryItem key={game.id} game={game} index={index} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameHistory.propTypes = {\r\n  gameHistory: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  })))\r\n};\r\n\r\nexport default GameHistory; ","import React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { userProfileService } from '../services/userProfileService';\nimport { achievementsService } from '../services/achievementsService';\nimport { avatarService } from '../services/avatarService';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport ProfileHeader from '../components/profile/ProfileHeader';\nimport AchievementsSection from '../components/profile/AchievementsSection';\nimport GameHistory from '../components/profile/GameHistory';\nimport './ProfilePage.css';\n\nconst ProfilePage = () => {\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  const [profile, setProfile] = useState(null);\n  const [achievements, setAchievements] = useState(null);\n  const [gameHistory, setGameHistory] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\n  const [formData, setFormData] = useState({\n    nickname: '',\n    country: '',\n    avatarUrl: ''\n  });\n\n  const avatarOptions = avatarService.getAvatarOptions();\n  const achievementDefinitions = achievementsService.getAchievementDefinitions();\n  const userId = currentUser?.uid;\n\n  const loadProfile = useCallback(async () => {\n    if (!userId) return;\n    \n    try {\n      const [userProfile, userAchievements, userGameHistory] = await Promise.all([\n        userProfileService.getUserProfile(userId),\n        achievementsService.getUserAchievements(userId),\n        gameHistoryService.getAllTopGames(userId)\n      ]);\n\n      if (userProfile) {\n        setProfile(userProfile);\n        setFormData({\n          nickname: userProfile.nickname || '',\n          country: userProfile.country || '',\n          avatarUrl: userProfile.avatarUrl || avatarOptions[0].url\n        });\n      }\n\n      setAchievements(userAchievements);\n      setGameHistory(userGameHistory);\n    } catch (error) {\n      setError('Failed to load profile: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId, avatarOptions]);\n\n  useEffect(() => {\n    if (currentUser) {\n      loadProfile();\n    }\n  }, [currentUser, loadProfile]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleAvatarSelect = (avatarUrl) => {\n    setFormData(prev => ({ ...prev, avatarUrl }));\n    setShowAvatarSelector(false);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setError('');\n      await userProfileService.updateUserProfile(currentUser.uid, formData);\n      setProfile(prev => ({ ...prev, ...formData }));\n      setEditing(false);\n    } catch (error) {\n      setError('Failed to update profile: ' + error.message);\n    }\n  };\n\n  if (!currentUser) {\n    navigate('/');\n    return null;\n  }\n\n  if (loading) {\n    return <div className=\"profile-page\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"profile-page\">\n      <div className=\"profile-content\">\n        <ProfileHeader\n          profile={profile}\n          currentUser={currentUser}\n          editing={editing}\n          formData={formData}\n          avatarOptions={avatarOptions}\n          showAvatarSelector={showAvatarSelector}\n          onEdit={() => setEditing(true)}\n          onAvatarSelect={handleAvatarSelect}\n          onAvatarSelectorToggle={() => setShowAvatarSelector(!showAvatarSelector)}\n          onSubmit={handleSubmit}\n          onChange={handleInputChange}\n          onCancel={() => setEditing(false)}\n        />\n\n        {error && <div className=\"error-message\">{error}</div>}\n\n        <AchievementsSection\n          achievementDefinitions={achievementDefinitions}\n          achievements={achievements}\n        />\n\n        <GameHistory gameHistory={gameHistory} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage; ","import { realtimeDb } from '../firebase';\nimport { ref, set, update, remove, get, onValue, off } from 'firebase/database';\n\nconst LOBBIES_PATH = 'lobbies';\n\nclass LobbyService {\n  constructor() {\n    this.lobbiesRef = ref(realtimeDb, LOBBIES_PATH);\n  }\n\n  // Create a new lobby\n  async createLobby(lobbyId, player) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await set(lobbyRef, {\n      players: [player],\n      status: 'waiting',\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n    return lobbyId;\n  }\n\n  // Join an existing lobby\n  async joinLobby(lobbyId, player) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const snapshot = await get(lobbyRef);\n    const lobbyData = snapshot.val();\n    \n    if (lobbyData) {\n      const currentPlayers = lobbyData.players || [];\n      await update(lobbyRef, {\n        players: [...currentPlayers, player],\n        lastUpdated: Date.now()\n      });\n    } else {\n      throw new Error('Lobby not found');\n    }\n  }\n\n  // Leave a lobby\n  async leaveLobby(lobbyId, playerId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const snapshot = await get(lobbyRef);\n    const lobbyData = snapshot.val();\n    \n    if (lobbyData) {\n      const currentPlayers = lobbyData.players || [];\n      const updatedPlayers = currentPlayers.filter(p => p.id !== playerId);\n      \n      if (updatedPlayers.length === 0) {\n        // If no players left, delete the lobby\n        await remove(lobbyRef);\n      } else {\n        // Otherwise update the players list\n        await update(lobbyRef, {\n          players: updatedPlayers,\n          lastUpdated: Date.now()\n        });\n      }\n    }\n  }\n\n  // Subscribe to lobby changes\n  subscribeToLobby(lobbyId, callback) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    onValue(lobbyRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        callback(data);\n      } else {\n        callback(null);\n      }\n    });\n\n    // Return unsubscribe function\n    return () => off(lobbyRef);\n  }\n\n  // Start the game\n  async startGame(lobbyId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await update(lobbyRef, {\n      status: 'playing',\n      startedAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n  }\n\n  // End the game\n  async endGame(lobbyId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await update(lobbyRef, {\n      status: 'completed',\n      endedAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n  }\n\n  // Clean up lobby\n  async cleanupLobby(lobbyId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await remove(lobbyRef);\n  }\n}\n\nexport const lobbyService = new LobbyService(); ","import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { userProfileService } from '../services/userProfileService';\nimport { lobbyService } from '../services/lobbyService';\nimport { cooperationGameService } from '../services/cooperationGameService';\nimport './GameLobby.css';\n\nfunction GameLobby() {\n  const { currentUser } = useAuth();\n  const [lobbyId, setLobbyId] = useState('');\n  const [players, setPlayers] = useState([]);\n  const [isHost, setIsHost] = useState(false);\n  const [error, setError] = useState('');\n  const [copyStatus, setCopyStatus] = useState('');\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const currentLobbyId = useRef('');\n  const currentPlayer = useRef(null);\n\n  useEffect(() => {\n    let unsubscribeFn = null;\n\n    const initializeLobby = async () => {\n      try {\n        if (!currentUser) {\n          setError('Please log in to join or create a lobby');\n          setTimeout(() => navigate('/'), 2000);\n          return;\n        }\n\n        // Get current user's nickname if logged in\n        let playerName = '';\n        try {\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\n          if (profile?.nickname) {\n            playerName = profile.nickname;\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n\n        // Check for lobby ID in URL parameters\n        const lobbyParam = searchParams.get('lobby');\n        \n        if (lobbyParam) {\n          // Join existing lobby\n          currentLobbyId.current = lobbyParam;\n          setLobbyId(lobbyParam);\n          setIsHost(false);\n          \n          // Set default name if no nickname\n          if (!playerName) {\n            playerName = 'Player 2';\n          }\n          \n          // Use actual user ID instead of hardcoded value\n          currentPlayer.current = { \n            id: currentUser.uid, \n            name: playerName,\n            email: currentUser.email \n          };\n\n          try {\n            await lobbyService.joinLobby(lobbyParam, currentPlayer.current);\n            // Rely on subscription for player list\n          } catch (error) {\n            console.error('Error joining lobby:', error);\n            setError(error.message || 'Failed to join lobby');\n            setTimeout(() => navigate('/'), 2000);\n            return; // Stop execution if join fails\n          }\n        } else { // This 'else' now correctly corresponds to 'if (lobbyParam)'\n          // Create new lobby\n          const newLobbyId = Math.random().toString(36).substring(2, 8).toUpperCase();\n          currentLobbyId.current = newLobbyId;\n          setLobbyId(newLobbyId);\n          setIsHost(true);\n          \n          // Set default name if no nickname\n          if (!playerName) {\n            playerName = 'Player 1';\n          }\n          \n          // Use actual user ID instead of hardcoded value\n          currentPlayer.current = { \n            id: currentUser.uid, \n            name: playerName,\n            email: currentUser.email \n          };\n\n          try {\n            await lobbyService.createLobby(newLobbyId, currentPlayer.current);\n            // Rely on subscription for player list\n          } catch (error) {\n            console.error('Error creating lobby:', error);\n            setError(error.message || 'Failed to create lobby');\n            setTimeout(() => navigate('/'), 2000);\n            return; // Stop execution if create fails\n          }\n        } // End of if/else for join/create\n\n        // Subscribe to lobby changes (this should now use the correct lobbyId)\n        unsubscribeFn = lobbyService.subscribeToLobby(currentLobbyId.current, (lobbyData) => {\n          if (lobbyData) {\n            // Update players list with all players from the lobby\n            const updatedPlayers = lobbyData.players || [];\n            setPlayers(updatedPlayers);\n            \n            if (lobbyData.status === 'playing') {\n              navigate('/game/population/cooperation/play', { \n                state: { lobbyId: currentLobbyId.current, players: updatedPlayers } \n              });\n            }\n          } else {\n            setError('Lobby not found or has been closed');\n            setTimeout(() => navigate('/'), 2000);\n          }\n        });\n      } catch (error) {\n        console.error('Error initializing lobby:', error);\n        setError('Failed to initialize lobby');\n      }\n    };\n\n    initializeLobby();\n\n    // Cleanup subscription when component unmounts\n    return () => {\n      if (unsubscribeFn) {\n        unsubscribeFn();\n      }\n      if (currentLobbyId.current && currentPlayer.current) {\n        lobbyService.leaveLobby(currentLobbyId.current, currentPlayer.current.id);\n      }\n    };\n  }, [searchParams, currentUser, navigate]);\n\n  const copyLink = async () => {\n    const baseUrl = window.location.origin;\n    const gameLink = `${baseUrl}/#/game/population/cooperation?lobby=${encodeURIComponent(currentLobbyId.current)}`;\n    \n    try {\n      await navigator.clipboard.writeText(gameLink);\n      setCopyStatus('Copied!');\n      setTimeout(() => {\n        setCopyStatus('');\n      }, 2000);\n    } catch (err) {\n      const textArea = document.createElement('textarea');\n      textArea.value = gameLink;\n      document.body.appendChild(textArea);\n      textArea.select();\n      try {\n        document.execCommand('copy');\n        setCopyStatus('Copied!');\n        setTimeout(() => {\n          setCopyStatus('');\n        }, 2000);\n      } catch (err) {\n        setCopyStatus('Failed to copy');\n        console.error('Failed to copy text: ', err);\n      }\n      document.body.removeChild(textArea);\n    }\n  };\n\n  const startGame = async () => {\n    if (!isHost) return;\n    if (players.length < 2) {\n      setError('Waiting for another player to join...');\n      return;\n    }\n    try {\n      setError('');\n      \n      // 1. Initialize game state in Firebase (this service function will now fetch/select countries)\n      await cooperationGameService.initializeGameState(\n        currentLobbyId.current, \n        players\n        // No longer passing selectedCountries from here\n      );\n\n      // 2. Update lobby status to 'playing' (triggers navigation)\n      await lobbyService.startGame(currentLobbyId.current);\n\n    } catch (error) {\n      console.error('Error starting game:', error);\n      setError(error.message || 'Failed to start game');\n    }\n  };\n\n  return (\n    <div className=\"game-lobby\">\n      <h2>Game Lobby</h2>\n      <div className=\"lobby-info\">\n        <p>Lobby ID: <strong>{lobbyId}</strong></p>\n        {isHost && (\n          <button \n            className={`button button-secondary copy-button ${copyStatus ? 'copied' : ''}`}\n            onClick={copyLink}\n          >\n            {copyStatus || 'Copy Invite Link'}\n          </button>\n        )}\n      </div>\n\n      <div className=\"players-list\">\n        <h3>Players in Lobby:</h3>\n        <ul>\n          {players.map((player) => (\n            <li key={player.id} className={player.id === currentPlayer.current?.id ? 'current-player' : ''}>\n              {player.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {error && <p className=\"error\">{error}</p>}\n\n      <div className=\"lobby-actions\">\n        {isHost && (\n          <button className=\"button button-primary\" onClick={startGame}>\n            Start Game\n          </button>\n        )}\n        <button \n          className=\"button button-secondary\" \n          onClick={() => navigate('/')}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameLobby; ","import { \r\n  collection, \r\n  addDoc, \r\n  query, \r\n  orderBy, \r\n  getDocs,\r\n  where,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst LEADERBOARD_COLLECTION = 'scores';\r\n\r\nexport const leaderboardService = {\r\n  // Add a new score\r\n  async addScore(userId, username, score, gameMode) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, LEADERBOARD_COLLECTION), {\r\n        userId,\r\n        username,\r\n        score,\r\n        gameMode,\r\n        timestamp: serverTimestamp()\r\n      });\r\n      return docRef.id;\r\n    } catch (error) {\r\n      console.error('Error adding score:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get global leaderboard\r\n  async getGlobalLeaderboard(limit = 10) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting leaderboard:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user's best scores\r\n  async getUserBestScores(userId, limit = 5) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        where('userId', '==', userId),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting user scores:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; ","import React, { useState } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { leaderboardService } from '../services/leaderboardService';\r\n\r\nexport function FirebaseTest() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [testScore, setTestScore] = useState(null);\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function addTestScore() {\r\n    if (!currentUser) return;\r\n    try {\r\n      await leaderboardService.addScore(\r\n        currentUser.uid,\r\n        currentUser.email,\r\n        100,\r\n        'test'\r\n      );\r\n      setTestScore('Score added successfully!');\r\n    } catch (error) {\r\n      setTestScore('Failed to add score: ' + error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Firebase Test</h2>\r\n      \r\n      {currentUser ? (\r\n        <div>\r\n          <p>Logged in as: {currentUser.email}</p>\r\n          <button onClick={handleLogout} disabled={loading}>\r\n            Log Out\r\n          </button>\r\n          <button onClick={addTestScore} style={{ marginLeft: '10px' }}>\r\n            Add Test Score\r\n          </button>\r\n          {testScore && <p>{testScore}</p>}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"Email\"\r\n              required\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n            <button type=\"submit\" disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n          </form>\r\n          <form onSubmit={handleLogin} style={{ marginTop: '10px' }}>\r\n            <button type=\"submit\" disabled={loading}>\r\n              Log In\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      \r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n} ","// src/App.js\n\nimport React, { useEffect } from 'react';\nimport { useLocation, Routes, Route } from 'react-router-dom';\nimport ReactGA from 'react-ga4';\nimport Header from './components/Header';\nimport Footer from './components/Footer'; \nimport HomePage from './pages/HomePage';\nimport GamePage from './pages/GamePage';\nimport ClassicGamePage from './pages/ClassicGamePage';\nimport GameOverPage from './pages/GameOverPage';\nimport LeaderboardPage from './pages/LeaderboardPage';\nimport ProfilePage from './pages/ProfilePage';\nimport GameLobby from './components/GameLobby';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { FirebaseTest } from './components/FirebaseTest';\nimport './App.css';\n\nfunction App() {\n  const location = useLocation();\n\n  // Initialize Google Analytics only once\n  useEffect(() => {\n    ReactGA.initialize('G-9679TPXEBR'); // Replace with your Measurement ID\n  }, []);\n\n  // Send pageview whenever the pathname changes\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: location.pathname });\n  }, [location.pathname]);\n\n  return (\n    <AuthProvider>\n      <div className=\"App\">\n        <Header />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/game/population\" element={<ClassicGamePage />} />\n            <Route path=\"/game/population/cooperation\" element={<GameLobby />} />\n            <Route path=\"/game/population/cooperation/play\" element={<GamePage />} />\n            <Route path=\"/game/area\" element={<GamePage />} />\n            <Route path=\"/gameover\" element={<GameOverPage />} />\n            <Route path=\"/leaderboard\" element={<LeaderboardPage />} />\n            <Route path=\"/profile\" element={<ProfilePage />} />\n            <Route path=\"/test\" element={<FirebaseTest />} />\n          </Routes>\n        </div>\n        <Footer /> \n      </div>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Wrap everything inside HashRouter\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <DndProvider backend={HTML5Backend}>\n        <App />\n      </DndProvider>\n    </HashRouter>\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}