{"version":3,"sources":["assets/logo.png","assets/population.jpg","assets/area.jpg","firebase.js","contexts/AuthContext.js","services/avatarService.js","services/userProfileService.js","components/LoginButton.js","components/Header.js","components/Footer.js","pages/HomePage.js","components/CountryCard.js","api/countriesApi.js","services/achievementsService.js","pages/GamePage.js","api/leaderboardApi.js","services/gameHistoryService.js","pages/GameOverPage.js","utils/dateUtils.js","pages/LeaderboardPage.js","components/profile/AvatarSelector.jsx","components/profile/ProfileHeader.jsx","components/profile/AchievementCard.jsx","components/profile/AchievementsSection.jsx","utils/achievementUtils.js","components/profile/GameHistoryItem.jsx","components/profile/GameHistory.jsx","pages/ProfilePage.js","services/lobbyService.js","components/GameLobby.js","services/leaderboardService.js","components/FirebaseTest.js","App.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","app","initializeApp","auth","getAuth","db","getFirestore","realtimeDb","getDatabase","AuthContext","createContext","useAuth","useContext","AuthProvider","_ref","children","currentUser","setCurrentUser","useState","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","React","createElement","Provider","avatarService","getAvatarOptions","id","url","name","userProfileService","userId","userDoc","getDoc","doc","exists","data","defaultProfile","nickname","country","avatarUrl","createdAt","Date","this","updateUserProfile","error","console","profileData","userRef","setDoc","updatedAt","merge","field","updateDoc","LoginButton","setEmail","setPassword","setError","showLoginForm","setShowLoginForm","userProfile","setUserProfile","navigate","useNavigate","async","profile","getUserProfile","uid","loadUserProfile","className","onClick","src","alt","message","disabled","type","onChange","e","target","placeholder","required","preventDefault","style","color","Header","isMenuOpen","setIsMenuOpen","closeMenu","Link","to","logo","toggleMenu","Footer","getFullYear","HomePage","backgroundImage","populationImage","backgroundPosition","backgroundSize","backgroundRepeat","handlePlayPopulation","ReactGA","event","category","action","handlePlayCooperation","areaImage","handlePlayArea","CountryCard","isClickable","highlight","mode","isFlipped","setIsFlipped","highlightClass","handleClick","flagUrl","population","toLocaleString","area","ACHIEVEMENT_DEFINITIONS","sorting","bronze","title","description","icon","requirement","silver","gold","platinum","gameCount","achievementsService","achievements","serverTimestamp","correctCount","_currentAchievements$","_currentAchievements$2","currentAchievements","getUserAchievements","categoryAchievements","updated","Object","values","forEach","achievement","unlocked","unlockedAt","gameCountAchievement","currentCount","count","updateUserAchievements","getAchievementDefinitions","GamePage","sortedCountries","setSortedCountries","currentCountry","setCurrentCountry","remainingCountries","setRemainingCountries","score","setScore","hoverIndex","setHoverIndex","isCooperationMode","setIsCooperationMode","playerName","setPlayerName","gameState","setGameState","location","useLocation","getRandomCountry","countries","randomIndex","Math","floor","random","length","splice","startNewGame","useCallback","availableCountries","selectedCountries","i","push","startingCountry","countriesCopy","nextCountry","firstCountry","path","pathname","includes","_players$find","players","lobbyId","state","player","find","p","validCountries","response","fetch","ok","Error","status","json","Array","isArray","unMemberCountries","filter","_country$name","_country$flags","unMember","common","flags","svg","map","index","fetchCountries","initializeGame","compareProperty","handleInsert","newSortedCountries","isCorrectOrder","prevScore","log","updatedAchievements","checkAndUpdateAchievements","split","pickNextCountry","correctOrder","sort","a","b","incorrectCountry","userOrder","countriesList","key","onMouseEnter","onMouseLeave","_","getLeaderboard","arguments","undefined","leaderboard","JSON","parse","localStorage","getItem","entry","CATEGORIES","gameHistoryService","limitCount","gamesRef","collection","q","query","where","orderBy","firestoreLimit","getDocs","docs","slice","topGames","Promise","all","getTopGames","minimalCountries","addDoc","timestamp","GameOverPage","isSubmitted","setIsSubmitted","hasSaved","useRef","fetchUserProfile","current","countriesCount","saveGame","saveGameHistory","onSubmit","trim","submitScore","newEntry","now","date","toISOString","top100","setItem","stringify","err","htmlFor","maxLength","formatDate","toDate","toLocaleDateString","year","month","day","LeaderboardPage","setLeaderboard","selectedMode","setSelectedMode","loadLeaderboard","charAt","toUpperCase","AvatarSelector","avatarOptions","selectedAvatar","onSelect","onClose","avatar","ProfileHeader","formData","setFormData","showAvatarSelector","setShowAvatarSelector","isEditing","setIsEditing","handleChange","prev","AchievementCard","isUnlocked","unlockDate","AchievementsSection","achievementDefinitions","transformedAchievements","definitions","entries","categoryData","_ref2","level","transformAchievementDefinitions","_achievements$achieve","_achievements$achieve2","_achievements$achieve3","GameHistoryItem","_game$timestamp","_game$countries","game","idx","GameHistory","gameHistory","useMemo","keys","flatMap","games","self","findIndex","g","ProfilePage","setProfile","setAchievements","setGameHistory","editing","setEditing","loadProfile","userAchievements","userGameHistory","getAllTopGames","onEdit","onAvatarSelect","onAvatarSelectorToggle","onCancel","lobbyService","constructor","lobbiesRef","ref","lobbyRef","set","lastUpdated","lobbyData","get","val","currentPlayers","update","playerId","updatedPlayers","remove","subscribeToLobby","callback","onValue","snapshot","off","startedAt","endedAt","GameLobby","setLobbyId","setPlayers","isHost","setIsHost","copyStatus","setCopyStatus","searchParams","useSearchParams","currentLobbyId","currentPlayer","unsubscribeFn","setTimeout","lobbyParam","joinLobby","newLobbyId","toString","substring","createLobby","initializeLobby","leaveLobby","gameLink","window","origin","encodeURIComponent","navigator","clipboard","writeText","textArea","document","body","appendChild","select","execCommand","removeChild","_currentPlayer$curren","startGame","leaderboardService","username","gameMode","limit","FirebaseTest","testScore","setTestScore","padding","addScore","marginLeft","marginTop","App","initialize","send","hitType","page","Routes","Route","element","ReactDOM","createRoot","getElementById","render","StrictMode","HashRouter","DndProvider","backend","HTML5Backend"],"mappings":"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","file":"static/js/main.0260c792.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de73253.png\";","module.exports = __webpack_public_path__ + \"static/media/population.b123bcc2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/area.1a41ffef.jpg\";","import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getDatabase } from 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nexport const auth = getAuth(app);\n\n// Initialize Cloud Firestore and get a reference to the service\nexport const db = getFirestore(app);\n\n// Initialize Realtime Database and get a reference to the service\nexport const realtimeDb = getDatabase(app);\n\nexport default app; ","import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged \r\n} from 'firebase/auth';\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  function signup(email, password) {\r\n    return createUserWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function login(email, password) {\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function logout() {\r\n    return signOut(auth);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setCurrentUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n} ","export const avatarService = {\r\n  getAvatarOptions() {\r\n    return [\r\n      {\r\n        id: 'default',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=default',\r\n        name: 'Default'\r\n      },\r\n      {\r\n        id: 'happy',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=happy',\r\n        name: 'Happy'\r\n      },\r\n      {\r\n        id: 'cool',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=cool',\r\n        name: 'Cool'\r\n      },\r\n      {\r\n        id: 'smart',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=smart',\r\n        name: 'Smart'\r\n      },\r\n      {\r\n        id: 'friendly',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=friendly',\r\n        name: 'Friendly'\r\n      },\r\n      {\r\n        id: 'adventurous',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=adventurous',\r\n        name: 'Adventurous'\r\n      },\r\n      {\r\n        id: 'creative',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=creative',\r\n        name: 'Creative'\r\n      },\r\n      {\r\n        id: 'mysterious',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mysterious',\r\n        name: 'Mysterious'\r\n      }\r\n    ];\r\n  }\r\n}; ","import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { avatarService } from './avatarService';\n\nconst USERS_COLLECTION = 'users';\n\nexport const userProfileService = {\n  // Get user profile\n  async getUserProfile(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, USERS_COLLECTION, userId));\n      if (userDoc.exists()) {\n        return userDoc.data();\n      }\n      // If no profile exists, create a default one\n      const defaultProfile = {\n        nickname: '',\n        country: '',\n        avatarUrl: avatarService.getAvatarOptions()[0].url,\n        createdAt: new Date()\n      };\n      await this.updateUserProfile(userId, defaultProfile);\n      return defaultProfile;\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      throw error;\n    }\n  },\n\n  // Create or update user profile\n  async updateUserProfile(userId, profileData) {\n    try {\n      const userRef = doc(db, USERS_COLLECTION, userId);\n      await setDoc(userRef, {\n        ...profileData,\n        updatedAt: new Date()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n\n  // Update specific profile fields\n  async updateProfileField(userId, field, value) {\n    try {\n      const userRef = doc(db, USERS_COLLECTION, userId);\n      await updateDoc(userRef, {\n        [field]: value,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.error('Error updating profile field:', error);\n      throw error;\n    }\n  }\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { userProfileService } from '../services/userProfileService';\r\nimport { avatarService } from '../services/avatarService';\r\nimport './LoginButton.css';\r\n\r\nexport default function LoginButton() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [showLoginForm, setShowLoginForm] = useState(false);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadUserProfile = async () => {\r\n      if (currentUser) {\r\n        try {\r\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\r\n          setUserProfile(profile);\r\n        } catch (error) {\r\n          console.error('Error loading user profile:', error);\r\n        }\r\n      }\r\n    };\r\n    loadUserProfile();\r\n  }, [currentUser]);\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleSignup(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n      navigate('/');\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  if (currentUser) {\r\n    return (\r\n      <div className=\"login-button\">\r\n        <div className=\"user-profile-button\" onClick={() => navigate('/profile')}>\r\n          <img \r\n            src={userProfile?.avatarUrl || avatarService.getAvatarOptions()[0].url} \r\n            alt=\"Profile\" \r\n            className=\"header-avatar\"\r\n          />\r\n          <span className=\"user-name\">{userProfile?.nickname || currentUser.email}</span>\r\n        </div>\r\n        <button onClick={handleLogout} disabled={loading} className=\"logout-button\">\r\n          Log Out\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-button\">\r\n      {!showLoginForm ? (\r\n        <button onClick={() => setShowLoginForm(true)}>\r\n          Login / Sign Up\r\n        </button>\r\n      ) : (\r\n        <div className=\"login-form\">\r\n          <input\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder=\"Email\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n          <div className=\"login-buttons\">\r\n            <button onClick={handleLogin} disabled={loading}>\r\n              Login\r\n            </button>\r\n            <button onClick={handleSignup} disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n            <button onClick={() => setShowLoginForm(false)}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} ","// src/components/Header.js\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\nimport logo from '../assets/logo.png'; // Ensure you have a logo image in your assets folder\nimport LoginButton from './LoginButton';\n\nfunction Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-container\">\n        <Link to=\"/\" className=\"header-logo\" onClick={closeMenu}>\n          <img src={logo} alt=\"Sortly Logo\" className=\"logo-image\" />\n          <span className=\"site-name\">Sortly - The Sorting Game</span>\n        </Link>\n        <button className=\"menu-button\" onClick={toggleMenu}>\n          ☰\n        </button>\n        <nav className={`header-nav ${isMenuOpen ? 'active' : ''}`}>\n          <Link to=\"/\" className=\"nav-link\" onClick={closeMenu}>Home</Link>\n          <Link to=\"/game/population\" className=\"nav-link\" onClick={closeMenu}>Population</Link>\n          <Link to=\"/game/area\" className=\"nav-link\" onClick={closeMenu}>Area</Link>\n          <Link to=\"/leaderboard\" className=\"nav-link\" onClick={closeMenu}>Leaderboard</Link>\n          <div className=\"nav-login\">\n            <LoginButton />\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","// src/components/Footer.js\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\nimport logo from '../assets/logo.png'; // Reuse your logo\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <img src={logo} alt=\"Sortly Logo\" className=\"footer-logo\" />\r\n        <p>&copy; {new Date().getFullYear()} Sortly. All rights reserved.</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// src/pages/HomePage.js\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ReactGA from 'react-ga4'; // Import ReactGA\nimport populationImage from '../assets/population.jpg';\nimport areaImage from '../assets/area.jpg';\nimport './HomePage.css';\n\nfunction HomePage() {\n  const navigate = useNavigate();\n\n  // Define the handler functions\n  const handlePlayPopulation = () => {\n    // Track the event in Google Analytics\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Population Game',\n    });\n    // Navigate to the population game page\n    navigate('/game/population');\n  };\n\n  const handlePlayArea = () => {\n    // Track the event in Google Analytics\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Area Game',\n    });\n    // Navigate to the area game page\n    navigate('/game/area');\n  };\n\n  const handlePlayCooperation = () => {\n    ReactGA.event({\n      category: 'Game',\n      action: 'Clicked Play Cooperation Game',\n    });\n    navigate('/game/population/cooperation');\n  };\n\n  return (\n    <div className=\"homepage\">\n      {/* Section 1: Sort by Population */}\n      <div \n        className=\"section population-section\"\n        style={{\n          backgroundImage: `url(${populationImage})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat'\n        }}\n      >\n        <div className=\"overlay\">\n          <h2>Sort by Population</h2>\n          <div className=\"population-modes\">\n            <button\n              className=\"button button-primary\"\n              onClick={handlePlayPopulation}\n            >\n              Classic Mode\n            </button>\n            <button\n              className=\"button button-primary\"\n              onClick={handlePlayCooperation}\n            >\n              Cooperation Mode\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 2: Sort by Area */}\n      <div \n        className=\"section area-section\"\n        style={{\n          backgroundImage: `url(${areaImage})`,\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat'\n        }}\n      >\n        <div className=\"overlay\">\n          <h2>Sort by Area</h2>\n          <button\n            className=\"button button-primary\"\n            onClick={handlePlayArea}\n          >\n            Play Now\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","// src/components/CountryCard.js\n\nimport React, { useState } from 'react';\nimport './CountryCard.css';\n\nfunction CountryCard({ country, isClickable, highlight, mode }) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    if (isClickable) {\n      setIsFlipped(!isFlipped);\n    }\n  };\n\n  const highlightClass = highlight ? `highlighted-${highlight}` : '';\n\n  const getDetailText = () => {\n    const detailMappings = {\n      population: `Population: ${country.population.toLocaleString()}`,\n      area: `Area: ${country.area.toLocaleString()} km²`\n    };\n    return detailMappings[mode] || '';\n  };\n\n  return (\n    <div\n      className={`country-card ${isFlipped ? 'flipped' : ''} ${\n        isClickable ? 'clickable' : ''\n      } ${highlightClass}`}\n      onClick={handleClick}\n    >\n      <div className=\"card-inner\">\n        {/* Front Side */}\n        <div className={`card-face card-front ${highlightClass}`}>\n          <img\n            src={country.flagUrl}\n            alt={`Flag of ${country.name}`}\n            className=\"country-flag\"\n          />\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n          </div>\n        </div>\n        {/* Back Side */}\n        <div className={`card-face card-back ${highlightClass}`}>\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n            <p className=\"country-detail\">\n              {getDetailText()}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CountryCard;\n","// src/api/countriesApi.js\n\nexport const fetchCountries = async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      throw new Error('Invalid data format received from API');\n    }\n\n    // Filter to only include UN member states with valid data\n    const unMemberCountries = data.filter((country) => \n      country.unMember && \n      country.name?.common && \n      country.flags?.svg && \n      typeof country.population === 'number' && \n      typeof country.area === 'number'\n    );\n\n    // Map the API data to match your application's structure\n    const countries = unMemberCountries.map((country, index) => ({\n      id: index + 1,\n      name: country.name.common,\n      flagUrl: country.flags.svg,\n      population: country.population,\n      area: country.area,\n    }));\n\n    return countries;\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    throw new Error('Failed to fetch countries data. Please try again later.');\n  }\n};\n  ","import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase';\n\nconst ACHIEVEMENTS_COLLECTION = 'achievements';\n\nconst ACHIEVEMENT_DEFINITIONS = {\n  population: {\n    sorting: {\n      bronze: { id: 'population_sorting_bronze', title: 'Population Bronze Sorter', description: 'Correctly sort 3 countries by population', icon: '🥉', requirement: 3 },\n      silver: { id: 'population_sorting_silver', title: 'Population Silver Sorter', description: 'Correctly sort 7 countries by population', icon: '🥈', requirement: 7 },\n      gold: { id: 'population_sorting_gold', title: 'Population Gold Sorter', description: 'Correctly sort 12 countries by population', icon: '🥇', requirement: 12 },\n      platinum: { id: 'population_sorting_platinum', title: 'Population Platinum Sorter', description: 'Correctly sort 20 countries by population', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'population_games',\n      title: 'Population Game Master',\n      description: 'Complete 50 population sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  },\n  area: {\n    sorting: {\n      bronze: { id: 'area_sorting_bronze', title: 'Area Bronze Sorter', description: 'Correctly sort 3 countries by area', icon: '🥉', requirement: 3 },\n      silver: { id: 'area_sorting_silver', title: 'Area Silver Sorter', description: 'Correctly sort 7 countries by area', icon: '🥈', requirement: 7 },\n      gold: { id: 'area_sorting_gold', title: 'Area Gold Sorter', description: 'Correctly sort 12 countries by area', icon: '🥇', requirement: 12 },\n      platinum: { id: 'area_sorting_platinum', title: 'Area Platinum Sorter', description: 'Correctly sort 20 countries by area', icon: '👑', requirement: 20 }\n    },\n    gameCount: {\n      id: 'area_games',\n      title: 'Area Game Master',\n      description: 'Complete 50 area sorting games',\n      icon: '🎮',\n      requirement: 50\n    }\n  }\n};\n\nexport const achievementsService = {\n  // Get user achievements\n  async getUserAchievements(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId));\n      return userDoc.exists() ? userDoc.data() : null;\n    } catch (error) {\n      console.error('Error getting user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Update user achievements\n  async updateUserAchievements(userId, achievements) {\n    try {\n      await setDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId), {\n        ...achievements,\n        updatedAt: serverTimestamp()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Check and update achievements based on game results\n  async checkAndUpdateAchievements(userId, category, correctCount) {\n    try {\n      const currentAchievements = await this.getUserAchievements(userId) || {};\n      const categoryAchievements = ACHIEVEMENT_DEFINITIONS[category];\n      let updated = false;\n\n      // Check sorting achievements\n      Object.values(categoryAchievements.sorting).forEach(achievement => {\n        if (!currentAchievements[achievement.id] && correctCount >= achievement.requirement) {\n          currentAchievements[achievement.id] = {\n            unlocked: true,\n            unlockedAt: serverTimestamp()\n          };\n          updated = true;\n        }\n      });\n\n      // Check game count achievements\n      const gameCountAchievement = categoryAchievements.gameCount;\n      const currentCount = (currentAchievements[gameCountAchievement.id]?.count || 0) + 1;\n      \n      if (currentCount >= gameCountAchievement.requirement && !currentAchievements[gameCountAchievement.id]?.unlocked) {\n        currentAchievements[gameCountAchievement.id] = {\n          unlocked: true,\n          unlockedAt: serverTimestamp(),\n          count: currentCount\n        };\n        updated = true;\n      } else {\n        currentAchievements[gameCountAchievement.id] = {\n          ...currentAchievements[gameCountAchievement.id],\n          count: currentCount\n        };\n        updated = true;\n      }\n\n      if (updated) {\n        await this.updateUserAchievements(userId, currentAchievements);\n      }\n\n      return currentAchievements;\n    } catch (error) {\n      console.error('Error checking achievements:', error);\n      throw error;\n    }\n  },\n\n  // Achievement definitions\n  getAchievementDefinitions() {\n    return ACHIEVEMENT_DEFINITIONS;\n  }\n}; ","// src/pages/GamePage.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport CountryCard from '../components/CountryCard';\nimport './GamePage.css';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { fetchCountries } from '../api/countriesApi';\nimport { achievementsService } from '../services/achievementsService';\nimport { useAuth } from '../contexts/AuthContext';\n\nfunction GamePage() {\n  const { currentUser } = useAuth();\n  const [sortedCountries, setSortedCountries] = useState([]);\n  const [currentCountry, setCurrentCountry] = useState(null);\n  const [remainingCountries, setRemainingCountries] = useState([]);\n  const [score, setScore] = useState(0);\n  const [hoverIndex, setHoverIndex] = useState(null);\n  const [isCooperationMode, setIsCooperationMode] = useState(false);\n  const [playerName, setPlayerName] = useState('');\n  const [gameState, setGameState] = useState('waiting'); // waiting, playing, ended\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Helper function to get a random country from the array\n  const getRandomCountry = (countries) => {\n    const randomIndex = Math.floor(Math.random() * countries.length);\n    return countries.splice(randomIndex, 1)[0];\n  };\n\n  const startNewGame = useCallback((data) => {\n    const availableCountries = [...data];\n    \n    if (isCooperationMode) {\n      // For cooperation mode:\n      // 1. Select 10 countries to sort\n      // 2. Pick one as the starting country\n      // 3. Set up the remaining countries\n      const selectedCountries = [];\n      for (let i = 0; i < 10; i++) {\n        if (availableCountries.length === 0) break;\n        selectedCountries.push(getRandomCountry(availableCountries));\n      }\n\n      // Pick a random starting country from the selected ones\n      const startingCountry = getRandomCountry(selectedCountries);\n      \n      setSortedCountries([startingCountry]);\n      setRemainingCountries(selectedCountries);\n      setScore(1);\n      setCurrentCountry(null);\n      setGameState('playing');\n\n      // Immediately pick the next country to sort\n      const countriesCopy = [...selectedCountries];\n      const randomIndex = Math.floor(Math.random() * countriesCopy.length);\n      const nextCountry = countriesCopy.splice(randomIndex, 1)[0];\n      setCurrentCountry(nextCountry);\n      setRemainingCountries(countriesCopy);\n      return;\n    }\n\n    // For classic mode, pick a random starting country\n    const firstCountry = getRandomCountry(availableCountries);\n    const nextCountry = getRandomCountry(availableCountries);\n\n    setSortedCountries([firstCountry]);\n    setRemainingCountries(availableCountries);\n    setScore(1);\n    setCurrentCountry(nextCountry);\n    setGameState('playing');\n  }, [isCooperationMode]);\n\n  useEffect(() => {\n    const initializeGame = async () => {\n      const path = location.pathname;\n      setIsCooperationMode(path.includes('cooperation'));\n\n      if (isCooperationMode) {\n        const { players, lobbyId } = location.state || {};\n        if (!players || !lobbyId) {\n          navigate('/game/population/cooperation');\n          return;\n        }\n\n        // Set player name\n        const player = players.find(p => p.id === 'player1') ? 'player1' : 'player2';\n        setPlayerName(players.find(p => p.id === player)?.name || player);\n      }\n\n      const data = await fetchCountries();\n      const validCountries = data.filter(\n        (country) => country.population && country.area && country.flagUrl\n      );\n      startNewGame(validCountries);\n    };\n\n    initializeGame();\n  }, [startNewGame, location, navigate, isCooperationMode]);\n\n  // Determine the comparison property based on the game mode\n  const compareProperty = location.pathname.includes('area') ? 'area' : 'population';\n\n  const pickNextCountry = async () => {\n    if (remainingCountries.length === 0) {\n      console.log('Game completed successfully!');\n      console.log('Final score:', score);\n      \n      if (currentUser && !isCooperationMode) {\n        try {\n          const updatedAchievements = await achievementsService.checkAndUpdateAchievements(\n            currentUser.uid,\n            location.pathname.split('/')[2],\n            score\n          );\n          console.log('Updated achievements:', updatedAchievements);\n        } catch (error) {\n          console.error('Error updating achievements:', error);\n        }\n      }\n\n      navigate('/gameover', {\n        state: { score, message: 'Congratulations! You sorted all countries correctly.' },\n      });\n      return;\n    }\n\n    const countriesCopy = [...remainingCountries];\n    const randomIndex = Math.floor(Math.random() * countriesCopy.length);\n    const nextCountry = countriesCopy.splice(randomIndex, 1)[0];\n\n    setCurrentCountry(nextCountry);\n    setRemainingCountries(countriesCopy);\n  };\n\n  const handleInsert = async (index) => {\n    const newSortedCountries = [...sortedCountries];\n    newSortedCountries.splice(index, 0, currentCountry);\n\n    if (isCorrectOrder(newSortedCountries)) {\n      setSortedCountries(newSortedCountries);\n      setScore((prevScore) => prevScore + 1);\n      setCurrentCountry(null);\n      pickNextCountry();\n    } else {\n      const allCountries = [...sortedCountries, currentCountry];\n      const correctOrder = [...allCountries].sort((a, b) => a[compareProperty] - b[compareProperty]);\n\n      console.log('Game ended with incorrect placement');\n      console.log('Final score:', score);\n\n      if (currentUser && !isCooperationMode) {\n        try {\n          const updatedAchievements = await achievementsService.checkAndUpdateAchievements(\n            currentUser.uid,\n            location.pathname.split('/')[2],\n            score\n          );\n          console.log('Updated achievements:', updatedAchievements);\n        } catch (error) {\n          console.error('Error updating achievements:', error);\n        }\n      }\n\n      navigate('/gameover', {\n        state: {\n          score,\n          message: isCooperationMode ? 'Game Over! One of the players made a mistake.' : 'Incorrect placement!',\n          incorrectCountry: currentCountry,\n          userOrder: newSortedCountries,\n          correctOrder: correctOrder,\n        },\n      });\n    }\n  };\n\n  const isCorrectOrder = (countriesList) => {\n    for (let i = 0; i < countriesList.length - 1; i++) {\n      if (countriesList[i][compareProperty] > countriesList[i + 1][compareProperty]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  if (gameState === 'waiting') {\n    return <div className=\"game-page\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"game-page\">\n      <h2>\n        {isCooperationMode ? 'Cooperation Mode' : \n         `Sort Countries by ${compareProperty === 'area' ? 'Area' : 'Population'} (Ascending)`}\n      </h2>\n      {isCooperationMode && (\n        <p>Current Player: {playerName}</p>\n      )}\n      <p>Score: {score - 1}</p>\n      <div className=\"sorted-countries-container\">\n        {currentCountry && (\n          <div className=\"instructions\">\n            <p>\n              Where does <strong>{currentCountry.name}</strong> fit among the sorted countries?\n            </p>\n          </div>\n        )}\n        <div className=\"sorted-countries\">\n          {sortedCountries.map((country, index) => (\n            <CountryCard\n              key={`country-${country.id}`}\n              country={country}\n              isClickable={true}\n              mode={compareProperty}\n              highlight={hoverIndex === index ? 'hover' : ''}\n            />\n          ))}\n        </div>\n\n        {currentCountry && (\n          <div className=\"insert-buttons\">\n            <button\n              className=\"insert-button lower-button\"\n              onClick={() => handleInsert(0)}\n              onMouseEnter={() => setHoverIndex(0)}\n              onMouseLeave={() => setHoverIndex(null)}\n            >\n              ↓\n            </button>\n            {sortedCountries.map((_, index) => (\n              <button\n                key={`insert-${index + 1}`}\n                className={`insert-button ${index === sortedCountries.length - 1 ? 'higher-button' : 'here-button'}`}\n                onClick={() => handleInsert(index + 1)}\n                onMouseEnter={() => setHoverIndex(index + 1)}\n                onMouseLeave={() => setHoverIndex(null)}\n              >\n                {index === sortedCountries.length - 1 ? '↑' : index + 1}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n      {currentCountry && (\n        <div className=\"current-country\">\n          <h3>Current Country:</h3>\n          <CountryCard country={currentCountry} isClickable={false} mode={compareProperty} />\n        </div>\n      )}\n      {isCooperationMode && remainingCountries.length > 0 && (\n        <div className=\"remaining-countries\">\n          <h3>Remaining Countries to Sort:</h3>\n          <div className=\"remaining-countries-grid\">\n            {remainingCountries.map((country) => (\n              <CountryCard\n                key={`remaining-${country.id}`}\n                country={country}\n                isClickable={false}\n                mode={compareProperty}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GamePage;\n","// src/api/leaderboardApi.js\r\n\r\n// For now, we'll use localStorage to store leaderboard data\r\n// In a real application, this would be replaced with actual API calls to a backend\r\n\r\nconst LEADERBOARD_KEY = 'sortly_leaderboard';\r\n\r\nexport const submitScore = (playerName, score, mode) => {\r\n  const leaderboard = getLeaderboard();\r\n  const newEntry = {\r\n    id: Date.now(),\r\n    playerName,\r\n    score,\r\n    mode,\r\n    date: new Date().toISOString(),\r\n  };\r\n  \r\n  leaderboard.push(newEntry);\r\n  // Sort by score (descending) and keep only top 100 entries\r\n  leaderboard.sort((a, b) => b.score - a.score);\r\n  const top100 = leaderboard.slice(0, 100);\r\n  \r\n  localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(top100));\r\n  return newEntry;\r\n};\r\n\r\nexport const getLeaderboard = (mode = null) => {\r\n  const leaderboard = JSON.parse(localStorage.getItem(LEADERBOARD_KEY) || '[]');\r\n  if (mode) {\r\n    return leaderboard.filter(entry => entry.mode === mode);\r\n  }\r\n  return leaderboard;\r\n};\r\n\r\nexport const getTopScores = (mode = null, limit = 10) => {\r\n  const leaderboard = getLeaderboard(mode);\r\n  return leaderboard.slice(0, limit);\r\n}; ","import { db } from '../firebase';\nimport { collection, query, where, orderBy, limit as firestoreLimit, getDocs, addDoc, serverTimestamp } from 'firebase/firestore';\n\nconst GAME_HISTORY_COLLECTION = 'gameHistory';\nconst CATEGORIES = ['population', 'area'];\n\nexport const gameHistoryService = {\n  async getTopGames(userId, category, limitCount = 5) {\n    try {\n      const gamesRef = collection(db, GAME_HISTORY_COLLECTION);\n      const q = query(\n        gamesRef,\n        where('userId', '==', userId),\n        where('category', '==', category),\n        orderBy('score', 'desc'),\n        firestoreLimit(limitCount)\n      );\n\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      // If the index is not ready, fall back to fetching all games and sorting in memory\n      const q = query(\n        collection(db, GAME_HISTORY_COLLECTION),\n        where('userId', '==', userId),\n        where('category', '==', category)\n      );\n\n      const querySnapshot = await getDocs(q);\n      const games = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      return games.sort((a, b) => b.score - a.score).slice(0, limitCount);\n    }\n  },\n\n  async getAllTopGames(userId) {\n    try {\n      const topGames = {};\n      await Promise.all(\n        CATEGORIES.map(async category => {\n          topGames[category] = await this.getTopGames(userId, category);\n        })\n      );\n      return topGames;\n    } catch (error) {\n      console.error('Error fetching all top games:', error);\n      return {};\n    }\n  },\n\n  async saveGame(userId, category, score, countries) {\n    try {\n      const minimalCountries = countries.map(({ id, name, flagUrl }) => ({\n        id,\n        name,\n        flagUrl\n      }));\n\n      await addDoc(collection(db, GAME_HISTORY_COLLECTION), {\n        userId,\n        category,\n        score,\n        countries: minimalCountries,\n        timestamp: serverTimestamp()\n      });\n    } catch (error) {\n      console.error('Error saving game history:', error);\n      throw error;\n    }\n  }\n}; ","// src/pages/GameOverPage.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport CountryCard from '../components/CountryCard';\nimport { submitScore } from '../api/leaderboardApi';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport { userProfileService } from '../services/userProfileService';\nimport { useAuth } from '../contexts/AuthContext';\nimport './GameOverPage.css';\nimport '../components/Buttons.css';\n\nfunction GameOverPage() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  const { score, message, incorrectCountry, userOrder, correctOrder, mode } = location.state || {};\n  const [playerName, setPlayerName] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState('');\n  const hasSaved = useRef(false);\n\n  // Fetch user profile and set nickname if logged in\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (currentUser) {\n        try {\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\n          if (profile?.nickname) {\n            setPlayerName(profile.nickname);\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n    fetchUserProfile();\n  }, [currentUser]);\n\n  useEffect(() => {\n    const saveGameHistory = async () => {\n      if (currentUser && userOrder && !hasSaved.current) {\n        try {\n          console.log('Attempting to save game history:', {\n            userId: currentUser.uid,\n            mode,\n            score: score - 1,\n            countriesCount: userOrder.length\n          });\n          \n          await gameHistoryService.saveGame(\n            currentUser.uid,\n            mode,\n            score - 1,\n            userOrder.map(country => ({\n              id: country.id,\n              name: country.name,\n              flagUrl: country.flagUrl\n            }))\n          );\n          hasSaved.current = true;\n          console.log('Game history saved successfully');\n        } catch (error) {\n          console.error('Error saving game history:', error);\n        }\n      }\n    };\n\n    saveGameHistory();\n  }, [currentUser, userOrder, mode, score]); // Include all dependencies\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!playerName.trim()) {\n      setError('Please enter your name');\n      return;\n    }\n    \n    try {\n      submitScore(playerName, score - 1, mode);\n      setIsSubmitted(true);\n    } catch (err) {\n      setError('Failed to submit score. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"game-over-page\">\n      <h2>Game Over</h2>\n      <p>{message}</p>\n      <p>Your final score: {score - 1}</p>\n\n      {!isSubmitted ? (\n        <form onSubmit={handleSubmit} className=\"score-submission\">\n          <div className=\"input-group\">\n            <label htmlFor=\"playerName\">Enter your name:</label>\n            <input\n              type=\"text\"\n              id=\"playerName\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              placeholder=\"Your name\"\n              maxLength={20}\n            />\n          </div>\n          {error && <p className=\"error\">{error}</p>}\n          <button type=\"submit\" className=\"button button-primary\">\n            Submit Score\n          </button>\n        </form>\n      ) : (\n        <div className=\"submission-success\">\n          <p>Score submitted successfully!</p>\n        </div>\n      )}\n\n      {userOrder && incorrectCountry && (\n        <div className=\"user-order\">\n          <h3>Your order was:</h3>\n          <div className=\"country-list\">\n            {userOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={true}\n                highlight={country.id === incorrectCountry.id ? 'incorrect' : ''}\n                mode={mode}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      {correctOrder && incorrectCountry && (\n        <div className=\"correct-order\">\n          <h3>The correct order was:</h3>\n          <div className=\"country-list\">\n            {correctOrder.map((country) => (\n              <CountryCard\n                key={country.id}\n                country={country}\n                isClickable={true}\n                highlight={country.id === incorrectCountry.id ? 'correct' : ''}\n                mode={mode}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"game-over-buttons\">\n        <button className=\"button button-primary\" onClick={() => navigate(`/game/${mode}`)}>\n          Play Again\n        </button>\n        <button className=\"button button-secondary\" onClick={() => navigate('/')}>\n          Go to Home Page\n        </button>\n        <button className=\"button button-secondary\" onClick={() => navigate('/leaderboard')}>\n          View Leaderboard\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameOverPage;\n","export const formatDate = (timestamp) => {\r\n  if (!timestamp?.toDate) return null;\r\n  return timestamp.toDate().toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  });\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { getLeaderboard } from '../api/leaderboardApi';\r\nimport { formatDate } from '../utils/dateUtils';\r\nimport './LeaderboardPage.css';\r\n\r\nfunction LeaderboardPage() {\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadLeaderboard = () => {\r\n      const data = getLeaderboard(selectedMode);\r\n      setLeaderboard(data);\r\n    };\r\n    loadLeaderboard();\r\n  }, [selectedMode]);\r\n\r\n  return (\r\n    <div className=\"leaderboard-page\">\r\n      <h2>Leaderboard</h2>\r\n      \r\n      <div className=\"mode-filters\">\r\n        <button \r\n          className={`button ${!selectedMode ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode(null)}\r\n        >\r\n          All Modes\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'population' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('population')}\r\n        >\r\n          Population\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'area' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('area')}\r\n        >\r\n          Area\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"leaderboard-table\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Rank</th>\r\n              <th>Player</th>\r\n              <th>Score</th>\r\n              <th>Mode</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {leaderboard.map((entry, index) => (\r\n              <tr key={entry.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{entry.playerName}</td>\r\n                <td>{entry.score}</td>\r\n                <td>{entry.mode.charAt(0).toUpperCase() + entry.mode.slice(1)}</td>\r\n                <td>{formatDate(entry.date)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeaderboardPage; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AvatarSelector.css';\r\n\r\nconst AvatarSelector = ({ avatarOptions, selectedAvatar, onSelect, onClose }) => (\r\n  <div className=\"avatar-selector\">\r\n    <div className=\"avatar-grid\">\r\n      {avatarOptions.map(avatar => (\r\n        <div \r\n          key={avatar.id} \r\n          className={`avatar-option ${selectedAvatar === avatar.url ? 'selected' : ''}`}\r\n          onClick={() => onSelect(avatar.url)}\r\n        >\r\n          <img src={avatar.url} alt={avatar.name} />\r\n          <span>{avatar.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAvatarSelector.propTypes = {\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  selectedAvatar: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AvatarSelector; ","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AvatarSelector from './AvatarSelector';\r\nimport './ProfileHeader.css';\r\n\r\nconst ProfileHeader = ({ \r\n  profile, \r\n  currentUser, \r\n  avatarOptions,\r\n  onSubmit\r\n}) => {\r\n  const [formData, setFormData] = useState({\r\n    nickname: profile?.nickname || '',\r\n    country: profile?.country || '',\r\n    avatarUrl: profile?.avatarUrl || avatarOptions[0].url\r\n  });\r\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleAvatarSelect = (avatarUrl) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      avatarUrl\r\n    }));\r\n    setShowAvatarSelector(false);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await onSubmit(formData);\r\n      setIsEditing(false);\r\n    } catch (error) {\r\n      console.error('Error saving profile:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-header\">\r\n      <div className=\"avatar-container\">\r\n        <img \r\n          src={formData.avatarUrl} \r\n          alt=\"Profile\" \r\n          className=\"profile-avatar\"\r\n          onClick={() => setShowAvatarSelector(true)}\r\n        />\r\n        {showAvatarSelector && (\r\n          <AvatarSelector\r\n            avatarOptions={avatarOptions}\r\n            selectedAvatar={formData.avatarUrl}\r\n            onSelect={handleAvatarSelect}\r\n            onClose={() => setShowAvatarSelector(false)}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"profile-info\">\r\n        <form onSubmit={handleSubmit} className=\"profile-form\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"nickname\"\r\n              value={formData.nickname}\r\n              onChange={handleChange}\r\n              placeholder=\"Set your nickname\"\r\n              className=\"inline-input\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"country\"\r\n              value={formData.country}\r\n              onChange={handleChange}\r\n              placeholder=\"Set your country\"\r\n              className=\"inline-input\"\r\n            />\r\n          </div>\r\n          <div className=\"email-display\">{currentUser.email}</div>\r\n          {isEditing && (\r\n            <button type=\"submit\" className=\"save-button\">\r\n              Save Changes\r\n            </button>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProfileHeader.propTypes = {\r\n  profile: PropTypes.shape({\r\n    nickname: PropTypes.string,\r\n    country: PropTypes.string,\r\n    avatarUrl: PropTypes.string\r\n  }),\r\n  currentUser: PropTypes.shape({\r\n    email: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  avatarOptions: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ProfileHeader; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './AchievementCard.css';\r\n\r\nconst AchievementCard = ({ achievement, isUnlocked, unlockDate }) => (\r\n  <div className={`achievement-card ${isUnlocked ? 'unlocked' : 'locked'}`}>\r\n    <div className=\"achievement-content\">\r\n      <div className=\"achievement-icon\">{achievement.icon}</div>\r\n      <div className=\"achievement-info\">\r\n        <h3>{achievement.title}</h3>\r\n        <p>{achievement.description}</p>\r\n        {isUnlocked && unlockDate && (\r\n          <div className=\"achievement-date\">\r\n            Unlocked: {formatDate(unlockDate)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n    <div className=\"achievement-status\">\r\n      {isUnlocked ? '✓' : '🔒'}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAchievementCard.propTypes = {\r\n  achievement: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  isUnlocked: PropTypes.bool.isRequired,\r\n  unlockDate: PropTypes.object\r\n};\r\n\r\nexport default AchievementCard; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AchievementCard from './AchievementCard';\r\nimport { transformAchievementDefinitions } from '../../utils/achievementUtils';\r\nimport './AchievementsSection.css';\r\n\r\nconst AchievementsSection = ({ achievementDefinitions, achievements }) => {\r\n  const transformedAchievements = transformAchievementDefinitions(achievementDefinitions);\r\n\r\n  return (\r\n    <div className=\"achievements-section\">\r\n      <h2>Achievements</h2>\r\n      <div className=\"achievements-grid\">\r\n        {transformedAchievements.map(achievement => (\r\n          <AchievementCard\r\n            key={achievement.id}\r\n            achievement={achievement}\r\n            isUnlocked={achievements?.[achievement.id]?.unlocked ?? false}\r\n            unlockDate={achievements?.[achievement.id]?.unlockedAt}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nAchievementsSection.propTypes = {\r\n  achievementDefinitions: PropTypes.object.isRequired,\r\n  achievements: PropTypes.objectOf(PropTypes.shape({\r\n    unlocked: PropTypes.bool,\r\n    unlockedAt: PropTypes.object\r\n  }))\r\n};\r\n\r\nexport default AchievementsSection; ","export const transformAchievementDefinitions = (definitions) => {\r\n  const achievements = [];\r\n  \r\n  // Process each category (population, area)\r\n  Object.entries(definitions).forEach(([category, categoryData]) => {\r\n    // Process sorting achievements\r\n    Object.entries(categoryData.sorting).forEach(([level, achievement]) => {\r\n      achievements.push({\r\n        ...achievement,\r\n        category,\r\n        type: 'sorting'\r\n      });\r\n    });\r\n    \r\n    // Process game count achievement\r\n    if (categoryData.gameCount) {\r\n      achievements.push({\r\n        ...categoryData.gameCount,\r\n        category,\r\n        type: 'gameCount'\r\n      });\r\n    }\r\n  });\r\n  \r\n  return achievements;\r\n}; ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDate } from '../../utils/dateUtils';\r\nimport './GameHistoryItem.css';\r\n\r\nconst GameHistoryItem = ({ game, index }) => (\r\n  <div className=\"game-history-item\">\r\n    <div className=\"game-rank\">#{index + 1}</div>\r\n    <div className=\"game-score\">Score: {game.score}</div>\r\n    <div className=\"game-mode\">{game.category.charAt(0).toUpperCase() + game.category.slice(1)} Mode</div>\r\n    <div className=\"game-date\">\r\n      {game.timestamp?.toDate ? formatDate(game.timestamp) : 'Date unavailable'}\r\n    </div>\r\n    <div className=\"game-countries\">\r\n      {game.countries?.map((country, idx) => (\r\n        <div key={idx} className=\"country-item\">\r\n          <img src={country.flagUrl} alt={country.name} className=\"country-flag\" />\r\n          <span>{country.name}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nGameHistoryItem.propTypes = {\r\n  game: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    category: PropTypes.string.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  }).isRequired,\r\n  index: PropTypes.number.isRequired\r\n};\r\n\r\nexport default GameHistoryItem; ","import React, { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GameHistoryItem from './GameHistoryItem';\r\nimport './GameHistory.css';\r\n\r\nconst GameHistory = ({ gameHistory }) => {\r\n  const topGames = useMemo(() => {\r\n    if (!gameHistory || Object.keys(gameHistory).length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const entries = Object.entries(gameHistory);\r\n    const flattenedGames = entries.flatMap(([category, games]) => \r\n      games.map(game => ({ ...game, category }))\r\n    );\r\n\r\n    const uniqueGames = flattenedGames.filter((game, index, self) => \r\n      index === self.findIndex((g) => g.id === game.id)\r\n    );\r\n\r\n    return uniqueGames\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 5);\r\n  }, [gameHistory]);\r\n\r\n  if (!gameHistory) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>Loading game history...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(gameHistory).length === 0) {\r\n    return (\r\n      <div className=\"game-history-section\">\r\n        <h2>Best 5 Games</h2>\r\n        <p>No games played yet. Start playing to see your best games here!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-history-section\">\r\n      <h2>Best 5 Games</h2>\r\n      <div className=\"game-history-list\">\r\n        {topGames.map((game, index) => (\r\n          <GameHistoryItem key={game.id} game={game} index={index} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameHistory.propTypes = {\r\n  gameHistory: PropTypes.objectOf(PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    timestamp: PropTypes.object,\r\n    countries: PropTypes.arrayOf(PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      flagUrl: PropTypes.string.isRequired\r\n    }))\r\n  })))\r\n};\r\n\r\nexport default GameHistory; ","import React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { userProfileService } from '../services/userProfileService';\nimport { achievementsService } from '../services/achievementsService';\nimport { avatarService } from '../services/avatarService';\nimport { gameHistoryService } from '../services/gameHistoryService';\nimport ProfileHeader from '../components/profile/ProfileHeader';\nimport AchievementsSection from '../components/profile/AchievementsSection';\nimport GameHistory from '../components/profile/GameHistory';\nimport './ProfilePage.css';\n\nconst ProfilePage = () => {\n  const { currentUser } = useAuth();\n  const navigate = useNavigate();\n  const [profile, setProfile] = useState(null);\n  const [achievements, setAchievements] = useState(null);\n  const [gameHistory, setGameHistory] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [editing, setEditing] = useState(false);\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\n  const [formData, setFormData] = useState({\n    nickname: '',\n    country: '',\n    avatarUrl: ''\n  });\n\n  const avatarOptions = avatarService.getAvatarOptions();\n  const achievementDefinitions = achievementsService.getAchievementDefinitions();\n  const userId = currentUser?.uid;\n\n  const loadProfile = useCallback(async () => {\n    if (!userId) return;\n    \n    try {\n      const [userProfile, userAchievements, userGameHistory] = await Promise.all([\n        userProfileService.getUserProfile(userId),\n        achievementsService.getUserAchievements(userId),\n        gameHistoryService.getAllTopGames(userId)\n      ]);\n\n      if (userProfile) {\n        setProfile(userProfile);\n        setFormData({\n          nickname: userProfile.nickname || '',\n          country: userProfile.country || '',\n          avatarUrl: userProfile.avatarUrl || avatarOptions[0].url\n        });\n      }\n\n      setAchievements(userAchievements);\n      setGameHistory(userGameHistory);\n    } catch (error) {\n      setError('Failed to load profile: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userId, avatarOptions]);\n\n  useEffect(() => {\n    if (currentUser) {\n      loadProfile();\n    }\n  }, [currentUser, loadProfile]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleAvatarSelect = (avatarUrl) => {\n    setFormData(prev => ({ ...prev, avatarUrl }));\n    setShowAvatarSelector(false);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      setError('');\n      await userProfileService.updateUserProfile(currentUser.uid, formData);\n      setProfile(prev => ({ ...prev, ...formData }));\n      setEditing(false);\n    } catch (error) {\n      setError('Failed to update profile: ' + error.message);\n    }\n  };\n\n  if (!currentUser) {\n    navigate('/');\n    return null;\n  }\n\n  if (loading) {\n    return <div className=\"profile-page\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"profile-page\">\n      <div className=\"profile-content\">\n        <ProfileHeader\n          profile={profile}\n          currentUser={currentUser}\n          editing={editing}\n          formData={formData}\n          avatarOptions={avatarOptions}\n          showAvatarSelector={showAvatarSelector}\n          onEdit={() => setEditing(true)}\n          onAvatarSelect={handleAvatarSelect}\n          onAvatarSelectorToggle={() => setShowAvatarSelector(!showAvatarSelector)}\n          onSubmit={handleSubmit}\n          onChange={handleInputChange}\n          onCancel={() => setEditing(false)}\n        />\n\n        {error && <div className=\"error-message\">{error}</div>}\n\n        <AchievementsSection\n          achievementDefinitions={achievementDefinitions}\n          achievements={achievements}\n        />\n\n        <GameHistory gameHistory={gameHistory} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage; ","import { realtimeDb } from '../firebase';\nimport { ref, set, update, remove, get, onValue, off } from 'firebase/database';\n\nconst LOBBIES_PATH = 'lobbies';\n\nclass LobbyService {\n  constructor() {\n    this.lobbiesRef = ref(realtimeDb, LOBBIES_PATH);\n  }\n\n  // Create a new lobby\n  async createLobby(lobbyId, player) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await set(lobbyRef, {\n      players: [player],\n      status: 'waiting',\n      createdAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n    return lobbyId;\n  }\n\n  // Join an existing lobby\n  async joinLobby(lobbyId, player) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const snapshot = await get(lobbyRef);\n    const lobbyData = snapshot.val();\n    \n    if (lobbyData) {\n      const currentPlayers = lobbyData.players || [];\n      await update(lobbyRef, {\n        players: [...currentPlayers, player],\n        lastUpdated: Date.now()\n      });\n    } else {\n      throw new Error('Lobby not found');\n    }\n  }\n\n  // Leave a lobby\n  async leaveLobby(lobbyId, playerId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    const snapshot = await get(lobbyRef);\n    const lobbyData = snapshot.val();\n    \n    if (lobbyData) {\n      const currentPlayers = lobbyData.players || [];\n      const updatedPlayers = currentPlayers.filter(p => p.id !== playerId);\n      \n      if (updatedPlayers.length === 0) {\n        // If no players left, delete the lobby\n        await remove(lobbyRef);\n      } else {\n        // Otherwise update the players list\n        await update(lobbyRef, {\n          players: updatedPlayers,\n          lastUpdated: Date.now()\n        });\n      }\n    }\n  }\n\n  // Subscribe to lobby changes\n  subscribeToLobby(lobbyId, callback) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    onValue(lobbyRef, (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        callback(data);\n      } else {\n        callback(null);\n      }\n    });\n\n    // Return unsubscribe function\n    return () => off(lobbyRef);\n  }\n\n  // Start the game\n  async startGame(lobbyId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await update(lobbyRef, {\n      status: 'playing',\n      startedAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n  }\n\n  // End the game\n  async endGame(lobbyId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await update(lobbyRef, {\n      status: 'completed',\n      endedAt: Date.now(),\n      lastUpdated: Date.now()\n    });\n  }\n\n  // Clean up lobby\n  async cleanupLobby(lobbyId) {\n    const lobbyRef = ref(realtimeDb, `${LOBBIES_PATH}/${lobbyId}`);\n    await remove(lobbyRef);\n  }\n}\n\nexport const lobbyService = new LobbyService(); ","import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { userProfileService } from '../services/userProfileService';\nimport { lobbyService } from '../services/lobbyService';\nimport './GameLobby.css';\n\nfunction GameLobby() {\n  const { currentUser } = useAuth();\n  const [lobbyId, setLobbyId] = useState('');\n  const [players, setPlayers] = useState([]);\n  const [isHost, setIsHost] = useState(false);\n  const [error, setError] = useState('');\n  const [copyStatus, setCopyStatus] = useState('');\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const currentLobbyId = useRef('');\n  const currentPlayer = useRef(null);\n\n  useEffect(() => {\n    let unsubscribeFn = null;\n\n    const initializeLobby = async () => {\n      try {\n        if (!currentUser) {\n          setError('Please log in to join or create a lobby');\n          setTimeout(() => navigate('/'), 2000);\n          return;\n        }\n\n        // Get current user's nickname if logged in\n        let playerName = '';\n        try {\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\n          if (profile?.nickname) {\n            playerName = profile.nickname;\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n\n        // Check for lobby ID in URL parameters\n        const lobbyParam = searchParams.get('lobby');\n        \n        if (lobbyParam) {\n          // Join existing lobby\n          currentLobbyId.current = lobbyParam;\n          setLobbyId(lobbyParam);\n          setIsHost(false);\n          \n          // Set default name if no nickname\n          if (!playerName) {\n            playerName = 'Player 2';\n          }\n          \n          // Use actual user ID instead of hardcoded value\n          currentPlayer.current = { \n            id: currentUser.uid, \n            name: playerName,\n            email: currentUser.email \n          };\n\n          try {\n            await lobbyService.joinLobby(lobbyParam, currentPlayer.current);\n            // Rely on subscription for player list\n          } catch (error) {\n            console.error('Error joining lobby:', error);\n            setError(error.message || 'Failed to join lobby');\n            setTimeout(() => navigate('/'), 2000);\n            return; // Stop execution if join fails\n          }\n        } else { // This 'else' now correctly corresponds to 'if (lobbyParam)'\n          // Create new lobby\n          const newLobbyId = Math.random().toString(36).substring(2, 8).toUpperCase();\n          currentLobbyId.current = newLobbyId;\n          setLobbyId(newLobbyId);\n          setIsHost(true);\n          \n          // Set default name if no nickname\n          if (!playerName) {\n            playerName = 'Player 1';\n          }\n          \n          // Use actual user ID instead of hardcoded value\n          currentPlayer.current = { \n            id: currentUser.uid, \n            name: playerName,\n            email: currentUser.email \n          };\n\n          try {\n            await lobbyService.createLobby(newLobbyId, currentPlayer.current);\n            // Rely on subscription for player list\n          } catch (error) {\n            console.error('Error creating lobby:', error);\n            setError(error.message || 'Failed to create lobby');\n            setTimeout(() => navigate('/'), 2000);\n            return; // Stop execution if create fails\n          }\n        } // End of if/else for join/create\n\n        // Subscribe to lobby changes (this should now use the correct lobbyId)\n        unsubscribeFn = lobbyService.subscribeToLobby(currentLobbyId.current, (lobbyData) => {\n          if (lobbyData) {\n            // Update players list with all players from the lobby\n            const updatedPlayers = lobbyData.players || [];\n            setPlayers(updatedPlayers);\n            \n            if (lobbyData.status === 'playing') {\n              navigate('/game/population/cooperation/play', { \n                state: { lobbyId: currentLobbyId.current, players: updatedPlayers } \n              });\n            }\n          } else {\n            setError('Lobby not found or has been closed');\n            setTimeout(() => navigate('/'), 2000);\n          }\n        });\n      } catch (error) {\n        console.error('Error initializing lobby:', error);\n        setError('Failed to initialize lobby');\n      }\n    };\n\n    initializeLobby();\n\n    // Cleanup subscription when component unmounts\n    return () => {\n      if (unsubscribeFn) {\n        unsubscribeFn();\n      }\n      if (currentLobbyId.current && currentPlayer.current) {\n        lobbyService.leaveLobby(currentLobbyId.current, currentPlayer.current.id);\n      }\n    };\n  }, [searchParams, currentUser, navigate]);\n\n  const copyLink = async () => {\n    const baseUrl = window.location.origin;\n    const gameLink = `${baseUrl}/#/game/population/cooperation?lobby=${encodeURIComponent(currentLobbyId.current)}`;\n    \n    try {\n      await navigator.clipboard.writeText(gameLink);\n      setCopyStatus('Copied!');\n      setTimeout(() => {\n        setCopyStatus('');\n      }, 2000);\n    } catch (err) {\n      const textArea = document.createElement('textarea');\n      textArea.value = gameLink;\n      document.body.appendChild(textArea);\n      textArea.select();\n      try {\n        document.execCommand('copy');\n        setCopyStatus('Copied!');\n        setTimeout(() => {\n          setCopyStatus('');\n        }, 2000);\n      } catch (err) {\n        setCopyStatus('Failed to copy');\n        console.error('Failed to copy text: ', err);\n      }\n      document.body.removeChild(textArea);\n    }\n  };\n\n  const startGame = async () => {\n    if (players.length < 2) {\n      setError('Waiting for another player to join...');\n      return;\n    }\n    try {\n      await lobbyService.startGame(currentLobbyId.current);\n    } catch (error) {\n      console.error('Error starting game:', error);\n      setError('Failed to start game');\n    }\n  };\n\n  return (\n    <div className=\"game-lobby\">\n      <h2>Game Lobby</h2>\n      <div className=\"lobby-info\">\n        <p>Lobby ID: <strong>{lobbyId}</strong></p>\n        {isHost && (\n          <button \n            className={`button button-secondary copy-button ${copyStatus ? 'copied' : ''}`}\n            onClick={copyLink}\n          >\n            {copyStatus || 'Copy Invite Link'}\n          </button>\n        )}\n      </div>\n\n      <div className=\"players-list\">\n        <h3>Players in Lobby:</h3>\n        <ul>\n          {players.map((player) => (\n            <li key={player.id} className={player.id === currentPlayer.current?.id ? 'current-player' : ''}>\n              {player.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {error && <p className=\"error\">{error}</p>}\n\n      <div className=\"lobby-actions\">\n        {isHost && (\n          <button className=\"button button-primary\" onClick={startGame}>\n            Start Game\n          </button>\n        )}\n        <button \n          className=\"button button-secondary\" \n          onClick={() => navigate('/')}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameLobby; ","import { \r\n  collection, \r\n  addDoc, \r\n  query, \r\n  orderBy, \r\n  getDocs,\r\n  where,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst LEADERBOARD_COLLECTION = 'scores';\r\n\r\nexport const leaderboardService = {\r\n  // Add a new score\r\n  async addScore(userId, username, score, gameMode) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, LEADERBOARD_COLLECTION), {\r\n        userId,\r\n        username,\r\n        score,\r\n        gameMode,\r\n        timestamp: serverTimestamp()\r\n      });\r\n      return docRef.id;\r\n    } catch (error) {\r\n      console.error('Error adding score:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get global leaderboard\r\n  async getGlobalLeaderboard(limit = 10) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting leaderboard:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user's best scores\r\n  async getUserBestScores(userId, limit = 5) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        where('userId', '==', userId),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting user scores:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; ","import React, { useState } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { leaderboardService } from '../services/leaderboardService';\r\n\r\nexport function FirebaseTest() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [testScore, setTestScore] = useState(null);\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function addTestScore() {\r\n    if (!currentUser) return;\r\n    try {\r\n      await leaderboardService.addScore(\r\n        currentUser.uid,\r\n        currentUser.email,\r\n        100,\r\n        'test'\r\n      );\r\n      setTestScore('Score added successfully!');\r\n    } catch (error) {\r\n      setTestScore('Failed to add score: ' + error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Firebase Test</h2>\r\n      \r\n      {currentUser ? (\r\n        <div>\r\n          <p>Logged in as: {currentUser.email}</p>\r\n          <button onClick={handleLogout} disabled={loading}>\r\n            Log Out\r\n          </button>\r\n          <button onClick={addTestScore} style={{ marginLeft: '10px' }}>\r\n            Add Test Score\r\n          </button>\r\n          {testScore && <p>{testScore}</p>}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"Email\"\r\n              required\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n            <button type=\"submit\" disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n          </form>\r\n          <form onSubmit={handleLogin} style={{ marginTop: '10px' }}>\r\n            <button type=\"submit\" disabled={loading}>\r\n              Log In\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      \r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n} ","// src/App.js\n\nimport React, { useEffect } from 'react';\nimport { useLocation, Routes, Route } from 'react-router-dom';\nimport ReactGA from 'react-ga4';\nimport Header from './components/Header';\nimport Footer from './components/Footer'; \nimport HomePage from './pages/HomePage';\nimport GamePage from './pages/GamePage';\nimport GameOverPage from './pages/GameOverPage';\nimport LeaderboardPage from './pages/LeaderboardPage';\nimport ProfilePage from './pages/ProfilePage';\nimport GameLobby from './components/GameLobby';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { FirebaseTest } from './components/FirebaseTest';\nimport './App.css';\n\nfunction App() {\n  const location = useLocation();\n\n  // Initialize Google Analytics only once\n  useEffect(() => {\n    ReactGA.initialize('G-9679TPXEBR'); // Replace with your Measurement ID\n  }, []);\n\n  // Send pageview whenever the pathname changes\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: location.pathname });\n  }, [location.pathname]);\n\n  return (\n    <AuthProvider>\n      <div className=\"App\">\n        <Header />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/game/population\" element={<GamePage />} />\n            <Route path=\"/game/population/cooperation\" element={<GameLobby />} />\n            <Route path=\"/game/population/cooperation/play\" element={<GamePage />} />\n            <Route path=\"/game/area\" element={<GamePage />} />\n            <Route path=\"/gameover\" element={<GameOverPage />} />\n            <Route path=\"/leaderboard\" element={<LeaderboardPage />} />\n            <Route path=\"/profile\" element={<ProfilePage />} />\n            <Route path=\"/test\" element={<FirebaseTest />} />\n          </Routes>\n        </div>\n        <Footer /> \n      </div>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Wrap everything inside HashRouter\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <DndProvider backend={HTML5Backend}>\n        <App />\n      </DndProvider>\n    </HashRouter>\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}