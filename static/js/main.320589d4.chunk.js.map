{"version":3,"sources":["assets/logo.png","firebase.js","contexts/AuthContext.js","services/avatarService.js","services/userProfileService.js","components/LoginButton.js","components/Header.js","components/Footer.js","pages/HomePage.js","components/CountryCard.js","pages/GamePage.js","api/countriesApi.js","api/leaderboardApi.js","pages/GameOverPage.js","pages/LeaderboardPage.js","services/achievementsService.js","pages/ProfilePage.js","services/leaderboardService.js","components/FirebaseTest.js","App.js","index.js"],"names":["module","exports","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","db","getFirestore","AuthContext","createContext","useAuth","useContext","AuthProvider","_ref","children","currentUser","setCurrentUser","useState","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","React","createElement","Provider","avatarService","getAvatarOptions","id","url","name","userProfileService","userId","userDoc","getDoc","doc","exists","data","defaultProfile","nickname","country","avatarUrl","createdAt","Date","this","updateUserProfile","error","console","profileData","userRef","setDoc","updatedAt","merge","field","updateDoc","LoginButton","setEmail","setPassword","setError","showLoginForm","setShowLoginForm","userProfile","setUserProfile","navigate","useNavigate","async","profile","getUserProfile","uid","loadUserProfile","className","onClick","src","alt","message","disabled","type","onChange","e","target","placeholder","required","preventDefault","style","color","Header","isMenuOpen","setIsMenuOpen","closeMenu","Link","to","logo","toggleMenu","Footer","getFullYear","HomePage","handlePlayPopulation","ReactGA","event","category","action","handlePlayArea","CountryCard","isClickable","highlight","mode","isFlipped","setIsFlipped","highlightClass","handleClick","flagUrl","population","toLocaleString","area","GamePage","sortedCountries","setSortedCountries","currentCountry","setCurrentCountry","remainingCountries","setRemainingCountries","score","setScore","hoverIndex","setHoverIndex","useParams","getRandomCountry","countries","randomIndex","Math","floor","random","length","splice","startNewGame","useCallback","availableCountries","firstCountry","nextCountry","validCountries","response","fetch","ok","Error","status","json","Array","isArray","unMemberCountries","filter","_country$name","_country$flags","unMember","common","flags","svg","map","index","fetchCountries","initializeGame","compareProperty","handleInsert","newSortedCountries","isCorrectOrder","prevScore","pickNextCountry","state","countriesCopy","correctOrder","sort","a","b","incorrectCountry","userOrder","countriesList","i","key","onMouseEnter","onMouseLeave","_","getLeaderboard","arguments","undefined","leaderboard","JSON","parse","localStorage","getItem","entry","GameOverPage","location","useLocation","playerName","setPlayerName","isSubmitted","setIsSubmitted","onSubmit","trim","submitScore","newEntry","now","date","toISOString","push","top100","slice","setItem","stringify","err","htmlFor","maxLength","LeaderboardPage","setLeaderboard","selectedMode","setSelectedMode","loadLeaderboard","charAt","toUpperCase","dateString","toLocaleDateString","achievementsService","achievements","getAchievementDefinitions","beginner","title","description","icon","requirement","intermediate","master","ProfilePage","setProfile","setAchievements","editing","setEditing","showAvatarSelector","setShowAvatarSelector","formData","setFormData","achievementDefinitions","avatarOptions","loadProfile","userAchievements","Promise","all","getUserAchievements","handleInputChange","prev","avatar","handleAvatarSelect","Fragment","Object","entries","modeAchievements","_ref2","_achievements$achieve","level","achievement","renderAchievement","isUnlocked","unlocked","leaderboardService","username","gameMode","addDoc","collection","timestamp","serverTimestamp","limit","q","query","orderBy","getDocs","docs","where","FirebaseTest","testScore","setTestScore","padding","addScore","marginLeft","marginTop","App","initialize","send","hitType","page","pathname","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode","BrowserRouter","DndProvider","backend","HTML5Backend"],"mappings":"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","file":"static/js/main.320589d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de73253.png\";","import { initializeApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Firebase Authentication and get a reference to the service\r\nexport const auth = getAuth(app);\r\n\r\n// Initialize Cloud Firestore and get a reference to the service\r\nexport const db = getFirestore(app);\r\n\r\nexport default app; ","import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { \r\n  createUserWithEmailAndPassword, \r\n  signInWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged \r\n} from 'firebase/auth';\r\nimport { auth } from '../firebase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  function signup(email, password) {\r\n    return createUserWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function login(email, password) {\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n  }\r\n\r\n  function logout() {\r\n    return signOut(auth);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setCurrentUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n} ","export const avatarService = {\r\n  getAvatarOptions() {\r\n    return [\r\n      {\r\n        id: 'default',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=default',\r\n        name: 'Default'\r\n      },\r\n      {\r\n        id: 'happy',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=happy',\r\n        name: 'Happy'\r\n      },\r\n      {\r\n        id: 'cool',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=cool',\r\n        name: 'Cool'\r\n      },\r\n      {\r\n        id: 'smart',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=smart',\r\n        name: 'Smart'\r\n      },\r\n      {\r\n        id: 'friendly',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=friendly',\r\n        name: 'Friendly'\r\n      },\r\n      {\r\n        id: 'adventurous',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=adventurous',\r\n        name: 'Adventurous'\r\n      },\r\n      {\r\n        id: 'creative',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=creative',\r\n        name: 'Creative'\r\n      },\r\n      {\r\n        id: 'mysterious',\r\n        url: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mysterious',\r\n        name: 'Mysterious'\r\n      }\r\n    ];\r\n  }\r\n}; ","import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\nimport { avatarService } from './avatarService';\r\n\r\nconst USERS_COLLECTION = 'users';\r\n\r\nexport const userProfileService = {\r\n  // Get user profile\r\n  async getUserProfile(userId) {\r\n    try {\r\n      const userDoc = await getDoc(doc(db, USERS_COLLECTION, userId));\r\n      if (userDoc.exists()) {\r\n        return userDoc.data();\r\n      }\r\n      // If no profile exists, create a default one\r\n      const defaultProfile = {\r\n        nickname: '',\r\n        country: '',\r\n        avatarUrl: avatarService.getAvatarOptions()[0].url,\r\n        createdAt: new Date()\r\n      };\r\n      await this.updateUserProfile(userId, defaultProfile);\r\n      return defaultProfile;\r\n    } catch (error) {\r\n      console.error('Error getting user profile:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create or update user profile\r\n  async updateUserProfile(userId, profileData) {\r\n    try {\r\n      const userRef = doc(db, USERS_COLLECTION, userId);\r\n      await setDoc(userRef, {\r\n        ...profileData,\r\n        updatedAt: new Date()\r\n      }, { merge: true });\r\n    } catch (error) {\r\n      console.error('Error updating user profile:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update specific profile fields\r\n  async updateProfileField(userId, field, value) {\r\n    try {\r\n      const userRef = doc(db, USERS_COLLECTION, userId);\r\n      await updateDoc(userRef, {\r\n        [field]: value,\r\n        updatedAt: new Date()\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating profile field:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { userProfileService } from '../services/userProfileService';\r\nimport { avatarService } from '../services/avatarService';\r\nimport './LoginButton.css';\r\n\r\nexport default function LoginButton() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [showLoginForm, setShowLoginForm] = useState(false);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadUserProfile = async () => {\r\n      if (currentUser) {\r\n        try {\r\n          const profile = await userProfileService.getUserProfile(currentUser.uid);\r\n          setUserProfile(profile);\r\n        } catch (error) {\r\n          console.error('Error loading user profile:', error);\r\n        }\r\n      }\r\n    };\r\n    loadUserProfile();\r\n  }, [currentUser]);\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleSignup(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n      setShowLoginForm(false);\r\n      navigate('/profile');\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n      navigate('/');\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  if (currentUser) {\r\n    return (\r\n      <div className=\"login-button\">\r\n        <div className=\"user-profile-button\" onClick={() => navigate('/profile')}>\r\n          <img \r\n            src={userProfile?.avatarUrl || avatarService.getAvatarOptions()[0].url} \r\n            alt=\"Profile\" \r\n            className=\"header-avatar\"\r\n          />\r\n          <span className=\"user-name\">{userProfile?.nickname || currentUser.email}</span>\r\n        </div>\r\n        <button onClick={handleLogout} disabled={loading} className=\"logout-button\">\r\n          Log Out\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"login-button\">\r\n      {!showLoginForm ? (\r\n        <button onClick={() => setShowLoginForm(true)}>\r\n          Login / Sign Up\r\n        </button>\r\n      ) : (\r\n        <div className=\"login-form\">\r\n          <input\r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            placeholder=\"Email\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            required\r\n          />\r\n          <div className=\"login-buttons\">\r\n            <button onClick={handleLogin} disabled={loading}>\r\n              Login\r\n            </button>\r\n            <button onClick={handleSignup} disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n            <button onClick={() => setShowLoginForm(false)}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} ","// src/components/Header.js\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\nimport logo from '../assets/logo.png'; // Ensure you have a logo image in your assets folder\nimport LoginButton from './LoginButton';\n\nfunction Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <header className=\"header\">\n      <div className=\"header-container\">\n        <Link to=\"/\" className=\"header-logo\" onClick={closeMenu}>\n          <img src={logo} alt=\"Sortly Logo\" className=\"logo-image\" />\n          <span className=\"site-name\">Sortly - The Sorting Game</span>\n        </Link>\n        <button className=\"menu-button\" onClick={toggleMenu}>\n          ☰\n        </button>\n        <nav className={`header-nav ${isMenuOpen ? 'active' : ''}`}>\n          <Link to=\"/\" className=\"nav-link\" onClick={closeMenu}>Home</Link>\n          <Link to=\"/game/population\" className=\"nav-link\" onClick={closeMenu}>Population</Link>\n          <Link to=\"/game/area\" className=\"nav-link\" onClick={closeMenu}>Area</Link>\n          <Link to=\"/leaderboard\" className=\"nav-link\" onClick={closeMenu}>Leaderboard</Link>\n          <div className=\"nav-login\">\n            <LoginButton />\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","// src/components/Footer.js\r\n\r\nimport React from 'react';\r\nimport './Footer.css';\r\nimport logo from '../assets/logo.png'; // Reuse your logo\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <img src={logo} alt=\"Sortly Logo\" className=\"footer-logo\" />\r\n        <p>&copy; {new Date().getFullYear()} Sortly. All rights reserved.</p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// src/pages/HomePage.js\r\n\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReactGA from 'react-ga4'; // Import ReactGA\r\nimport './HomePage.css';\r\n\r\nfunction HomePage() {\r\n  const navigate = useNavigate();\r\n\r\n  // Define the handler functions\r\n  const handlePlayPopulation = () => {\r\n    // Track the event in Google Analytics\r\n    ReactGA.event({\r\n      category: 'Game',\r\n      action: 'Clicked Play Population Game',\r\n    });\r\n    // Navigate to the population game page\r\n    navigate('/game/population');\r\n  };\r\n\r\n  const handlePlayArea = () => {\r\n    // Track the event in Google Analytics\r\n    ReactGA.event({\r\n      category: 'Game',\r\n      action: 'Clicked Play Area Game',\r\n    });\r\n    // Navigate to the area game page\r\n    navigate('/game/area');\r\n  };\r\n\r\n  return (\r\n    <div className=\"homepage\">\r\n      {/* Section 1: Sort by Population */}\r\n      <div className=\"section population-section\">\r\n        <div className=\"overlay\">\r\n          <h2>Sort by Population</h2>\r\n          <button\r\n            className=\"button button-primary\"\r\n            onClick={handlePlayPopulation} // Use the handler function\r\n          >\r\n            Play Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section 2: Sort by Area */}\r\n      <div className=\"section area-section\">\r\n        <div className=\"overlay\">\r\n          <h2>Sort by Area</h2>\r\n          <button\r\n            className=\"button button-primary\"\r\n            onClick={handlePlayArea} // Use the handler function\r\n          >\r\n            Play Now\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Section 3: Coming Soon */}\r\n      <div className=\"section coming-soon-section\">\r\n        <div className=\"overlay\">\r\n          <h2>New Game Mode</h2>\r\n          <p>Coming Soon</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","// src/components/CountryCard.js\n\nimport React, { useState } from 'react';\nimport './CountryCard.css';\n\nfunction CountryCard({ country, isClickable, highlight, mode }) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleClick = () => {\n    if (isClickable) {\n      setIsFlipped(!isFlipped);\n    }\n  };\n\n  const highlightClass = highlight ? `highlighted-${highlight}` : '';\n\n  const getDetailText = () => {\n    const detailMappings = {\n      population: `Population: ${country.population.toLocaleString()}`,\n      area: `Area: ${country.area.toLocaleString()} km²`\n    };\n    return detailMappings[mode] || '';\n  };\n\n  return (\n    <div\n      className={`country-card ${isFlipped ? 'flipped' : ''} ${\n        isClickable ? 'clickable' : ''\n      } ${highlightClass}`}\n      onClick={handleClick}\n    >\n      <div className=\"card-inner\">\n        {/* Front Side */}\n        <div className={`card-face card-front ${highlightClass}`}>\n          <img\n            src={country.flagUrl}\n            alt={`Flag of ${country.name}`}\n            className=\"country-flag\"\n          />\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n          </div>\n        </div>\n        {/* Back Side */}\n        <div className={`card-face card-back ${highlightClass}`}>\n          <div className=\"country-info\">\n            <h3 className=\"country-name\">{country.name}</h3>\n            <p className=\"country-detail\">\n              {getDetailText()}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CountryCard;\n","// src/pages/GamePage.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport CountryCard from '../components/CountryCard';\nimport './GamePage.css';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { fetchCountries } from '../api/countriesApi'; // As previously set up\n\nfunction GamePage() {\n  const [sortedCountries, setSortedCountries] = useState([]);\n  const [currentCountry, setCurrentCountry] = useState(null);\n  const [remainingCountries, setRemainingCountries] = useState([]);\n  const [score, setScore] = useState(0);\n  const [hoverIndex, setHoverIndex] = useState(null);\n  const { mode } = useParams(); // Get the game mode from the URL\n  const navigate = useNavigate();\n\n  // Helper function to get a random country from the array\n  const getRandomCountry = (countries) => {\n    const randomIndex = Math.floor(Math.random() * countries.length);\n    return countries.splice(randomIndex, 1)[0];\n  };\n\n  const startNewGame = useCallback((data) => {\n    const availableCountries = [...data];\n\n    // Pick a random starting country\n    const firstCountry = getRandomCountry(availableCountries);\n    const nextCountry = getRandomCountry(availableCountries);\n\n    setSortedCountries([firstCountry]);\n    setRemainingCountries(availableCountries);\n    setScore(1);\n    setCurrentCountry(nextCountry);\n  }, []); // Empty dependency array since it doesn't depend on any props or state\n\n  useEffect(() => {\n    const initializeGame = async () => {\n      const data = await fetchCountries();\n      // Filter countries with missing data if necessary\n      const validCountries = data.filter(\n        (country) => country.population && country.area && country.flagUrl\n      );\n      startNewGame(validCountries);\n    };\n\n    initializeGame();\n  }, [startNewGame]); // Add startNewGame to dependency array\n\n  // Determine the comparison property based on the game mode\n  const compareProperty = mode === 'area' ? 'area' : 'population';\n\n  const pickNextCountry = () => {\n    if (remainingCountries.length === 0) {\n      navigate('/gameover', {\n        state: { score, message: 'Congratulations! You sorted all countries correctly.', mode, },\n      });\n      return;\n    }\n\n    const countriesCopy = [...remainingCountries];\n    const randomIndex = Math.floor(Math.random() * countriesCopy.length);\n    const nextCountry = countriesCopy.splice(randomIndex, 1)[0];\n\n    setCurrentCountry(nextCountry);\n    setRemainingCountries(countriesCopy);\n  };\n\n  const handleInsert = (index) => {\n    const newSortedCountries = [...sortedCountries];\n    newSortedCountries.splice(index, 0, currentCountry);\n\n    if (isCorrectOrder(newSortedCountries)) {\n      setSortedCountries(newSortedCountries);\n      setScore((prevScore) => prevScore + 1);\n      setCurrentCountry(null);\n      pickNextCountry();\n    } else {\n      const allCountries = [...sortedCountries, currentCountry];\n      const correctOrder = [...allCountries].sort((a, b) => a[compareProperty] - b[compareProperty]);\n\n      navigate('/gameover', {\n        state: {\n          score,\n          message: 'Incorrect placement!',\n          incorrectCountry: currentCountry,\n          userOrder: newSortedCountries,\n          correctOrder: correctOrder,\n          mode,\n        },\n      });\n    }\n  };\n\n  const isCorrectOrder = (countriesList) => {\n    for (let i = 0; i < countriesList.length - 1; i++) {\n      if (countriesList[i][compareProperty] > countriesList[i + 1][compareProperty]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  return (\n    <div className=\"game-page\">\n      <h2>Sort Countries by {mode === 'area' ? 'Area' : 'Population'} (Ascending)</h2>\n      <p>Score: {score - 1}</p>\n      <div className=\"sorted-countries-container\">\n        {currentCountry && (\n          <div className=\"instructions\">\n            <p>\n              Where does <strong>{currentCountry.name}</strong> fit among the sorted countries?\n            </p>\n          </div>\n        )}\n        <div className=\"sorted-countries\">\n          {sortedCountries.map((country, index) => (\n            <CountryCard\n              key={`country-${country.id}`}\n              country={country}\n              isClickable={true}\n              mode={mode}\n              highlight={hoverIndex === index ? 'hover' : ''}\n            />\n          ))}\n        </div>\n\n        {currentCountry && (\n          <div className=\"insert-buttons\">\n            <button\n              className=\"insert-button lower-button\"\n              onClick={() => handleInsert(0)}\n              onMouseEnter={() => setHoverIndex(0)}\n              onMouseLeave={() => setHoverIndex(null)}\n            >\n              ↓\n            </button>\n            {sortedCountries.map((_, index) => (\n              <button\n                key={`insert-${index + 1}`}\n                className={`insert-button ${index === sortedCountries.length - 1 ? 'higher-button' : 'here-button'}`}\n                onClick={() => handleInsert(index + 1)}\n                onMouseEnter={() => setHoverIndex(index + 1)}\n                onMouseLeave={() => setHoverIndex(null)}\n              >\n                {index === sortedCountries.length - 1 ? '↑' : index + 1}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n      {currentCountry && (\n        <div className=\"current-country\">\n          <h3>Current Country:</h3>\n          <CountryCard country={currentCountry} isClickable={false} mode={mode} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GamePage;\n","// src/api/countriesApi.js\n\nexport const fetchCountries = async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      throw new Error('Invalid data format received from API');\n    }\n\n    // Filter to only include UN member states with valid data\n    const unMemberCountries = data.filter((country) => \n      country.unMember && \n      country.name?.common && \n      country.flags?.svg && \n      typeof country.population === 'number' && \n      typeof country.area === 'number'\n    );\n\n    // Map the API data to match your application's structure\n    const countries = unMemberCountries.map((country, index) => ({\n      id: index + 1,\n      name: country.name.common,\n      flagUrl: country.flags.svg,\n      population: country.population,\n      area: country.area,\n    }));\n\n    return countries;\n  } catch (error) {\n    console.error('Error fetching countries:', error);\n    throw new Error('Failed to fetch countries data. Please try again later.');\n  }\n};\n  ","// src/api/leaderboardApi.js\r\n\r\n// For now, we'll use localStorage to store leaderboard data\r\n// In a real application, this would be replaced with actual API calls to a backend\r\n\r\nconst LEADERBOARD_KEY = 'sortly_leaderboard';\r\n\r\nexport const submitScore = (playerName, score, mode) => {\r\n  const leaderboard = getLeaderboard();\r\n  const newEntry = {\r\n    id: Date.now(),\r\n    playerName,\r\n    score,\r\n    mode,\r\n    date: new Date().toISOString(),\r\n  };\r\n  \r\n  leaderboard.push(newEntry);\r\n  // Sort by score (descending) and keep only top 100 entries\r\n  leaderboard.sort((a, b) => b.score - a.score);\r\n  const top100 = leaderboard.slice(0, 100);\r\n  \r\n  localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(top100));\r\n  return newEntry;\r\n};\r\n\r\nexport const getLeaderboard = (mode = null) => {\r\n  const leaderboard = JSON.parse(localStorage.getItem(LEADERBOARD_KEY) || '[]');\r\n  if (mode) {\r\n    return leaderboard.filter(entry => entry.mode === mode);\r\n  }\r\n  return leaderboard;\r\n};\r\n\r\nexport const getTopScores = (mode = null, limit = 10) => {\r\n  const leaderboard = getLeaderboard(mode);\r\n  return leaderboard.slice(0, limit);\r\n}; ","// src/pages/GameOverPage.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport CountryCard from '../components/CountryCard';\r\nimport { submitScore } from '../api/leaderboardApi';\r\nimport './GameOverPage.css';\r\nimport '../components/Buttons.css';\r\n\r\nfunction GameOverPage() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { score, message, incorrectCountry, userOrder, correctOrder, mode } = location.state || {};\r\n  const [playerName, setPlayerName] = useState('');\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!playerName.trim()) {\r\n      setError('Please enter your name');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      submitScore(playerName, score - 1, mode);\r\n      setIsSubmitted(true);\r\n    } catch (err) {\r\n      setError('Failed to submit score. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-over-page\">\r\n      <h2>Game Over</h2>\r\n      <p>{message}</p>\r\n      <p>Your final score: {score - 1}</p>\r\n\r\n      {!isSubmitted ? (\r\n        <form onSubmit={handleSubmit} className=\"score-submission\">\r\n          <div className=\"input-group\">\r\n            <label htmlFor=\"playerName\">Enter your name:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"playerName\"\r\n              value={playerName}\r\n              onChange={(e) => setPlayerName(e.target.value)}\r\n              placeholder=\"Your name\"\r\n              maxLength={20}\r\n            />\r\n          </div>\r\n          {error && <p className=\"error\">{error}</p>}\r\n          <button type=\"submit\" className=\"button button-primary\">\r\n            Submit Score\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <div className=\"submission-success\">\r\n          <p>Score submitted successfully!</p>\r\n        </div>\r\n      )}\r\n\r\n      {userOrder && incorrectCountry && (\r\n        <div className=\"user-order\">\r\n          <h3>Your order was:</h3>\r\n          <div className=\"country-list\">\r\n            {userOrder.map((country) => (\r\n              <CountryCard\r\n                key={country.id}\r\n                country={country}\r\n                isClickable={true}\r\n                highlight={country.id === incorrectCountry.id ? 'incorrect' : ''}\r\n                mode={mode}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {correctOrder && incorrectCountry && (\r\n        <div className=\"correct-order\">\r\n          <h3>The correct order was:</h3>\r\n          <div className=\"country-list\">\r\n            {correctOrder.map((country) => (\r\n              <CountryCard\r\n                key={country.id}\r\n                country={country}\r\n                isClickable={true}\r\n                highlight={country.id === incorrectCountry.id ? 'correct' : ''}\r\n                mode={mode}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"game-over-buttons\">\r\n        <button className=\"button button-primary\" onClick={() => navigate(`/game/${mode}`)}>\r\n          Play Again\r\n        </button>\r\n        <button className=\"button button-secondary\" onClick={() => navigate('/')}>\r\n          Go to Home Page\r\n        </button>\r\n        <button className=\"button button-secondary\" onClick={() => navigate('/leaderboard')}>\r\n          View Leaderboard\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOverPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getLeaderboard } from '../api/leaderboardApi';\r\nimport './LeaderboardPage.css';\r\n\r\nfunction LeaderboardPage() {\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [selectedMode, setSelectedMode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadLeaderboard = () => {\r\n      const data = getLeaderboard(selectedMode);\r\n      setLeaderboard(data);\r\n    };\r\n    loadLeaderboard();\r\n  }, [selectedMode]);\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toLocaleDateString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"leaderboard-page\">\r\n      <h2>Leaderboard</h2>\r\n      \r\n      <div className=\"mode-filters\">\r\n        <button \r\n          className={`button ${!selectedMode ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode(null)}\r\n        >\r\n          All Modes\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'population' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('population')}\r\n        >\r\n          Population\r\n        </button>\r\n        <button \r\n          className={`button ${selectedMode === 'area' ? 'button-primary' : 'button-secondary'}`}\r\n          onClick={() => setSelectedMode('area')}\r\n        >\r\n          Area\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"leaderboard-table\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Rank</th>\r\n              <th>Player</th>\r\n              <th>Score</th>\r\n              <th>Mode</th>\r\n              <th>Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {leaderboard.map((entry, index) => (\r\n              <tr key={entry.id}>\r\n                <td>{index + 1}</td>\r\n                <td>{entry.playerName}</td>\r\n                <td>{entry.score}</td>\r\n                <td>{entry.mode.charAt(0).toUpperCase() + entry.mode.slice(1)}</td>\r\n                <td>{formatDate(entry.date)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LeaderboardPage; ","import { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\n\nconst ACHIEVEMENTS_COLLECTION = 'achievements';\n\nexport const achievementsService = {\n  // Get user achievements\n  async getUserAchievements(userId) {\n    try {\n      const userDoc = await getDoc(doc(db, ACHIEVEMENTS_COLLECTION, userId));\n      if (userDoc.exists()) {\n        return userDoc.data();\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Update user achievements\n  async updateUserAchievements(userId, achievements) {\n    try {\n      const userRef = doc(db, ACHIEVEMENTS_COLLECTION, userId);\n      await setDoc(userRef, {\n        ...achievements,\n        updatedAt: new Date()\n      }, { merge: true });\n    } catch (error) {\n      console.error('Error updating user achievements:', error);\n      throw error;\n    }\n  },\n\n  // Achievement definitions\n  getAchievementDefinitions() {\n    return {\n      population: {\n        beginner: {\n          id: 'population_beginner',\n          title: 'Population Novice',\n          description: 'Complete 5 population sorting games',\n          icon: '🌍',\n          requirement: 5\n        },\n        intermediate: {\n          id: 'population_intermediate',\n          title: 'Population Expert',\n          description: 'Complete 20 population sorting games',\n          icon: '🌎',\n          requirement: 20\n        },\n        master: {\n          id: 'population_master',\n          title: 'Population Master',\n          description: 'Complete 50 population sorting games',\n          icon: '🌏',\n          requirement: 50\n        }\n      },\n      area: {\n        beginner: {\n          id: 'area_beginner',\n          title: 'Area Novice',\n          description: 'Complete 5 area sorting games',\n          icon: '🗺️',\n          requirement: 5\n        },\n        intermediate: {\n          id: 'area_intermediate',\n          title: 'Area Expert',\n          description: 'Complete 20 area sorting games',\n          icon: '🗾',\n          requirement: 20\n        },\n        master: {\n          id: 'area_master',\n          title: 'Area Master',\n          description: 'Complete 50 area sorting games',\n          icon: '🌐',\n          requirement: 50\n        }\n      }\n    };\n  }\n}; ","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { userProfileService } from '../services/userProfileService';\r\nimport { achievementsService } from '../services/achievementsService';\r\nimport { avatarService } from '../services/avatarService';\r\nimport './ProfilePage.css';\r\n\r\nexport default function ProfilePage() {\r\n  const { currentUser } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [profile, setProfile] = useState(null);\r\n  const [achievements, setAchievements] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [editing, setEditing] = useState(false);\r\n  const [showAvatarSelector, setShowAvatarSelector] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    nickname: '',\r\n    country: '',\r\n    avatarUrl: ''\r\n  });\r\n\r\n  const achievementDefinitions = achievementsService.getAchievementDefinitions();\r\n  const avatarOptions = avatarService.getAvatarOptions();\r\n\r\n  const loadProfile = useCallback(async () => {\r\n    try {\r\n      const [userProfile, userAchievements] = await Promise.all([\r\n        userProfileService.getUserProfile(currentUser.uid),\r\n        achievementsService.getUserAchievements(currentUser.uid)\r\n      ]);\r\n\r\n      if (userProfile) {\r\n        setProfile(userProfile);\r\n        setFormData({\r\n          nickname: userProfile.nickname || '',\r\n          country: userProfile.country || '',\r\n          avatarUrl: userProfile.avatarUrl || avatarOptions[0].url\r\n        });\r\n      }\r\n\r\n      if (userAchievements) {\r\n        setAchievements(userAchievements);\r\n      }\r\n    } catch (error) {\r\n      setError('Failed to load profile: ' + error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentUser, avatarOptions]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      loadProfile();\r\n    }\r\n  }, [currentUser, loadProfile]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleAvatarSelect = (avatarUrl) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      avatarUrl\r\n    }));\r\n    setShowAvatarSelector(false);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      await userProfileService.updateUserProfile(currentUser.uid, formData);\r\n      setProfile(prev => ({ ...prev, ...formData }));\r\n      setEditing(false);\r\n    } catch (error) {\r\n      setError('Failed to update profile: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const renderAchievement = (achievement, isUnlocked) => (\r\n    <div className={`achievement-card ${isUnlocked ? 'unlocked' : 'locked'}`}>\r\n      <div className=\"achievement-icon\">{achievement.icon}</div>\r\n      <div className=\"achievement-info\">\r\n        <h3>{achievement.title}</h3>\r\n        <p>{achievement.description}</p>\r\n      </div>\r\n      <div className=\"achievement-status\">\r\n        {isUnlocked ? '✓' : '🔒'}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (!currentUser) {\r\n    navigate('/');\r\n    return null;\r\n  }\r\n\r\n  if (loading) {\r\n    return <div className=\"profile-page\">Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"profile-page\">\r\n      <div className=\"profile-content\">\r\n        <div className=\"profile-header\">\r\n          <div className=\"avatar-container\">\r\n            <img \r\n              src={profile?.avatarUrl || avatarOptions[0].url} \r\n              alt=\"Profile\" \r\n              className=\"profile-avatar\"\r\n            />\r\n            {editing && (\r\n              <button \r\n                className=\"change-avatar-button\"\r\n                onClick={() => setShowAvatarSelector(!showAvatarSelector)}\r\n              >\r\n                Change Avatar\r\n              </button>\r\n            )}\r\n            {showAvatarSelector && (\r\n              <div className=\"avatar-selector\">\r\n                <div className=\"avatar-grid\">\r\n                  {avatarOptions.map(avatar => (\r\n                    <div \r\n                      key={avatar.id} \r\n                      className={`avatar-option ${formData.avatarUrl === avatar.url ? 'selected' : ''}`}\r\n                      onClick={() => handleAvatarSelect(avatar.url)}\r\n                    >\r\n                      <img src={avatar.url} alt={avatar.name} />\r\n                      <span>{avatar.name}</span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"profile-info\">\r\n            <div className=\"profile-main\">\r\n              {!editing ? (\r\n                <>\r\n                  <h1 className=\"nickname\">{profile?.nickname || 'Set your nickname'}</h1>\r\n                  <p className=\"email\">{currentUser.email}</p>\r\n                  <p className=\"country\">{profile?.country || 'Set your country'}</p>\r\n                  <button onClick={() => setEditing(true)} className=\"edit-button\">\r\n                    Edit Profile\r\n                  </button>\r\n                </>\r\n              ) : (\r\n                <form onSubmit={handleSubmit} className=\"profile-form\">\r\n                  <div className=\"form-group\">\r\n                    <label>Nickname:</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"nickname\"\r\n                      value={formData.nickname}\r\n                      onChange={handleInputChange}\r\n                      placeholder=\"Enter your nickname\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label>Country:</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"country\"\r\n                      value={formData.country}\r\n                      onChange={handleInputChange}\r\n                      placeholder=\"Enter your country\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-buttons\">\r\n                    <button type=\"submit\" className=\"save-button\">Save Changes</button>\r\n                    <button \r\n                      type=\"button\" \r\n                      onClick={() => setEditing(false)}\r\n                      className=\"cancel-button\"\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"achievements-section\">\r\n          <h2>Achievements</h2>\r\n          <div className=\"achievements-grid\">\r\n            {Object.entries(achievementDefinitions).map(([mode, modeAchievements]) => (\r\n              <div key={mode} className=\"achievement-mode\">\r\n                <h3>{mode.charAt(0).toUpperCase() + mode.slice(1)} Mode</h3>\r\n                {Object.entries(modeAchievements).map(([level, achievement]) => {\r\n                  const isUnlocked = achievements?.[achievement.id]?.unlocked || false;\r\n                  return renderAchievement(achievement, isUnlocked);\r\n                })}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n} ","import { \r\n  collection, \r\n  addDoc, \r\n  query, \r\n  orderBy, \r\n  getDocs,\r\n  where,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst LEADERBOARD_COLLECTION = 'scores';\r\n\r\nexport const leaderboardService = {\r\n  // Add a new score\r\n  async addScore(userId, username, score, gameMode) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, LEADERBOARD_COLLECTION), {\r\n        userId,\r\n        username,\r\n        score,\r\n        gameMode,\r\n        timestamp: serverTimestamp()\r\n      });\r\n      return docRef.id;\r\n    } catch (error) {\r\n      console.error('Error adding score:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get global leaderboard\r\n  async getGlobalLeaderboard(limit = 10) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting leaderboard:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user's best scores\r\n  async getUserBestScores(userId, limit = 5) {\r\n    try {\r\n      const q = query(\r\n        collection(db, LEADERBOARD_COLLECTION),\r\n        where('userId', '==', userId),\r\n        orderBy('score', 'desc'),\r\n        limit(limit)\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting user scores:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; ","import React, { useState } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { leaderboardService } from '../services/leaderboardService';\r\n\r\nexport function FirebaseTest() {\r\n  const { currentUser, login, signup, logout } = useAuth();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [testScore, setTestScore] = useState(null);\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await signup(email, password);\r\n    } catch (error) {\r\n      setError('Failed to create an account: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogin(e) {\r\n    e.preventDefault();\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await login(email, password);\r\n    } catch (error) {\r\n      setError('Failed to log in: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleLogout() {\r\n    try {\r\n      setError('');\r\n      setLoading(true);\r\n      await logout();\r\n    } catch (error) {\r\n      setError('Failed to log out: ' + error.message);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function addTestScore() {\r\n    if (!currentUser) return;\r\n    try {\r\n      await leaderboardService.addScore(\r\n        currentUser.uid,\r\n        currentUser.email,\r\n        100,\r\n        'test'\r\n      );\r\n      setTestScore('Score added successfully!');\r\n    } catch (error) {\r\n      setTestScore('Failed to add score: ' + error.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Firebase Test</h2>\r\n      \r\n      {currentUser ? (\r\n        <div>\r\n          <p>Logged in as: {currentUser.email}</p>\r\n          <button onClick={handleLogout} disabled={loading}>\r\n            Log Out\r\n          </button>\r\n          <button onClick={addTestScore} style={{ marginLeft: '10px' }}>\r\n            Add Test Score\r\n          </button>\r\n          {testScore && <p>{testScore}</p>}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              placeholder=\"Email\"\r\n              required\r\n            />\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              placeholder=\"Password\"\r\n              required\r\n            />\r\n            <button type=\"submit\" disabled={loading}>\r\n              Sign Up\r\n            </button>\r\n          </form>\r\n          <form onSubmit={handleLogin} style={{ marginTop: '10px' }}>\r\n            <button type=\"submit\" disabled={loading}>\r\n              Log In\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n      \r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n} ","// src/App.js\n\nimport React, { useEffect } from 'react';\nimport { useLocation, Routes, Route } from 'react-router-dom';\nimport ReactGA from 'react-ga4';\nimport Header from './components/Header';\nimport Footer from './components/Footer'; \nimport HomePage from './pages/HomePage';\nimport GamePage from './pages/GamePage';\nimport GameOverPage from './pages/GameOverPage';\nimport LeaderboardPage from './pages/LeaderboardPage';\nimport ProfilePage from './pages/ProfilePage';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { FirebaseTest } from './components/FirebaseTest';\nimport './App.css';\n\nfunction App() {\n  const location = useLocation();\n\n  // Initialize Google Analytics only once\n  useEffect(() => {\n    ReactGA.initialize('G-9679TPXEBR'); // Replace with your Measurement ID\n  }, []);\n\n  // Send pageview whenever the pathname changes\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: location.pathname });\n  }, [location.pathname]);\n\n  return (\n    <AuthProvider>\n      <div className=\"App\">\n        <Header />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/game/:mode\" element={<GamePage />} />\n            <Route path=\"/gameover\" element={<GameOverPage />} />\n            <Route path=\"/leaderboard\" element={<LeaderboardPage />} />\n            <Route path=\"/profile\" element={<ProfilePage />} />\n            <Route path=\"/test\" element={<FirebaseTest />} />\n          </Routes>\n        </div>\n        <Footer /> \n      </div>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// src/index.js\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// Wrap everything inside BrowserRouter\r\nroot.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <DndProvider backend={HTML5Backend}>\r\n        <App />\r\n      </DndProvider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}